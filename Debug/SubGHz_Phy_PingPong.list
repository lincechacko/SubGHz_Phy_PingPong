
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bccc  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800be04  0800be04  0000ce04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c180  0800c180  0000e01c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c180  0800c180  0000d180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c188  0800c188  0000e01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c188  0800c188  0000d188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c18c  0800c18c  0000d18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800c190  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000001c  0800c1ac  0000e01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000680  0800c1ac  0000e680  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000e01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bf8  00000000  00000000  0000e046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c97  00000000  00000000  0002fc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  000358d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000177c  00000000  00000000  00037828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234af  00000000  00000000  00038fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237e2  00000000  00000000  0005c453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4a2f  00000000  00000000  0007fc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e60  00000000  00000000  001446a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800bdec 	.word	0x0800bdec

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800bdec 	.word	0x0800bdec

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b988 	b.w	80004b0 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	468e      	mov	lr, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4617      	mov	r7, r2
 80001cc:	d962      	bls.n	8000294 <__udivmoddi4+0xdc>
 80001ce:	fab2 f682 	clz	r6, r2
 80001d2:	b14e      	cbz	r6, 80001e8 <__udivmoddi4+0x30>
 80001d4:	f1c6 0320 	rsb	r3, r6, #32
 80001d8:	fa01 f806 	lsl.w	r8, r1, r6
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	40b7      	lsls	r7, r6
 80001e2:	ea43 0808 	orr.w	r8, r3, r8
 80001e6:	40b4      	lsls	r4, r6
 80001e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ec:	fa1f fc87 	uxth.w	ip, r7
 80001f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001f4:	0c23      	lsrs	r3, r4, #16
 80001f6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000202:	429a      	cmp	r2, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f101 30ff 	add.w	r0, r1, #4294967295
 800020c:	f080 80ea 	bcs.w	80003e4 <__udivmoddi4+0x22c>
 8000210:	429a      	cmp	r2, r3
 8000212:	f240 80e7 	bls.w	80003e4 <__udivmoddi4+0x22c>
 8000216:	3902      	subs	r1, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a9a      	subs	r2, r3, r2
 800021c:	b2a3      	uxth	r3, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800022a:	fb00 fc0c 	mul.w	ip, r0, ip
 800022e:	459c      	cmp	ip, r3
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	18fb      	adds	r3, r7, r3
 8000234:	f100 32ff 	add.w	r2, r0, #4294967295
 8000238:	f080 80d6 	bcs.w	80003e8 <__udivmoddi4+0x230>
 800023c:	459c      	cmp	ip, r3
 800023e:	f240 80d3 	bls.w	80003e8 <__udivmoddi4+0x230>
 8000242:	443b      	add	r3, r7
 8000244:	3802      	subs	r0, #2
 8000246:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024a:	eba3 030c 	sub.w	r3, r3, ip
 800024e:	2100      	movs	r1, #0
 8000250:	b11d      	cbz	r5, 800025a <__udivmoddi4+0xa2>
 8000252:	40f3      	lsrs	r3, r6
 8000254:	2200      	movs	r2, #0
 8000256:	e9c5 3200 	strd	r3, r2, [r5]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d905      	bls.n	800026e <__udivmoddi4+0xb6>
 8000262:	b10d      	cbz	r5, 8000268 <__udivmoddi4+0xb0>
 8000264:	e9c5 0100 	strd	r0, r1, [r5]
 8000268:	2100      	movs	r1, #0
 800026a:	4608      	mov	r0, r1
 800026c:	e7f5      	b.n	800025a <__udivmoddi4+0xa2>
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d146      	bne.n	8000304 <__udivmoddi4+0x14c>
 8000276:	4573      	cmp	r3, lr
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xc8>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 8105 	bhi.w	800048a <__udivmoddi4+0x2d2>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb6e 0203 	sbc.w	r2, lr, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4690      	mov	r8, r2
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e5      	beq.n	800025a <__udivmoddi4+0xa2>
 800028e:	e9c5 4800 	strd	r4, r8, [r5]
 8000292:	e7e2      	b.n	800025a <__udivmoddi4+0xa2>
 8000294:	2a00      	cmp	r2, #0
 8000296:	f000 8090 	beq.w	80003ba <__udivmoddi4+0x202>
 800029a:	fab2 f682 	clz	r6, r2
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f040 80a4 	bne.w	80003ec <__udivmoddi4+0x234>
 80002a4:	1a8a      	subs	r2, r1, r2
 80002a6:	0c03      	lsrs	r3, r0, #16
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	b280      	uxth	r0, r0
 80002ae:	b2bc      	uxth	r4, r7
 80002b0:	2101      	movs	r1, #1
 80002b2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002b6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002be:	fb04 f20c 	mul.w	r2, r4, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d907      	bls.n	80002d6 <__udivmoddi4+0x11e>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x11c>
 80002ce:	429a      	cmp	r2, r3
 80002d0:	f200 80e0 	bhi.w	8000494 <__udivmoddi4+0x2dc>
 80002d4:	46c4      	mov	ip, r8
 80002d6:	1a9b      	subs	r3, r3, r2
 80002d8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002dc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002e4:	fb02 f404 	mul.w	r4, r2, r4
 80002e8:	429c      	cmp	r4, r3
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x144>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f102 30ff 	add.w	r0, r2, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x142>
 80002f4:	429c      	cmp	r4, r3
 80002f6:	f200 80ca 	bhi.w	800048e <__udivmoddi4+0x2d6>
 80002fa:	4602      	mov	r2, r0
 80002fc:	1b1b      	subs	r3, r3, r4
 80002fe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000302:	e7a5      	b.n	8000250 <__udivmoddi4+0x98>
 8000304:	f1c1 0620 	rsb	r6, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 f706 	lsr.w	r7, r2, r6
 800030e:	431f      	orrs	r7, r3
 8000310:	fa0e f401 	lsl.w	r4, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fa2e fe06 	lsr.w	lr, lr, r6
 800031c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	fa1f fc87 	uxth.w	ip, r7
 800032a:	fbbe f0f9 	udiv	r0, lr, r9
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	fb09 ee10 	mls	lr, r9, r0, lr
 8000334:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000338:	fb00 fe0c 	mul.w	lr, r0, ip
 800033c:	45a6      	cmp	lr, r4
 800033e:	fa02 f201 	lsl.w	r2, r2, r1
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x1a0>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 3aff 	add.w	sl, r0, #4294967295
 800034a:	f080 809c 	bcs.w	8000486 <__udivmoddi4+0x2ce>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f240 8099 	bls.w	8000486 <__udivmoddi4+0x2ce>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	fa1f fe83 	uxth.w	lr, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800036c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000370:	45a4      	cmp	ip, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1ce>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f103 3eff 	add.w	lr, r3, #4294967295
 800037a:	f080 8082 	bcs.w	8000482 <__udivmoddi4+0x2ca>
 800037e:	45a4      	cmp	ip, r4
 8000380:	d97f      	bls.n	8000482 <__udivmoddi4+0x2ca>
 8000382:	3b02      	subs	r3, #2
 8000384:	443c      	add	r4, r7
 8000386:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800038a:	eba4 040c 	sub.w	r4, r4, ip
 800038e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000392:	4564      	cmp	r4, ip
 8000394:	4673      	mov	r3, lr
 8000396:	46e1      	mov	r9, ip
 8000398:	d362      	bcc.n	8000460 <__udivmoddi4+0x2a8>
 800039a:	d05f      	beq.n	800045c <__udivmoddi4+0x2a4>
 800039c:	b15d      	cbz	r5, 80003b6 <__udivmoddi4+0x1fe>
 800039e:	ebb8 0203 	subs.w	r2, r8, r3
 80003a2:	eb64 0409 	sbc.w	r4, r4, r9
 80003a6:	fa04 f606 	lsl.w	r6, r4, r6
 80003aa:	fa22 f301 	lsr.w	r3, r2, r1
 80003ae:	431e      	orrs	r6, r3
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	e9c5 6400 	strd	r6, r4, [r5]
 80003b6:	2100      	movs	r1, #0
 80003b8:	e74f      	b.n	800025a <__udivmoddi4+0xa2>
 80003ba:	fbb1 fcf2 	udiv	ip, r1, r2
 80003be:	0c01      	lsrs	r1, r0, #16
 80003c0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ca:	463b      	mov	r3, r7
 80003cc:	4638      	mov	r0, r7
 80003ce:	463c      	mov	r4, r7
 80003d0:	46b8      	mov	r8, r7
 80003d2:	46be      	mov	lr, r7
 80003d4:	2620      	movs	r6, #32
 80003d6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003da:	eba2 0208 	sub.w	r2, r2, r8
 80003de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003e2:	e766      	b.n	80002b2 <__udivmoddi4+0xfa>
 80003e4:	4601      	mov	r1, r0
 80003e6:	e718      	b.n	800021a <__udivmoddi4+0x62>
 80003e8:	4610      	mov	r0, r2
 80003ea:	e72c      	b.n	8000246 <__udivmoddi4+0x8e>
 80003ec:	f1c6 0220 	rsb	r2, r6, #32
 80003f0:	fa2e f302 	lsr.w	r3, lr, r2
 80003f4:	40b7      	lsls	r7, r6
 80003f6:	40b1      	lsls	r1, r6
 80003f8:	fa20 f202 	lsr.w	r2, r0, r2
 80003fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000400:	430a      	orrs	r2, r1
 8000402:	fbb3 f8fe 	udiv	r8, r3, lr
 8000406:	b2bc      	uxth	r4, r7
 8000408:	fb0e 3318 	mls	r3, lr, r8, r3
 800040c:	0c11      	lsrs	r1, r2, #16
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb08 f904 	mul.w	r9, r8, r4
 8000416:	40b0      	lsls	r0, r6
 8000418:	4589      	cmp	r9, r1
 800041a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800041e:	b280      	uxth	r0, r0
 8000420:	d93e      	bls.n	80004a0 <__udivmoddi4+0x2e8>
 8000422:	1879      	adds	r1, r7, r1
 8000424:	f108 3cff 	add.w	ip, r8, #4294967295
 8000428:	d201      	bcs.n	800042e <__udivmoddi4+0x276>
 800042a:	4589      	cmp	r9, r1
 800042c:	d81f      	bhi.n	800046e <__udivmoddi4+0x2b6>
 800042e:	eba1 0109 	sub.w	r1, r1, r9
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fb09 f804 	mul.w	r8, r9, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	b292      	uxth	r2, r2
 8000440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000444:	4542      	cmp	r2, r8
 8000446:	d229      	bcs.n	800049c <__udivmoddi4+0x2e4>
 8000448:	18ba      	adds	r2, r7, r2
 800044a:	f109 31ff 	add.w	r1, r9, #4294967295
 800044e:	d2c4      	bcs.n	80003da <__udivmoddi4+0x222>
 8000450:	4542      	cmp	r2, r8
 8000452:	d2c2      	bcs.n	80003da <__udivmoddi4+0x222>
 8000454:	f1a9 0102 	sub.w	r1, r9, #2
 8000458:	443a      	add	r2, r7
 800045a:	e7be      	b.n	80003da <__udivmoddi4+0x222>
 800045c:	45f0      	cmp	r8, lr
 800045e:	d29d      	bcs.n	800039c <__udivmoddi4+0x1e4>
 8000460:	ebbe 0302 	subs.w	r3, lr, r2
 8000464:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000468:	3801      	subs	r0, #1
 800046a:	46e1      	mov	r9, ip
 800046c:	e796      	b.n	800039c <__udivmoddi4+0x1e4>
 800046e:	eba7 0909 	sub.w	r9, r7, r9
 8000472:	4449      	add	r1, r9
 8000474:	f1a8 0c02 	sub.w	ip, r8, #2
 8000478:	fbb1 f9fe 	udiv	r9, r1, lr
 800047c:	fb09 f804 	mul.w	r8, r9, r4
 8000480:	e7db      	b.n	800043a <__udivmoddi4+0x282>
 8000482:	4673      	mov	r3, lr
 8000484:	e77f      	b.n	8000386 <__udivmoddi4+0x1ce>
 8000486:	4650      	mov	r0, sl
 8000488:	e766      	b.n	8000358 <__udivmoddi4+0x1a0>
 800048a:	4608      	mov	r0, r1
 800048c:	e6fd      	b.n	800028a <__udivmoddi4+0xd2>
 800048e:	443b      	add	r3, r7
 8000490:	3a02      	subs	r2, #2
 8000492:	e733      	b.n	80002fc <__udivmoddi4+0x144>
 8000494:	f1ac 0c02 	sub.w	ip, ip, #2
 8000498:	443b      	add	r3, r7
 800049a:	e71c      	b.n	80002d6 <__udivmoddi4+0x11e>
 800049c:	4649      	mov	r1, r9
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x222>
 80004a0:	eba1 0109 	sub.w	r1, r1, r9
 80004a4:	46c4      	mov	ip, r8
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	e7c4      	b.n	800043a <__udivmoddi4+0x282>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d8:	68fb      	ldr	r3, [r7, #12]
}
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004e8:	2004      	movs	r0, #4
 80004ea:	f7ff ffe3 	bl	80004b4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	2001      	movs	r0, #1
 80004f0:	f7ff ffe0 	bl	80004b4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	200f      	movs	r0, #15
 80004fa:	f001 fa5c 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004fe:	200f      	movs	r0, #15
 8000500:	f001 fa73 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000524:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4013      	ands	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052c:	68fb      	ldr	r3, [r7, #12]
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	2002      	movs	r0, #2
 800054e:	f7ff ffdb 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2004      	movs	r0, #4
 8000554:	f7ff ffd8 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ffd5 	bl	8000508 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 8000564:	481d      	ldr	r0, [pc, #116]	@ (80005dc <MX_GPIO_Init+0xa4>)
 8000566:	f002 f8a3 	bl	80026b0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800056a:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 800056e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4619      	mov	r1, r3
 8000580:	4816      	ldr	r0, [pc, #88]	@ (80005dc <MX_GPIO_Init+0xa4>)
 8000582:	f001 fe67 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000586:	2303      	movs	r3, #3
 8000588:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800058e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000590:	2301      	movs	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f001 fe5a 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80005a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80005a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	@ (80005dc <MX_GPIO_Init+0xa4>)
 80005b8:	f001 fe4c 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80005bc:	2340      	movs	r3, #64	@ 0x40
 80005be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <MX_GPIO_Init+0xa8>)
 80005d0:	f001 fe40 	bl	8002254 <HAL_GPIO_Init>

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	48000400 	.word	0x48000400
 80005e0:	48000800 	.word	0x48000800

080005e4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005f4:	f023 0218 	bic.w	r2, r3, #24
 80005f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4313      	orrs	r3, r2
 8000600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f001 f8a9 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f807 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f7ff ff8d 	bl	8000538 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 800061e:	f00a f904 	bl	800a82a <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000622:	f00a f90a 	bl	800a83a <MX_SubGHz_Phy_Process>
 8000626:	e7fc      	b.n	8000622 <main+0x14>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09a      	sub	sp, #104	@ 0x68
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2248      	movs	r2, #72	@ 0x48
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00b fbac 	bl	800bd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
 800064a:	615a      	str	r2, [r3, #20]
 800064c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064e:	f002 f847 	bl	80026e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ffc6 	bl	80005e4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <SystemClock_Config+0xac>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000660:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <SystemClock_Config+0xac>)
 8000662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <SystemClock_Config+0xac>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000674:	2324      	movs	r3, #36	@ 0x24
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000678:	2381      	movs	r3, #129	@ 0x81
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000680:	2300      	movs	r3, #0
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000684:	23b0      	movs	r3, #176	@ 0xb0
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fb99 	bl	8002dc8 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800069c:	f000 f81c 	bl	80006d8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006a0:	234f      	movs	r3, #79	@ 0x4f
 80006a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 ff05 	bl	80034cc <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006c8:	f000 f806 	bl	80006d8 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3768      	adds	r7, #104	@ 0x68
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58000400 	.word	0x58000400

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800070c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000710:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000712:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800071c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000720:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000728:	68fb      	ldr	r3, [r7, #12]
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	@ 0x30
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	222c      	movs	r2, #44	@ 0x2c
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f00b fb27 	bl	800bd94 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000746:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000748:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <MX_RTC_Init+0xa0>)
 800074a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800074e:	221f      	movs	r2, #31
 8000750:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000778:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800077a:	4815      	ldr	r0, [pc, #84]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800077c:	f003 fb80 	bl	8003e80 <HAL_RTC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000786:	f7ff ffa7 	bl	80006d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800078a:	4811      	ldr	r0, [pc, #68]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800078c:	f003 fe76 	bl	800447c <HAL_RTCEx_SetSSRU_IT>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000796:	f7ff ff9f 	bl	80006d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80007a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007aa:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80007ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_RTC_Init+0x9c>)
 80007ba:	f003 fbe3 	bl	8003f84 <HAL_RTC_SetAlarm_IT>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80007c4:	f7ff ff88 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3730      	adds	r7, #48	@ 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000038 	.word	0x20000038
 80007d4:	40002800 	.word	0x40002800

080007d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	@ 0x40
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2238      	movs	r2, #56	@ 0x38
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00b fad3 	bl	800bd94 <memset>
  if(rtcHandle->Instance==RTC)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a16      	ldr	r2, [pc, #88]	@ (800084c <HAL_RTC_MspInit+0x74>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d125      	bne.n	8000844 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fa1f 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000814:	f7ff ff60 	bl	80006d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000818:	f7ff ff64 	bl	80006e4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800081c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000820:	f7ff ff70 	bl	8000704 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2002      	movs	r0, #2
 800082a:	f001 f8c4 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800082e:	2002      	movs	r0, #2
 8000830:	f001 f8db 	bl	80019ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	202a      	movs	r0, #42	@ 0x2a
 800083a:	f001 f8bc 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800083e:	202a      	movs	r0, #42	@ 0x2a
 8000840:	f001 f8d3 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000844:	bf00      	nop
 8000846:	3740      	adds	r7, #64	@ 0x40
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40002800 	.word	0x40002800

08000850 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000856:	2201      	movs	r2, #1
 8000858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	58000400 	.word	0x58000400

08000868 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000884:	f000 ff90 	bl	80017a8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000888:	f7ff ffe2 	bl	8000850 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800088c:	2001      	movs	r0, #1
 800088e:	f001 ffb9 	bl	8002804 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800089a:	f000 ff93 	bl	80017c4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800089e:	f000 fddf 	bl	8001460 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80008aa:	f000 ff7d 	bl	80017a8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008ae:	2101      	movs	r1, #1
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 ff23 	bl	80026fc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80008be:	f000 ff81 	bl	80017c4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d6:	bf00      	nop
 80008d8:	e7fd      	b.n	80008d6 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <HardFault_Handler+0x4>

080008e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e6:	bf00      	nop
 80008e8:	e7fd      	b.n	80008e6 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	bf00      	nop
 80008f0:	e7fd      	b.n	80008ee <BusFault_Handler+0x4>

080008f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f6:	bf00      	nop
 80008f8:	e7fd      	b.n	80008f6 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
	...

0800092c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000932:	f003 fddf 	bl	80044f4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000038 	.word	0x20000038

08000940 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <DMA1_Channel5_IRQHandler+0x10>)
 8000946:	f001 fae7 	bl	8001f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000118 	.word	0x20000118

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <USART2_IRQHandler+0x10>)
 800095a:	f004 fc25 	bl	80051a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000084 	.word	0x20000084

08000968 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <RTC_Alarm_IRQHandler+0x10>)
 800096e:	f003 fc71 	bl	8004254 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000038 	.word	0x20000038

0800097c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000982:	f004 f925 	bl	8004bd0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000070 	.word	0x20000070

08000990 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800099c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800099e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b4:	68fb      	ldr	r3, [r7, #12]
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_SUBGHZ_Init+0x20>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_SUBGHZ_Init+0x20>)
 80009cc:	f003 fe7e 	bl	80046cc <HAL_SUBGHZ_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80009d6:	f7ff fe7f 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000070 	.word	0x20000070

080009e4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff ffcf 	bl	8000990 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2032      	movs	r0, #50	@ 0x32
 80009f8:	f000 ffdd 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009fc:	2032      	movs	r0, #50	@ 0x32
 80009fe:	f000 fff4 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	608b      	str	r3, [r1, #8]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff ffe8 	bl	8000a0a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000a3a:	f00a fc87 	bl	800b34c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <SystemApp_Init+0x38>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a44:	f000 f8a2 	bl	8000b8c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a48:	f00a ff10 	bl	800b86c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <SystemApp_Init+0x3c>)
 8000a4e:	f00a ffa9 	bl	800b9a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a52:	2002      	movs	r0, #2
 8000a54:	f00a ffb4 	bl	800b9c0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a58:	f009 ff80 	bl	800a95c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f009 ffbc 	bl	800a9dc <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	08000a7d 	.word	0x08000a7d

08000a70 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a74:	f009 ffe2 	bl	800aa3c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00a f880 	bl	800ab90 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a96:	9200      	str	r2, [sp, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <TimestampNow+0x3c>)
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f81d 	bl	8000adc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fb68 	bl	8000178 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800be04 	.word	0x0800be04

08000abc <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f009 ff5a 	bl	800a97c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f009 ff52 	bl	800a97c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000adc:	b40c      	push	{r2, r3}
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f00a f997 	bl	800ae28 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b04:	b002      	add	sp, #8
 8000b06:	4770      	bx	lr

08000b08 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_GetTick+0x24>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000b2e:	f000 f92d 	bl	8000d8c <TIMER_IF_GetTimerValue>
 8000b32:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000007c 	.word	0x2000007c

08000b44 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f9a3 	bl	8000e9a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <LL_AHB2_GRP1_EnableClock>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b80:	68fb      	ldr	r3, [r7, #12]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000b92:	f000 fe25 	bl	80017e0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000b96:	f000 fe29 	bl	80017ec <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000b9a:	f000 fe2d 	bl	80017f8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f7ff ffcf 	bl	8000b5c <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff ffcc 	bl	8000b5c <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <DBG_Init+0x78>)
 8000bd0:	f001 fb40 	bl	8002254 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4809      	ldr	r0, [pc, #36]	@ (8000c04 <DBG_Init+0x78>)
 8000be0:	f001 fb38 	bl	8002254 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bea:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <DBG_Init+0x78>)
 8000bec:	f001 fd60 	bl	80026b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf6:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <DBG_Init+0x78>)
 8000bf8:	f001 fd5a 	bl	80026b0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	48000400 	.word	0x48000400

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <TIMER_IF_Init+0x5c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01b      	beq.n	8000c7c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <TIMER_IF_Init+0x60>)
 8000c46:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4a:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000c4c:	f7ff fd72 	bl	8000734 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000c50:	f000 f856 	bl	8000d00 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <TIMER_IF_Init+0x60>)
 8000c5a:	f003 fa9f 	bl	800419c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <TIMER_IF_Init+0x60>)
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000c66:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <TIMER_IF_Init+0x60>)
 8000c68:	f003 fbd6 	bl	8004418 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f9d3 	bl	8001018 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000c72:	f000 f85f 	bl	8000d34 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <TIMER_IF_Init+0x5c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000007d 	.word	0x2000007d
 8000c8c:	20000038 	.word	0x20000038

08000c90 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	222c      	movs	r2, #44	@ 0x2c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00b f874 	bl	800bd94 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000cac:	f000 f828 	bl	8000d00 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <TIMER_IF_StartTimer+0x68>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000cc8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ccc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <TIMER_IF_StartTimer+0x6c>)
 8000cde:	f003 f951 	bl	8003f84 <HAL_RTC_SetAlarm_IT>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000ce8:	f7ff fcf6 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000cec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3738      	adds	r7, #56	@ 0x38
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000080 	.word	0x20000080
 8000cfc:	20000038 	.word	0x20000038

08000d00 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <TIMER_IF_StopTimer+0x2c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000d10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d14:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <TIMER_IF_StopTimer+0x30>)
 8000d16:	f003 fa41 	bl	800419c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <TIMER_IF_StopTimer+0x30>)
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40002800 	.word	0x40002800
 8000d30:	20000038 	.word	0x20000038

08000d34 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000d38:	f000 f98e 	bl	8001058 <GetTimerTicks>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a03      	ldr	r2, [pc, #12]	@ (8000d4c <TIMER_IF_SetTimerContext+0x18>)
 8000d40:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d42:	4b02      	ldr	r3, [pc, #8]	@ (8000d4c <TIMER_IF_SetTimerContext+0x18>)
 8000d44:	681b      	ldr	r3, [r3, #0]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000080 	.word	0x20000080

08000d50 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d54:	4b02      	ldr	r3, [pc, #8]	@ (8000d60 <TIMER_IF_GetTimerContext+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000080 	.word	0x20000080

08000d64 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d6e:	f000 f973 	bl	8001058 <GetTimerTicks>
 8000d72:	4602      	mov	r2, r0
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000080 	.word	0x20000080

08000d8c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <TIMER_IF_GetTimerValue+0x24>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000d9e:	f000 f95b 	bl	8001058 <GetTimerTicks>
 8000da2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000007d 	.word	0x2000007d

08000db4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000dc2:	687b      	ldr	r3, [r7, #4]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000dce:	b5b0      	push	{r4, r5, r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2000      	movs	r0, #0
 8000dde:	460a      	mov	r2, r1
 8000de0:	4603      	mov	r3, r0
 8000de2:	0d95      	lsrs	r5, r2, #22
 8000de4:	0294      	lsls	r4, r2, #10
 8000de6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	4620      	mov	r0, r4
 8000df0:	4629      	mov	r1, r5
 8000df2:	f7ff f9c9 	bl	8000188 <__aeabi_uldivmod>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bdb0      	pop	{r4, r5, r7, pc}

08000e08 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000e08:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000e12:	2100      	movs	r1, #0
 8000e14:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	2000      	movs	r0, #0
 8000e1a:	460c      	mov	r4, r1
 8000e1c:	4605      	mov	r5, r0
 8000e1e:	4620      	mov	r0, r4
 8000e20:	4629      	mov	r1, r5
 8000e22:	f04f 0a00 	mov.w	sl, #0
 8000e26:	f04f 0b00 	mov.w	fp, #0
 8000e2a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000e2e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000e32:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000e36:	4650      	mov	r0, sl
 8000e38:	4659      	mov	r1, fp
 8000e3a:	1b02      	subs	r2, r0, r4
 8000e3c:	eb61 0305 	sbc.w	r3, r1, r5
 8000e40:	f04f 0000 	mov.w	r0, #0
 8000e44:	f04f 0100 	mov.w	r1, #0
 8000e48:	0099      	lsls	r1, r3, #2
 8000e4a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e4e:	0090      	lsls	r0, r2, #2
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	eb12 0804 	adds.w	r8, r2, r4
 8000e58:	eb43 0905 	adc.w	r9, r3, r5
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e70:	4690      	mov	r8, r2
 8000e72:	4699      	mov	r9, r3
 8000e74:	4640      	mov	r0, r8
 8000e76:	4649      	mov	r1, r9
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	0a82      	lsrs	r2, r0, #10
 8000e82:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000e86:	0a8b      	lsrs	r3, r1, #10
 8000e88:	4613      	mov	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e98:	4770      	bx	lr

08000e9a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff93 	bl	8000dce <TIMER_IF_Convert_ms2Tick>
 8000ea8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000eaa:	f000 f8d5 	bl	8001058 <GetTimerTicks>
 8000eae:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000eb0:	e000      	b.n	8000eb4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000eb2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000eb4:	f000 f8d0 	bl	8001058 <GetTimerTicks>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f6      	bhi.n	8000eb2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000ed6:	f00a fb87 	bl	800b5e8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000eea:	f000 f8a5 	bl	8001038 <TIMER_IF_BkUp_Read_MSBticks>
 8000eee:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f88f 	bl	8001018 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000f02:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000f10:	f000 f8a2 	bl	8001058 <GetTimerTicks>
 8000f14:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000f16:	f000 f88f 	bl	8001038 <TIMER_IF_BkUp_Read_MSBticks>
 8000f1a:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	60fa      	str	r2, [r7, #12]
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	000b      	movs	r3, r1
 8000f30:	2200      	movs	r2, #0
 8000f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f34:	2000      	movs	r0, #0
 8000f36:	460c      	mov	r4, r1
 8000f38:	4605      	mov	r5, r0
 8000f3a:	eb12 0804 	adds.w	r8, r2, r4
 8000f3e:	eb43 0905 	adc.w	r9, r3, r5
 8000f42:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	0a82      	lsrs	r2, r0, #10
 8000f54:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000f58:	0a8b      	lsrs	r3, r1, #10
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2200      	movs	r2, #0
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000f6c:	f04f 0b00 	mov.w	fp, #0
 8000f70:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff46 	bl	8000e08 <TIMER_IF_Convert_Tick2ms>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3730      	adds	r7, #48	@ 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f90 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000f9e:	f003 facd 	bl	800453c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000038 	.word	0x20000038

08000fb0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8000fbe:	f003 fabd 	bl	800453c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000038 	.word	0x20000038

08000fd0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8000fde:	f003 fac5 	bl	800456c <HAL_RTCEx_BKUPRead>
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000038 	.word	0x20000038

08000ff4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000ffe:	2101      	movs	r1, #1
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001002:	f003 fab3 	bl	800456c <HAL_RTCEx_BKUPRead>
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000038 	.word	0x20000038

08001018 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	2102      	movs	r1, #2
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001026:	f003 fa89 	bl	800453c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000038 	.word	0x20000038

08001038 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800103e:	2102      	movs	r1, #2
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001042:	f003 fa93 	bl	800456c <HAL_RTCEx_BKUPRead>
 8001046:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001048:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000038 	.word	0x20000038

08001058 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <GetTimerTicks+0x34>)
 8001060:	f7ff fdd8 	bl	8000c14 <LL_RTC_TIME_GetSubSecond>
 8001064:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001066:	e003      	b.n	8001070 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001068:	4808      	ldr	r0, [pc, #32]	@ (800108c <GetTimerTicks+0x34>)
 800106a:	f7ff fdd3 	bl	8000c14 <LL_RTC_TIME_GetSubSecond>
 800106e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001070:	4806      	ldr	r0, [pc, #24]	@ (800108c <GetTimerTicks+0x34>)
 8001072:	f7ff fdcf 	bl	8000c14 <LL_RTC_TIME_GetSubSecond>
 8001076:	4602      	mov	r2, r0
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4293      	cmp	r3, r2
 800107c:	d1f4      	bne.n	8001068 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40002800 	.word	0x40002800

08001090 <LL_AHB2_GRP1_EnableClock>:
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800109c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800109e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <LL_APB1_GRP1_EnableClock>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e4:	68fb      	ldr	r3, [r7, #12]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <LL_APB1_GRP1_DisableClock>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	43db      	mvns	r3, r3
 8001102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001106:	4013      	ands	r3, r2
 8001108:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <MX_USART2_UART_Init+0x94>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115c:	4811      	ldr	r0, [pc, #68]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 800115e:	f003 ff06 	bl	8004f6e <HAL_UART_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001168:	f7ff fab6 	bl	80006d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001170:	f006 f82f 	bl	80071d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800117a:	f7ff faad 	bl	80006d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	4808      	ldr	r0, [pc, #32]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001182:	f006 f864 	bl	800724e <HAL_UARTEx_SetRxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800118c:	f7ff faa4 	bl	80006d8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_USART2_UART_Init+0x90>)
 8001192:	f005 ffe3 	bl	800715c <HAL_UARTEx_EnableFifoMode>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800119c:	f7ff fa9c 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000084 	.word	0x20000084
 80011a8:	40004400 	.word	0x40004400

080011ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b096      	sub	sp, #88	@ 0x58
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2238      	movs	r2, #56	@ 0x38
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00a fde1 	bl	800bd94 <memset>
  if(uartHandle->Instance==USART2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a33      	ldr	r2, [pc, #204]	@ (80012a4 <HAL_UART_MspInit+0xf8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d15f      	bne.n	800129c <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011dc:	2302      	movs	r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80011e0:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <HAL_UART_MspInit+0xfc>)
 80011e2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fd2f 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f4:	f7ff fa70 	bl	80006d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80011fc:	f7ff ff60 	bl	80010c0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ff45 	bl	8001090 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001206:	230c      	movs	r3, #12
 8001208:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f001 f816 	bl	8002254 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001228:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_UART_MspInit+0x100>)
 800122a:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <HAL_UART_MspInit+0x104>)
 800122c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001230:	2214      	movs	r2, #20
 8001232:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001236:	2210      	movs	r2, #16
 8001238:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_UART_MspInit+0x100>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001242:	2280      	movs	r2, #128	@ 0x80
 8001244:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_UART_MspInit+0x100>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_UART_MspInit+0x100>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800125e:	4813      	ldr	r0, [pc, #76]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001260:	f000 fbe0 	bl	8001a24 <HAL_DMA_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800126a:	f7ff fa35 	bl	80006d8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800126e:	2110      	movs	r1, #16
 8001270:	480e      	ldr	r0, [pc, #56]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001272:	f000 ff17 	bl	80020a4 <HAL_DMA_ConfigChannelAttributes>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 800127c:	f7ff fa2c 	bl	80006d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001284:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_UART_MspInit+0x100>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2102      	movs	r1, #2
 8001290:	2025      	movs	r0, #37	@ 0x25
 8001292:	f000 fb90 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001296:	2025      	movs	r0, #37	@ 0x25
 8001298:	f000 fba7 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800129c:	bf00      	nop
 800129e:	3758      	adds	r7, #88	@ 0x58
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004400 	.word	0x40004400
 80012a8:	000c0004 	.word	0x000c0004
 80012ac:	20000118 	.word	0x20000118
 80012b0:	40020058 	.word	0x40020058

080012b4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <HAL_UART_MspDeInit+0x3c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d110      	bne.n	80012e8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80012c6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80012ca:	f7ff ff11 	bl	80010f0 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80012ce:	210c      	movs	r1, #12
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d4:	f001 f91e 	bl	8002514 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fc49 	bl	8001b74 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80012e2:	2025      	movs	r0, #37	@ 0x25
 80012e4:	f000 fb8f 	bl	8001a06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40004400 	.word	0x40004400

080012f4 <LL_APB1_GRP1_ForceReset>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001302:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <LL_APB1_GRP1_ReleaseReset>:
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	43db      	mvns	r3, r3
 8001328:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800132c:	4013      	ands	r3, r2
 800132e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <LL_EXTI_EnableIT_0_31+0x24>)
 8001346:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800134a:	4905      	ldr	r1, [pc, #20]	@ (8001360 <LL_EXTI_EnableIT_0_31+0x24>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	58000800 	.word	0x58000800

08001364 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <vcom_Init+0x28>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8001372:	f7ff f8b7 	bl	80004e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001376:	f7ff fecd 	bl	8001114 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800137a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800137e:	f7ff ffdd 	bl	800133c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8001382:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000017c 	.word	0x2000017c

08001390 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001394:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001398:	f7ff ffac 	bl	80012f4 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 800139c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80013a0:	f7ff ffb9 	bl	8001316 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <vcom_DeInit+0x28>)
 80013a6:	f7ff ff85 	bl	80012b4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 fb2b 	bl	8001a06 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80013b0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000084 	.word	0x20000084

080013bc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	461a      	mov	r2, r3
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <vcom_Trace_DMA+0x24>)
 80013d0:	f003 fe6a 	bl	80050a8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80013d4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000084 	.word	0x20000084

080013e4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80013ec:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <vcom_ReceiveInit+0x70>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80013f2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80013f6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001400:	4815      	ldr	r0, [pc, #84]	@ (8001458 <vcom_ReceiveInit+0x74>)
 8001402:	f005 fe1e 	bl	8007042 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001406:	bf00      	nop
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <vcom_ReceiveInit+0x74>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001416:	d0f7      	beq.n	8001408 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001418:	bf00      	nop
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <vcom_ReceiveInit+0x74>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001428:	d1f7      	bne.n	800141a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <vcom_ReceiveInit+0x74>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <vcom_ReceiveInit+0x74>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001438:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800143a:	4807      	ldr	r0, [pc, #28]	@ (8001458 <vcom_ReceiveInit+0x74>)
 800143c:	f005 fe5c 	bl	80070f8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001440:	2201      	movs	r2, #1
 8001442:	4906      	ldr	r1, [pc, #24]	@ (800145c <vcom_ReceiveInit+0x78>)
 8001444:	4804      	ldr	r0, [pc, #16]	@ (8001458 <vcom_ReceiveInit+0x74>)
 8001446:	f003 fde3 	bl	8005010 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800144a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000180 	.word	0x20000180
 8001458:	20000084 	.word	0x20000084
 800145c:	20000178 	.word	0x20000178

08001460 <vcom_Resume>:

void vcom_Resume(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001464:	4808      	ldr	r0, [pc, #32]	@ (8001488 <vcom_Resume+0x28>)
 8001466:	f003 fd82 	bl	8004f6e <HAL_UART_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <vcom_Resume+0x14>
  {
    Error_Handler();
 8001470:	f7ff f932 	bl	80006d8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <vcom_Resume+0x2c>)
 8001476:	f000 fad5 	bl	8001a24 <HAL_DMA_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <vcom_Resume+0x24>
  {
    Error_Handler();
 8001480:	f7ff f92a 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000084 	.word	0x20000084
 800148c:	20000118 	.word	0x20000118

08001490 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_UART_TxCpltCallback+0x24>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d103      	bne.n	80014aa <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_UART_TxCpltCallback+0x28>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2000      	movs	r0, #0
 80014a8:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004400 	.word	0x40004400
 80014b8:	2000017c 	.word	0x2000017c

080014bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <HAL_UART_RxCpltCallback+0x44>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d113      	bne.n	80014f6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_UART_RxCpltCallback+0x48>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <HAL_UART_RxCpltCallback+0x30>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_UART_RxCpltCallback+0x48>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	2101      	movs	r1, #1
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <HAL_UART_RxCpltCallback+0x4c>)
 80014ea:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	4906      	ldr	r1, [pc, #24]	@ (8001508 <HAL_UART_RxCpltCallback+0x4c>)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f003 fd8d 	bl	8005010 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40004400 	.word	0x40004400
 8001504:	20000180 	.word	0x20000180
 8001508:	20000178 	.word	0x20000178

0800150c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800150c:	480d      	ldr	r0, [pc, #52]	@ (8001544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001510:	f7ff fb7a 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <LoopForever+0x6>)
  ldr r1, =_edata
 8001516:	490d      	ldr	r1, [pc, #52]	@ (800154c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <LoopForever+0xe>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800152c:	4c0a      	ldr	r4, [pc, #40]	@ (8001558 <LoopForever+0x16>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800153a:	f00a fc33 	bl	800bda4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153e:	f7ff f866 	bl	800060e <main>

08001542 <LoopForever>:

LoopForever:
    b LoopForever
 8001542:	e7fe      	b.n	8001542 <LoopForever>
  ldr   r0, =_estack
 8001544:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001550:	0800c190 	.word	0x0800c190
  ldr r2, =_sbss
 8001554:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001558:	20000680 	.word	0x20000680

0800155c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>

0800155e <LL_AHB2_GRP1_EnableClock>:
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800156c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4313      	orrs	r3, r2
 8001574:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4013      	ands	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80015a4:	2004      	movs	r0, #4
 80015a6:	f7ff ffda 	bl	800155e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80015aa:	2310      	movs	r3, #16
 80015ac:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4812      	ldr	r0, [pc, #72]	@ (8001608 <BSP_RADIO_Init+0x78>)
 80015c0:	f000 fe48 	bl	8002254 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80015c4:	2320      	movs	r3, #32
 80015c6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	480e      	ldr	r0, [pc, #56]	@ (8001608 <BSP_RADIO_Init+0x78>)
 80015ce:	f000 fe41 	bl	8002254 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80015d2:	2308      	movs	r3, #8
 80015d4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	480b      	ldr	r0, [pc, #44]	@ (8001608 <BSP_RADIO_Init+0x78>)
 80015dc:	f000 fe3a 	bl	8002254 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80015e0:	2200      	movs	r2, #0
 80015e2:	2120      	movs	r1, #32
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <BSP_RADIO_Init+0x78>)
 80015e6:	f001 f863 	bl	80026b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80015ea:	2200      	movs	r2, #0
 80015ec:	2110      	movs	r1, #16
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <BSP_RADIO_Init+0x78>)
 80015f0:	f001 f85e 	bl	80026b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80015f4:	2200      	movs	r2, #0
 80015f6:	2108      	movs	r1, #8
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <BSP_RADIO_Init+0x78>)
 80015fa:	f001 f859 	bl	80026b0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	48000800 	.word	0x48000800

0800160c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d84b      	bhi.n	80016b4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 800161c:	a201      	add	r2, pc, #4	@ (adr r2, 8001624 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	08001635 	.word	0x08001635
 8001628:	08001655 	.word	0x08001655
 800162c:	08001675 	.word	0x08001675
 8001630:	08001695 	.word	0x08001695
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2108      	movs	r1, #8
 8001638:	4821      	ldr	r0, [pc, #132]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800163a:	f001 f839 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2110      	movs	r1, #16
 8001642:	481f      	ldr	r0, [pc, #124]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001644:	f001 f834 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2120      	movs	r1, #32
 800164c:	481c      	ldr	r0, [pc, #112]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800164e:	f001 f82f 	bl	80026b0 <HAL_GPIO_WritePin>
      break;      
 8001652:	e030      	b.n	80016b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2108      	movs	r1, #8
 8001658:	4819      	ldr	r0, [pc, #100]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800165a:	f001 f829 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800165e:	2201      	movs	r2, #1
 8001660:	2110      	movs	r1, #16
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001664:	f001 f824 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001668:	2200      	movs	r2, #0
 800166a:	2120      	movs	r1, #32
 800166c:	4814      	ldr	r0, [pc, #80]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800166e:	f001 f81f 	bl	80026b0 <HAL_GPIO_WritePin>
      break;
 8001672:	e020      	b.n	80016b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2108      	movs	r1, #8
 8001678:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800167a:	f001 f819 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800167e:	2201      	movs	r2, #1
 8001680:	2110      	movs	r1, #16
 8001682:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001684:	f001 f814 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001688:	2201      	movs	r2, #1
 800168a:	2120      	movs	r1, #32
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800168e:	f001 f80f 	bl	80026b0 <HAL_GPIO_WritePin>
      break;
 8001692:	e010      	b.n	80016b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	2108      	movs	r1, #8
 8001698:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800169a:	f001 f809 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800169e:	2200      	movs	r2, #0
 80016a0:	2110      	movs	r1, #16
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016a4:	f001 f804 	bl	80026b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80016a8:	2201      	movs	r2, #1
 80016aa:	2120      	movs	r1, #32
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016ae:	f000 ffff 	bl	80026b0 <HAL_GPIO_WritePin>
      break;
 80016b2:	e000      	b.n	80016b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80016b4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	48000800 	.word	0x48000800

080016c4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80016e4:	2301      	movs	r3, #1
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80016fe:	230f      	movs	r3, #15
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e001      	b.n	8001708 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001704:	2316      	movs	r3, #22
 8001706:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a03      	ldr	r2, [pc, #12]	@ (800172c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6053      	str	r3, [r2, #4]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	e0042000 	.word	0xe0042000

08001730 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a03      	ldr	r2, [pc, #12]	@ (8001748 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	6053      	str	r3, [r2, #4]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e0042000 	.word	0xe0042000

0800174c <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a03      	ldr	r2, [pc, #12]	@ (8001764 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8001756:	f023 0304 	bic.w	r3, r3, #4
 800175a:	6053      	str	r3, [r2, #4]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	e0042000 	.word	0xe0042000

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001772:	2003      	movs	r0, #3
 8001774:	f000 f914 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001778:	f002 f88a 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 800177c:	4603      	mov	r3, r0
 800177e:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <HAL_Init+0x3c>)
 8001780:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001782:	200f      	movs	r0, #15
 8001784:	f7ff f9c0 	bl	8000b08 <HAL_InitTick>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	e001      	b.n	8001798 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001794:	f7ff f897 	bl	80008c6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001798:	79fb      	ldrb	r3, [r7, #7]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000000 	.word	0x20000000

080017a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <HAL_SuspendTick+0x18>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a03      	ldr	r2, [pc, #12]	@ (80017c0 <HAL_SuspendTick+0x18>)
 80017b2:	f023 0302 	bic.w	r3, r3, #2
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <HAL_ResumeTick+0x18>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a03      	ldr	r2, [pc, #12]	@ (80017dc <HAL_ResumeTick+0x18>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80017e4:	f7ff ff96 	bl	8001714 <LL_DBGMCU_DisableDBGSleepMode>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80017f0:	f7ff ff9e 	bl	8001730 <LL_DBGMCU_DisableDBGStopMode>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80017fc:	f7ff ffa6 	bl	800174c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4906      	ldr	r1, [pc, #24]	@ (800189c <__NVIC_EnableIRQ+0x34>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db12      	blt.n	80018d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <__NVIC_DisableIRQ+0x44>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	3320      	adds	r3, #32
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018cc:	f3bf 8f4f 	dsb	sy
}
 80018d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d2:	f3bf 8f6f 	isb	sy
}
 80018d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	@ (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	@ (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff2b 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff42 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ffb4 	bl	800193c <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff83 	bl	80018e8 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff43 	bl	80018a0 <__NVIC_DisableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e08e      	b.n	8001b54 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_DMA_Init+0x138>)
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d80f      	bhi.n	8001a62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b45      	ldr	r3, [pc, #276]	@ (8001b60 <HAL_DMA_Init+0x13c>)
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a45      	ldr	r2, [pc, #276]	@ (8001b64 <HAL_DMA_Init+0x140>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	009a      	lsls	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a42      	ldr	r2, [pc, #264]	@ (8001b68 <HAL_DMA_Init+0x144>)
 8001a5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a60:	e00e      	b.n	8001a80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_DMA_Init+0x148>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b64 <HAL_DMA_Init+0x140>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	009a      	lsls	r2, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b70 <HAL_DMA_Init+0x14c>)
 8001a7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a9a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fb52 	bl	800217c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ae0:	d102      	bne.n	8001ae8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001af4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001afe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_DMA_Init+0x106>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d80c      	bhi.n	8001b2a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fb7b 	bl	800220c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	e008      	b.n	8001b3c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020407 	.word	0x40020407
 8001b60:	bffdfff8 	.word	0xbffdfff8
 8001b64:	cccccccd 	.word	0xcccccccd
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	bffdfbf8 	.word	0xbffdfbf8
 8001b70:	40020400 	.word	0x40020400

08001b74 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e07b      	b.n	8001c7e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c88 <HAL_DMA_DeInit+0x114>)
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d80f      	bhi.n	8001bc2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <HAL_DMA_DeInit+0x118>)
 8001baa:	4413      	add	r3, r2
 8001bac:	4a38      	ldr	r2, [pc, #224]	@ (8001c90 <HAL_DMA_DeInit+0x11c>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a35      	ldr	r2, [pc, #212]	@ (8001c94 <HAL_DMA_DeInit+0x120>)
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bc0:	e00e      	b.n	8001be0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <HAL_DMA_DeInit+0x124>)
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a30      	ldr	r2, [pc, #192]	@ (8001c90 <HAL_DMA_DeInit+0x11c>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	009a      	lsls	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8001c9c <HAL_DMA_DeInit+0x128>)
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f003 021c 	and.w	r2, r3, #28
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fabd 	bl	800217c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c12:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00f      	beq.n	8001c3c <HAL_DMA_DeInit+0xc8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d80b      	bhi.n	8001c3c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 faf1 	bl	800220c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c3a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40020407 	.word	0x40020407
 8001c8c:	bffdfff8 	.word	0xbffdfff8
 8001c90:	cccccccd 	.word	0xcccccccd
 8001c94:	40020000 	.word	0x40020000
 8001c98:	bffdfbf8 	.word	0xbffdfbf8
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_DMA_Start_IT+0x20>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e069      	b.n	8001d94 <HAL_DMA_Start_IT+0xf4>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d155      	bne.n	8001d80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fa02 	bl	8002102 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 020e 	orr.w	r2, r2, #14
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e00f      	b.n	8001d38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 020a 	orr.w	r2, r2, #10
 8001d36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e008      	b.n	8001d92 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2280      	movs	r2, #128	@ 0x80
 8001d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e04f      	b.n	8001e4e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d008      	beq.n	8001dcc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e040      	b.n	8001e4e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020e 	bic.w	r2, r2, #14
 8001dda:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e00:	f003 021c 	and.w	r2, r3, #28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d005      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2204      	movs	r2, #4
 8001e74:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e047      	b.n	8001f0c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 020e 	bic.w	r2, r2, #14
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb0:	f003 021c 	and.w	r2, r3, #28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ec8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001eea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
    }
  }
  return status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	f003 031c 	and.w	r3, r3, #28
 8001f38:	2204      	movs	r2, #4
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d027      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x7c>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d022      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	f003 021c 	and.w	r2, r3, #28
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2104      	movs	r1, #4
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8081 	beq.w	800208c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f92:	e07b      	b.n	800208c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f98:	f003 031c 	and.w	r3, r3, #28
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03d      	beq.n	8002024 <HAL_DMA_IRQHandler+0x10c>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d038      	beq.n	8002024 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 020a 	bic.w	r2, r2, #10
 8001fce:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <HAL_DMA_IRQHandler+0x180>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d909      	bls.n	8001ff8 <HAL_DMA_IRQHandler+0xe0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	f003 031c 	and.w	r3, r3, #28
 8001fec:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <HAL_DMA_IRQHandler+0x184>)
 8001fee:	2102      	movs	r1, #2
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	6053      	str	r3, [r2, #4]
 8001ff6:	e008      	b.n	800200a <HAL_DMA_IRQHandler+0xf2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	f003 031c 	and.w	r3, r3, #28
 8002000:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <HAL_DMA_IRQHandler+0x188>)
 8002002:	2102      	movs	r1, #2
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d038      	beq.n	800208c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002022:	e033      	b.n	800208c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002028:	f003 031c 	and.w	r3, r3, #28
 800202c:	2208      	movs	r2, #8
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d02a      	beq.n	800208e <HAL_DMA_IRQHandler+0x176>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d025      	beq.n	800208e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020e 	bic.w	r2, r2, #14
 8002050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f003 021c 	and.w	r2, r3, #28
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800208c:	bf00      	nop
 800208e:	bf00      	nop
}
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40020080 	.word	0x40020080
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d103      	bne.n	80020c0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	72fb      	strb	r3, [r7, #11]
    return status;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	e01b      	b.n	80020f8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00d      	beq.n	80020ee <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e003      	b.n	80020ee <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020ec:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	601a      	str	r2, [r3, #0]

  return status;
 80020f6:	7afb      	ldrb	r3, [r7, #11]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002118:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800212a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002130:	f003 021c 	and.w	r2, r3, #28
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b10      	cmp	r3, #16
 800214e:	d108      	bne.n	8002162 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002160:	e007      	b.n	8002172 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800218c:	429a      	cmp	r2, r3
 800218e:	d813      	bhi.n	80021b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800219c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3b08      	subs	r3, #8
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e011      	b.n	80021dc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80021c2:	4413      	add	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3b08      	subs	r3, #8
 80021d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	3307      	adds	r3, #7
 80021da:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80021e0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2201      	movs	r2, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40020407 	.word	0x40020407
 8002200:	cccccccd 	.word	0xcccccccd
 8002204:	4002081c 	.word	0x4002081c
 8002208:	40020880 	.word	0x40020880

0800220c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800221c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002230:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	1000823f 	.word	0x1000823f
 8002250:	40020940 	.word	0x40020940

08002254 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	e140      	b.n	80024e6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8132 	beq.w	80024e0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d005      	beq.n	8002294 <HAL_GPIO_Init+0x40>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d130      	bne.n	80022f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ca:	2201      	movs	r2, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f003 0201 	and.w	r2, r3, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d017      	beq.n	8002332 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d123      	bne.n	8002386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0203 	and.w	r2, r3, #3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 808c 	beq.w	80024e0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002504 <HAL_GPIO_Init+0x2b0>)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023f2:	d00d      	beq.n	8002410 <HAL_GPIO_Init+0x1bc>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a44      	ldr	r2, [pc, #272]	@ (8002508 <HAL_GPIO_Init+0x2b4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <HAL_GPIO_Init+0x1b8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a43      	ldr	r2, [pc, #268]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_GPIO_Init+0x1b4>
 8002404:	2302      	movs	r3, #2
 8002406:	e004      	b.n	8002412 <HAL_GPIO_Init+0x1be>
 8002408:	2307      	movs	r3, #7
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x1be>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_GPIO_Init+0x1be>
 8002410:	2300      	movs	r3, #0
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	f002 0203 	and.w	r2, r2, #3
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	4093      	lsls	r3, r2
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002422:	4938      	ldr	r1, [pc, #224]	@ (8002504 <HAL_GPIO_Init+0x2b0>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002430:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002454:	4a2e      	ldr	r2, [pc, #184]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800245a:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800247e:	4a24      	ldr	r2, [pc, #144]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002484:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 8002486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800248a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80024aa:	4a19      	ldr	r2, [pc, #100]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 80024b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024b8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f47f aeb7 	bne.w	8002264 <HAL_GPIO_Init+0x10>
  }
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	48000400 	.word	0x48000400
 800250c:	48000800 	.word	0x48000800
 8002510:	58000800 	.word	0x58000800

08002514 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002522:	e0af      	b.n	8002684 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002524:	2201      	movs	r2, #1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a2 	beq.w	800267e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800253a:	4a59      	ldr	r2, [pc, #356]	@ (80026a0 <HAL_GPIO_DeInit+0x18c>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	2207      	movs	r2, #7
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002562:	d00d      	beq.n	8002580 <HAL_GPIO_DeInit+0x6c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a4f      	ldr	r2, [pc, #316]	@ (80026a4 <HAL_GPIO_DeInit+0x190>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <HAL_GPIO_DeInit+0x68>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a4e      	ldr	r2, [pc, #312]	@ (80026a8 <HAL_GPIO_DeInit+0x194>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_GPIO_DeInit+0x64>
 8002574:	2302      	movs	r3, #2
 8002576:	e004      	b.n	8002582 <HAL_GPIO_DeInit+0x6e>
 8002578:	2307      	movs	r3, #7
 800257a:	e002      	b.n	8002582 <HAL_GPIO_DeInit+0x6e>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_GPIO_DeInit+0x6e>
 8002580:	2300      	movs	r3, #0
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	f002 0203 	and.w	r2, r2, #3
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	4093      	lsls	r3, r2
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	429a      	cmp	r2, r3
 8002590:	d136      	bne.n	8002600 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002592:	4b46      	ldr	r3, [pc, #280]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 8002594:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	4943      	ldr	r1, [pc, #268]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 800259e:	4013      	ands	r3, r2
 80025a0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80025a4:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 80025a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	493f      	ldr	r1, [pc, #252]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	493b      	ldr	r1, [pc, #236]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80025c4:	4b39      	ldr	r3, [pc, #228]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4937      	ldr	r1, [pc, #220]	@ (80026ac <HAL_GPIO_DeInit+0x198>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	2207      	movs	r2, #7
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80025e2:	4a2f      	ldr	r2, [pc, #188]	@ (80026a0 <HAL_GPIO_DeInit+0x18c>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43da      	mvns	r2, r3
 80025f2:	482b      	ldr	r0, [pc, #172]	@ (80026a0 <HAL_GPIO_DeInit+0x18c>)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	400a      	ands	r2, r1
 80025fa:	3302      	adds	r3, #2
 80025fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2103      	movs	r1, #3
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	08d2      	lsrs	r2, r2, #3
 8002634:	4019      	ands	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2103      	movs	r1, #3
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	2101      	movs	r1, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	401a      	ands	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2103      	movs	r1, #3
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	401a      	ands	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3301      	adds	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	f47f af49 	bne.w	8002524 <HAL_GPIO_DeInit+0x10>
  }
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40010000 	.word	0x40010000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000800 	.word	0x48000800
 80026ac:	58000800 	.word	0x58000800

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e4:	4b04      	ldr	r3, [pc, #16]	@ (80026f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a03      	ldr	r2, [pc, #12]	@ (80026f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	58000400 	.word	0x58000400

080026fc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_PWR_EnterSLEEPMode+0x60>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800271a:	d10d      	bne.n	8002738 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800271c:	f000 f83c 	bl	8002798 <HAL_PWREx_DisableLowPowerRunMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8002726:	e015      	b.n	8002754 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <HAL_PWR_EnterSLEEPMode+0x60>)
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002734:	f000 f822 	bl	800277c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <HAL_PWR_EnterSLEEPMode+0x64>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4a08      	ldr	r2, [pc, #32]	@ (8002760 <HAL_PWR_EnterSLEEPMode+0x64>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800274a:	bf30      	wfi
 800274c:	e002      	b.n	8002754 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800274e:	bf40      	sev
    __WFE();
 8002750:	bf20      	wfe
    __WFE();
 8002752:	bf20      	wfe
  }
}
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	58000400 	.word	0x58000400
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002768:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <HAL_PWREx_GetVoltageRange+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	58000400 	.word	0x58000400

0800277c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a03      	ldr	r2, [pc, #12]	@ (8002794 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	58000400 	.word	0x58000400

08002798 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a15      	ldr	r2, [pc, #84]	@ (80027f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027a8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80027aa:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2232      	movs	r2, #50	@ 0x32
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027be:	e002      	b.n	80027c6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027c6:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d2:	d102      	bne.n	80027da <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f2      	bne.n	80027c0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e6:	d101      	bne.n	80027ec <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e000      	b.n	80027ee <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	58000400 	.word	0x58000400
 80027fc:	20000000 	.word	0x20000000
 8002800:	431bde83 	.word	0x431bde83

08002804 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	4a0e      	ldr	r2, [pc, #56]	@ (8002850 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800281e:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	4a0c      	ldr	r2, [pc, #48]	@ (8002854 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002830:	bf30      	wfi
 8002832:	e002      	b.n	800283a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002834:	bf40      	sev
    __WFE();
 8002836:	bf20      	wfe
    __WFE();
 8002838:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	4a05      	ldr	r2, [pc, #20]	@ (8002854 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	6113      	str	r3, [r2, #16]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	58000400 	.word	0x58000400
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002868:	d101      	bne.n	800286e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	58000400 	.word	0x58000400

0800287c <LL_RCC_HSE_EnableTcxo>:
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800288a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <LL_RCC_HSE_DisableTcxo>:
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028c6:	d101      	bne.n	80028cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <LL_RCC_HSE_Enable>:
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_HSE_Disable>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <LL_RCC_HSE_IsReady>:
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002920:	d101      	bne.n	8002926 <LL_RCC_HSE_IsReady+0x18>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <LL_RCC_HSE_IsReady+0x1a>
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <LL_RCC_HSI_Enable>:
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800293e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <LL_RCC_HSI_Disable>:
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800295a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_RCC_HSI_IsReady>:
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800296c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297a:	d101      	bne.n	8002980 <LL_RCC_HSI_IsReady+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_RCC_HSI_IsReady+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <LL_RCC_HSI_SetCalibTrimming>:
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	061b      	lsls	r3, r3, #24
 80029a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_LSE_IsReady>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d101      	bne.n	80029ca <LL_RCC_LSE_IsReady+0x18>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_RCC_LSE_IsReady+0x1a>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_LSI_Enable>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_LSI_Disable>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_RCC_LSI_IsReady>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d101      	bne.n	8002a2c <LL_RCC_LSI_IsReady+0x18>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <LL_RCC_LSI_IsReady+0x1a>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_MSI_Enable>:
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_MSI_Disable>:
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_MSI_IsReady>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d101      	bne.n	8002a84 <LL_RCC_MSI_IsReady+0x16>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_RCC_MSI_IsReady+0x18>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d101      	bne.n	8002aa4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <LL_RCC_MSI_GetRange>:
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_MSI_SetCalibTrimming>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_SetSysClkSource>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_GetSysClkSource>:
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_SetAHBPrescaler>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_SetAHB3Prescaler>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ba0:	f023 020f 	bic.w	r2, r3, #15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <LL_RCC_SetAPB1Prescaler>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_SetAPB2Prescaler>:
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_GetAHBPrescaler>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <LL_RCC_GetAHB3Prescaler>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c26:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_GetAPB1Prescaler>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_GetAPB2Prescaler>:
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cae:	d101      	bne.n	8002cb4 <LL_RCC_PLL_IsReady+0x18>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_RCC_PLL_IsReady+0x1a>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2a:	d101      	bne.n	8002d30 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d4e:	d101      	bne.n	8002d54 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d72:	d101      	bne.n	8002d78 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d94:	d101      	bne.n	8002d9a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002db6:	d101      	bne.n	8002dbc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e36f      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dda:	f7ff fea6 	bl	8002b2a <LL_RCC_GetSysClkSource>
 8002dde:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	f7ff ff8f 	bl	8002d02 <LL_RCC_PLL_GetMainSource>
 8002de4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80c4 	beq.w	8002f7c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x3e>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d176      	bne.n	8002eee <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d173      	bne.n	8002eee <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e353      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_OscConfig+0x68>
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e2e:	e006      	b.n	8002e3e <HAL_RCC_OscConfig+0x76>
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d222      	bcs.n	8002e88 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fd5a 	bl	8003900 <RCC_SetFlashLatencyFromMSIRange>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e331      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e60:	f043 0308 	orr.w	r3, r3, #8
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fe2b 	bl	8002adc <LL_RCC_MSI_SetCalibTrimming>
 8002e86:	e021      	b.n	8002ecc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e92:	f043 0308 	orr.w	r3, r3, #8
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fe12 	bl	8002adc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fd1f 	bl	8003900 <RCC_SetFlashLatencyFromMSIRange>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e2f6      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ecc:	f000 fce0 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4aa7      	ldr	r2, [pc, #668]	@ (8003170 <HAL_RCC_OscConfig+0x3a8>)
 8002ed4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002ed6:	4ba7      	ldr	r3, [pc, #668]	@ (8003174 <HAL_RCC_OscConfig+0x3ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fe14 	bl	8000b08 <HAL_InitTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d047      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	e2e5      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d02c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef6:	f7ff fd9e 	bl	8002a36 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efa:	f7fd fe0f 	bl	8000b1c <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f02:	f7fd fe0b 	bl	8000b1c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e2d2      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f14:	f7ff fdab 	bl	8002a6e <LL_RCC_MSI_IsReady>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f1      	beq.n	8002f02 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fdc7 	bl	8002adc <LL_RCC_MSI_SetCalibTrimming>
 8002f4e:	e015      	b.n	8002f7c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f50:	f7ff fd7f 	bl	8002a52 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f54:	f7fd fde2 	bl	8000b1c <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f5c:	f7fd fdde 	bl	8000b1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e2a5      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f6e:	f7ff fd7e 	bl	8002a6e <LL_RCC_MSI_IsReady>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f1      	bne.n	8002f5c <HAL_RCC_OscConfig+0x194>
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f7a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d058      	beq.n	800303a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1d2>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	d108      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d14b      	bne.n	800303a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e289      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_OscConfig+0x204>
 8002fc6:	f7ff fc86 	bl	80028d6 <LL_RCC_HSE_Enable>
 8002fca:	e00d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x220>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002fd4:	d104      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x218>
 8002fd6:	f7ff fc51 	bl	800287c <LL_RCC_HSE_EnableTcxo>
 8002fda:	f7ff fc7c 	bl	80028d6 <LL_RCC_HSE_Enable>
 8002fde:	e003      	b.n	8002fe8 <HAL_RCC_OscConfig+0x220>
 8002fe0:	f7ff fc87 	bl	80028f2 <LL_RCC_HSE_Disable>
 8002fe4:	f7ff fc58 	bl	8002898 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fd94 	bl	8000b1c <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fd fd90 	bl	8000b1c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	@ 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e257      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800300a:	f7ff fc80 	bl	800290e <LL_RCC_HSE_IsReady>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f1      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x230>
 8003014:	e011      	b.n	800303a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fd fd81 	bl	8000b1c <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301e:	f7fd fd7d 	bl	8000b1c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	@ 0x64
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e244      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003030:	f7ff fc6d 	bl	800290e <LL_RCC_HSE_IsReady>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f1      	bne.n	800301e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d046      	beq.n	80030d4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d005      	beq.n	8003058 <HAL_RCC_OscConfig+0x290>
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d10e      	bne.n	8003070 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d10b      	bne.n	8003070 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e22a      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fc8e 	bl	800298a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800306e:	e031      	b.n	80030d4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d019      	beq.n	80030ac <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003078:	f7ff fc5a 	bl	8002930 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fd fd4e 	bl	8000b1c <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003084:	f7fd fd4a 	bl	8000b1c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e211      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003096:	f7ff fc67 	bl	8002968 <LL_RCC_HSI_IsReady>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f1      	beq.n	8003084 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fc70 	bl	800298a <LL_RCC_HSI_SetCalibTrimming>
 80030aa:	e013      	b.n	80030d4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ac:	f7ff fc4e 	bl	800294c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd fd34 	bl	8000b1c <HAL_GetTick>
 80030b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fd fd30 	bl	8000b1c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1f7      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80030ca:	f7ff fc4d 	bl	8002968 <LL_RCC_HSI_IsReady>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f1      	bne.n	80030b8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d06e      	beq.n	80031be <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d056      	beq.n	8003196 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030f0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d031      	beq.n	8003164 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e1d0      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d013      	beq.n	800314a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003122:	f7ff fc67 	bl	80029f4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003126:	f7fd fcf9 	bl	8000b1c <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312e:	f7fd fcf5 	bl	8000b1c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b11      	cmp	r3, #17
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1bc      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003140:	f7ff fc68 	bl	8002a14 <LL_RCC_LSI_IsReady>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f1      	bne.n	800312e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003152:	f023 0210 	bic.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003164:	f7ff fc36 	bl	80029d4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003168:	f7fd fcd8 	bl	8000b1c <HAL_GetTick>
 800316c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800316e:	e00c      	b.n	800318a <HAL_RCC_OscConfig+0x3c2>
 8003170:	20000000 	.word	0x20000000
 8003174:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7fd fcd0 	bl	8000b1c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b11      	cmp	r3, #17
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e197      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800318a:	f7ff fc43 	bl	8002a14 <LL_RCC_LSI_IsReady>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f1      	beq.n	8003178 <HAL_RCC_OscConfig+0x3b0>
 8003194:	e013      	b.n	80031be <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003196:	f7ff fc2d 	bl	80029f4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fcbf 	bl	8000b1c <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fd fcbb 	bl	8000b1c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b11      	cmp	r3, #17
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e182      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80031b4:	f7ff fc2e 	bl	8002a14 <LL_RCC_LSI_IsReady>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f1      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80d8 	beq.w	800337c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80031cc:	f7ff fb44 	bl	8002858 <LL_PWR_IsEnabledBkUpAccess>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d113      	bne.n	80031fe <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031d6:	f7ff fa83 	bl	80026e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fd fc9f 	bl	8000b1c <HAL_GetTick>
 80031de:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fd fc9b 	bl	8000b1c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e162      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80031f4:	f7ff fb30 	bl	8002858 <LL_PWR_IsEnabledBkUpAccess>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f1      	beq.n	80031e2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d07b      	beq.n	80032fe <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b85      	cmp	r3, #133	@ 0x85
 800320c:	d003      	beq.n	8003216 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d109      	bne.n	800322a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fd fc77 	bl	8000b1c <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fd fc69 	bl	8000b1c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e12e      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800325c:	f7ff fba9 	bl	80029b2 <LL_RCC_LSE_IsReady>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ef      	beq.n	8003246 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b81      	cmp	r3, #129	@ 0x81
 800326c:	d003      	beq.n	8003276 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b85      	cmp	r3, #133	@ 0x85
 8003274:	d121      	bne.n	80032ba <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fd fc51 	bl	8000b1c <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800327c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd fc43 	bl	8000b1c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e108      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ec      	beq.n	8003292 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032b8:	e060      	b.n	800337c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fd fc2f 	bl	8000b1c <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd fc21 	bl	8000b1c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0e6      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ec      	bne.n	80032d6 <HAL_RCC_OscConfig+0x50e>
 80032fc:	e03e      	b.n	800337c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fd fc0d 	bl	8000b1c <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fd fbff 	bl	8000b1c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0c4      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ec      	bne.n	800331a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7fd fbec 	bl	8000b1c <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fd fbde 	bl	8000b1c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0a3      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003372:	f7ff fb1e 	bl	80029b2 <LL_RCC_LSE_IsReady>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ef      	bne.n	800335c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8099 	beq.w	80034b8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d06c      	beq.n	8003466 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	2b02      	cmp	r3, #2
 8003392:	d14b      	bne.n	800342c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	f7ff fc74 	bl	8002c80 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fd fbc0 	bl	8000b1c <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd fbbc 	bl	8000b1c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b0a      	cmp	r3, #10
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e083      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033b2:	f7ff fc73 	bl	8002c9c <LL_RCC_PLL_IsReady>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f1      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	4b40      	ldr	r3, [pc, #256]	@ (80034c4 <HAL_RCC_OscConfig+0x6fc>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033ce:	4311      	orrs	r1, r2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033d4:	0212      	lsls	r2, r2, #8
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80033e8:	430a      	orrs	r2, r1
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f2:	f7ff fc37 	bl	8002c64 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003404:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fd fb89 	bl	8000b1c <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fd fb85 	bl	8000b1c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b0a      	cmp	r3, #10
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e04c      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003420:	f7ff fc3c 	bl	8002c9c <LL_RCC_PLL_IsReady>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f1      	beq.n	800340e <HAL_RCC_OscConfig+0x646>
 800342a:	e045      	b.n	80034b8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342c:	f7ff fc28 	bl	8002c80 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd fb74 	bl	8000b1c <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fd fb70 	bl	8000b1c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b0a      	cmp	r3, #10
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e037      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800344a:	f7ff fc27 	bl	8002c9c <LL_RCC_PLL_IsReady>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f1      	bne.n	8003438 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800345e:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <HAL_RCC_OscConfig+0x700>)
 8003460:	4013      	ands	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
 8003464:	e028      	b.n	80034b8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e023      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0203 	and.w	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	429a      	cmp	r2, r3
 8003486:	d115      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003492:	429a      	cmp	r2, r3
 8003494:	d10e      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	11c1808c 	.word	0x11c1808c
 80034c8:	eefefffc 	.word	0xeefefffc

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e12c      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b98      	ldr	r3, [pc, #608]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d91b      	bls.n	8003526 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b95      	ldr	r3, [pc, #596]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	4993      	ldr	r1, [pc, #588]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034fe:	f7fd fb0d 	bl	8000b1c <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003504:	e008      	b.n	8003518 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003506:	f7fd fb09 	bl	8000b1c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e110      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003518:	4b8a      	ldr	r3, [pc, #552]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d1ef      	bne.n	8003506 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fb02 	bl	8002b40 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800353c:	f7fd faee 	bl	8000b1c <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003544:	f7fd faea 	bl	8000b1c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0f1      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003556:	f7ff fbdf 	bl	8002d18 <LL_RCC_IsActiveFlag_HPRE>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f1      	beq.n	8003544 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d016      	beq.n	800359a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff faf8 	bl	8002b66 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003576:	f7fd fad1 	bl	8000b1c <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800357e:	f7fd facd 	bl	8000b1c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0d4      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003590:	f7ff fbd3 	bl	8002d3a <LL_RCC_IsActiveFlag_C2HPRE>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f1      	beq.n	800357e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff faf0 	bl	8002b90 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035b0:	f7fd fab4 	bl	8000b1c <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035b8:	f7fd fab0 	bl	8000b1c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0b7      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035ca:	f7ff fbc8 	bl	8002d5e <LL_RCC_IsActiveFlag_SHDHPRE>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f1      	beq.n	80035b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d016      	beq.n	800360e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fae9 	bl	8002bbc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035ea:	f7fd fa97 	bl	8000b1c <HAL_GetTick>
 80035ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035f2:	f7fd fa93 	bl	8000b1c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e09a      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003604:	f7ff fbbd 	bl	8002d82 <LL_RCC_IsActiveFlag_PPRE1>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f1      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fade 	bl	8002be2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003626:	f7fd fa79 	bl	8000b1c <HAL_GetTick>
 800362a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800362e:	f7fd fa75 	bl	8000b1c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e07c      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003640:	f7ff fbb0 	bl	8002da4 <LL_RCC_IsActiveFlag_PPRE2>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f1      	beq.n	800362e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d043      	beq.n	80036de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d106      	bne.n	800366c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800365e:	f7ff f956 	bl	800290e <LL_RCC_HSE_IsReady>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11e      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e066      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d106      	bne.n	8003682 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003674:	f7ff fb12 	bl	8002c9c <LL_RCC_PLL_IsReady>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d113      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e05b      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800368a:	f7ff f9f0 	bl	8002a6e <LL_RCC_MSI_IsReady>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e050      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003698:	f7ff f966 	bl	8002968 <LL_RCC_HSI_IsReady>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e049      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fa2a 	bl	8002b04 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b0:	f7fd fa34 	bl	8000b1c <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b8:	f7fd fa30 	bl	8000b1c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e035      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	f7ff fa2c 	bl	8002b2a <LL_RCC_GetSysClkSource>
 80036d2:	4602      	mov	r2, r0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	429a      	cmp	r2, r3
 80036dc:	d1ec      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036de:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d21b      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ec:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 0207 	bic.w	r2, r3, #7
 80036f4:	4913      	ldr	r1, [pc, #76]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fd fa0e 	bl	8000b1c <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	e008      	b.n	8003716 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003704:	f7fd fa0a 	bl	8000b1c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e011      	b.n	800373a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_ClockConfig+0x278>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d1ef      	bne.n	8003704 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003724:	f000 f8b4 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 8003728:	4603      	mov	r3, r0
 800372a:	4a07      	ldr	r2, [pc, #28]	@ (8003748 <HAL_RCC_ClockConfig+0x27c>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800372e:	4b07      	ldr	r3, [pc, #28]	@ (800374c <HAL_RCC_ClockConfig+0x280>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd f9e8 	bl	8000b08 <HAL_InitTick>
 8003738:	4603      	mov	r3, r0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	58004000 	.word	0x58004000
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800375e:	f7ff f9e4 	bl	8002b2a <LL_RCC_GetSysClkSource>
 8003762:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003764:	f7ff facd 	bl	8002d02 <LL_RCC_PLL_GetMainSource>
 8003768:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x2c>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d139      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d136      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800377c:	f7ff f987 	bl	8002a8e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d115      	bne.n	80037b2 <HAL_RCC_GetSysClockFreq+0x62>
 8003786:	f7ff f982 	bl	8002a8e <LL_RCC_MSI_IsEnabledRangeSelect>
 800378a:	4603      	mov	r3, r0
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0x4e>
 8003790:	f7ff f98d 	bl	8002aae <LL_RCC_MSI_GetRange>
 8003794:	4603      	mov	r3, r0
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	e005      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x5a>
 800379e:	f7ff f991 	bl	8002ac4 <LL_RCC_MSI_GetRangeAfterStandby>
 80037a2:	4603      	mov	r3, r0
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	4a36      	ldr	r2, [pc, #216]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x134>)
 80037ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b0:	e014      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x8c>
 80037b2:	f7ff f96c 	bl	8002a8e <LL_RCC_MSI_IsEnabledRangeSelect>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_GetSysClockFreq+0x7a>
 80037bc:	f7ff f977 	bl	8002aae <LL_RCC_MSI_GetRange>
 80037c0:	4603      	mov	r3, r0
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	e005      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x86>
 80037ca:	f7ff f97b 	bl	8002ac4 <LL_RCC_MSI_GetRangeAfterStandby>
 80037ce:	4603      	mov	r3, r0
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x134>)
 80037d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037dc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d115      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037e8:	e012      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037f0:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x138>)
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e00c      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d109      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037fc:	f7ff f85a 	bl	80028b4 <LL_RCC_HSE_IsEnabledDiv2>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003806:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x138>)
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e001      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800380c:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <HAL_RCC_GetSysClockFreq+0x13c>)
 800380e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003810:	f7ff f98b 	bl	8002b2a <LL_RCC_GetSysClkSource>
 8003814:	4603      	mov	r3, r0
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d12f      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800381a:	f7ff fa72 	bl	8002d02 <LL_RCC_PLL_GetMainSource>
 800381e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0xde>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d003      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0xe4>
 800382c:	e00d      	b.n	800384a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800382e:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x138>)
 8003830:	60fb      	str	r3, [r7, #12]
        break;
 8003832:	e00d      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003834:	f7ff f83e 	bl	80028b4 <LL_RCC_HSE_IsEnabledDiv2>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800383e:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x138>)
 8003840:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003842:	e005      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003846:	60fb      	str	r3, [r7, #12]
        break;
 8003848:	e002      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	60fb      	str	r3, [r7, #12]
        break;
 800384e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003850:	f7ff fa35 	bl	8002cbe <LL_RCC_PLL_GetN>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	fb03 f402 	mul.w	r4, r3, r2
 800385c:	f7ff fa46 	bl	8002cec <LL_RCC_PLL_GetDivider>
 8003860:	4603      	mov	r3, r0
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	3301      	adds	r3, #1
 8003866:	fbb4 f4f3 	udiv	r4, r4, r3
 800386a:	f7ff fa34 	bl	8002cd6 <LL_RCC_PLL_GetR>
 800386e:	4603      	mov	r3, r0
 8003870:	0f5b      	lsrs	r3, r3, #29
 8003872:	3301      	adds	r3, #1
 8003874:	fbb4 f3f3 	udiv	r3, r4, r3
 8003878:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800387a:	697b      	ldr	r3, [r7, #20]
}
 800387c:	4618      	mov	r0, r3
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	0800bf78 	.word	0x0800bf78
 8003888:	00f42400 	.word	0x00f42400
 800388c:	01e84800 	.word	0x01e84800

08003890 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b598      	push	{r3, r4, r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003894:	f7ff ff5c 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8003898:	4604      	mov	r4, r0
 800389a:	f7ff f9b5 	bl	8002c08 <LL_RCC_GetAHBPrescaler>
 800389e:	4603      	mov	r3, r0
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	4a03      	ldr	r2, [pc, #12]	@ (80038b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80038a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd98      	pop	{r3, r4, r7, pc}
 80038b4:	0800bf18 	.word	0x0800bf18

080038b8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b598      	push	{r3, r4, r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038bc:	f7ff ffe8 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038c0:	4604      	mov	r4, r0
 80038c2:	f7ff f9b9 	bl	8002c38 <LL_RCC_GetAPB1Prescaler>
 80038c6:	4603      	mov	r3, r0
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	4a03      	ldr	r2, [pc, #12]	@ (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd98      	pop	{r3, r4, r7, pc}
 80038d8:	0800bf58 	.word	0x0800bf58

080038dc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b598      	push	{r3, r4, r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80038e0:	f7ff ffd6 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038e4:	4604      	mov	r4, r0
 80038e6:	f7ff f9b2 	bl	8002c4e <LL_RCC_GetAPB2Prescaler>
 80038ea:	4603      	mov	r3, r0
 80038ec:	0adb      	lsrs	r3, r3, #11
 80038ee:	4a03      	ldr	r2, [pc, #12]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd98      	pop	{r3, r4, r7, pc}
 80038fc:	0800bf58 	.word	0x0800bf58

08003900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	4a10      	ldr	r2, [pc, #64]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003916:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003918:	f7ff f981 	bl	8002c1e <LL_RCC_GetAHB3Prescaler>
 800391c:	4603      	mov	r3, r0
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	4a0c      	ldr	r2, [pc, #48]	@ (8003958 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4a09      	ldr	r2, [pc, #36]	@ (800395c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0c9c      	lsrs	r4, r3, #18
 800393c:	f7fe ff12 	bl	8002764 <HAL_PWREx_GetVoltageRange>
 8003940:	4603      	mov	r3, r0
 8003942:	4619      	mov	r1, r3
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f80b 	bl	8003960 <RCC_SetFlashLatency>
 800394a:	4603      	mov	r3, r0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	0800bf78 	.word	0x0800bf78
 8003958:	0800bf18 	.word	0x0800bf18
 800395c:	431bde83 	.word	0x431bde83

08003960 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	@ 0x38
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800396a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a54 <RCC_SetFlashLatency+0xf4>)
 800396c:	f107 0320 	add.w	r3, r7, #32
 8003970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003974:	6018      	str	r0, [r3, #0]
 8003976:	3304      	adds	r3, #4
 8003978:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800397a:	4a37      	ldr	r2, [pc, #220]	@ (8003a58 <RCC_SetFlashLatency+0xf8>)
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003984:	6018      	str	r0, [r3, #0]
 8003986:	3304      	adds	r3, #4
 8003988:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800398a:	4a34      	ldr	r2, [pc, #208]	@ (8003a5c <RCC_SetFlashLatency+0xfc>)
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	ca07      	ldmia	r2, {r0, r1, r2}
 8003992:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003996:	2300      	movs	r3, #0
 8003998:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a0:	d11b      	bne.n	80039da <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a6:	e014      	b.n	80039d2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	3338      	adds	r3, #56	@ 0x38
 80039ae:	443b      	add	r3, r7
 80039b0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d807      	bhi.n	80039cc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	3338      	adds	r3, #56	@ 0x38
 80039c2:	443b      	add	r3, r7
 80039c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039ca:	e021      	b.n	8003a10 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	3301      	adds	r3, #1
 80039d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d9e7      	bls.n	80039a8 <RCC_SetFlashLatency+0x48>
 80039d8:	e01a      	b.n	8003a10 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039da:	2300      	movs	r3, #0
 80039dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039de:	e014      	b.n	8003a0a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80039e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	3338      	adds	r3, #56	@ 0x38
 80039e6:	443b      	add	r3, r7
 80039e8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d807      	bhi.n	8003a04 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	3338      	adds	r3, #56	@ 0x38
 80039fa:	443b      	add	r3, r7
 80039fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a02:	e005      	b.n	8003a10 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a06:	3301      	adds	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d9e7      	bls.n	80039e0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a10:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <RCC_SetFlashLatency+0x100>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 0207 	bic.w	r2, r3, #7
 8003a18:	4911      	ldr	r1, [pc, #68]	@ (8003a60 <RCC_SetFlashLatency+0x100>)
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a20:	f7fd f87c 	bl	8000b1c <HAL_GetTick>
 8003a24:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a26:	e008      	b.n	8003a3a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a28:	f7fd f878 	bl	8000b1c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e007      	b.n	8003a4a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a3a:	4b09      	ldr	r3, [pc, #36]	@ (8003a60 <RCC_SetFlashLatency+0x100>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1ef      	bne.n	8003a28 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3738      	adds	r7, #56	@ 0x38
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	0800be10 	.word	0x0800be10
 8003a58:	0800be18 	.word	0x0800be18
 8003a5c:	0800be20 	.word	0x0800be20
 8003a60:	58004000 	.word	0x58004000

08003a64 <LL_RCC_LSE_IsReady>:
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d101      	bne.n	8003a7c <LL_RCC_LSE_IsReady+0x18>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <LL_RCC_LSE_IsReady+0x1a>
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_SetUSARTClockSource>:
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_SetI2SClockSource>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <LL_RCC_SetLPUARTClockSource>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003af4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <LL_RCC_SetI2CClockSource>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b16:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_SetLPTIMClockSource>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <LL_RCC_SetRNGClockSource>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_SetADCClockSource>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_SetRTCClockSource>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_GetRTCClockSource>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <LL_RCC_ForceBackupDomainReset>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d058      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003c6c:	f7fe fd38 	bl	80026e0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c70:	f7fc ff54 	bl	8000b1c <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c76:	e009      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c78:	f7fc ff50 	bl	8000b1c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d902      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	74fb      	strb	r3, [r7, #19]
        break;
 8003c8a:	e006      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c98:	d1ee      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13c      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ca0:	f7ff ffa7 	bl	8003bf2 <LL_RCC_GetRTCClockSource>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d00f      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cbc:	f7ff ffa5 	bl	8003c0a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc0:	f7ff ffb3 	bl	8003c2a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d014      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fc ff20 	bl	8000b1c <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fc ff1c 	bl	8000b1c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d902      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	74fb      	strb	r3, [r7, #19]
            break;
 8003cf6:	e004      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003cf8:	f7ff feb4 	bl	8003a64 <LL_RCC_LSE_IsReady>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d1ee      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff5b 	bl	8003bc8 <LL_RCC_SetRTCClockSource>
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
 8003d18:	e001      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fea9 	bl	8003a86 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fe9e 	bl	8003a86 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fec0 	bl	8003ae0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fee6 	bl	8003b42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fedb 	bl	8003b42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fed0 	bl	8003b42 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fea9 	bl	8003b0a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fe9e 	bl	8003b0a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fe93 	bl	8003b0a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d011      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fe5e 	bl	8003ab6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e02:	d107      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fea5 	bl	8003b74 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e40:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d011      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fea3 	bl	8003b9e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e60:	d107      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003e72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	58000400 	.word	0x58000400

08003e80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d071      	beq.n	8003f76 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fc fc96 	bl	80007d8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003eb4:	4b32      	ldr	r3, [pc, #200]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d051      	beq.n	8003f64 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003ec2:	22ca      	movs	r2, #202	@ 0xca
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003ec8:	2253      	movs	r2, #83	@ 0x53
 8003eca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fa11 	bl	80042f4 <RTC_EnterInitMode>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d13f      	bne.n	8003f5c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003edc:	4b28      	ldr	r3, [pc, #160]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4a27      	ldr	r2, [pc, #156]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003ee2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eea:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003eec:	4b24      	ldr	r3, [pc, #144]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	4319      	orrs	r1, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	430b      	orrs	r3, r1
 8003f00:	491f      	ldr	r1, [pc, #124]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	491b      	ldr	r1, [pc, #108]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003f16:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	430b      	orrs	r3, r1
 8003f28:	4915      	ldr	r1, [pc, #84]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa14 	bl	800435c <RTC_ExitInitMode>
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003f3e:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a19      	ldr	r1, [r3, #32]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4319      	orrs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	490a      	ldr	r1, [pc, #40]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f5c:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <HAL_RTC_Init+0x100>)
 8003f5e:	22ff      	movs	r2, #255	@ 0xff
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f62:	e001      	b.n	8003f68 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40002800 	.word	0x40002800

08003f84 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RTC_SetAlarm_IT+0x1e>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0f3      	b.n	800418a <HAL_RTC_SetAlarm_IT+0x206>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003fb2:	4b78      	ldr	r3, [pc, #480]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fba:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fc2:	d06a      	beq.n	800409a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d13a      	bne.n	8004040 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003fca:	4b72      	ldr	r3, [pc, #456]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f9f5 	bl	80043d8 <RTC_ByteToBcd2>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f9ee 	bl	80043d8 <RTC_ByteToBcd2>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004000:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	789b      	ldrb	r3, [r3, #2]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9e6 	bl	80043d8 <RTC_ByteToBcd2>
 800400c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800400e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	78db      	ldrb	r3, [r3, #3]
 8004016:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004018:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f9d8 	bl	80043d8 <RTC_ByteToBcd2>
 8004028:	4603      	mov	r3, r0
 800402a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800402c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004034:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e02c      	b.n	800409a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8004048:	d00d      	beq.n	8004066 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004052:	d008      	beq.n	8004066 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004054:	4b4f      	ldr	r3, [pc, #316]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	785b      	ldrb	r3, [r3, #1]
 8004070:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004072:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004078:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	78db      	ldrb	r3, [r3, #3]
 800407e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004080:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004088:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800408a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004090:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800409a:	4b3e      	ldr	r3, [pc, #248]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 800409c:	22ca      	movs	r2, #202	@ 0xca
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24
 80040a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040a2:	2253      	movs	r2, #83	@ 0x53
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ae:	d12c      	bne.n	800410a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040b0:	4b38      	ldr	r3, [pc, #224]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4a37      	ldr	r2, [pc, #220]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040ba:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80040bc:	4b35      	ldr	r3, [pc, #212]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040be:	2201      	movs	r2, #1
 80040c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c8:	d107      	bne.n	80040da <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4930      	ldr	r1, [pc, #192]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	644b      	str	r3, [r1, #68]	@ 0x44
 80040d8:	e006      	b.n	80040e8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80040da:	4a2e      	ldr	r2, [pc, #184]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80040e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80040e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040fc:	4b25      	ldr	r3, [pc, #148]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4a24      	ldr	r2, [pc, #144]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004102:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8004106:	6193      	str	r3, [r2, #24]
 8004108:	e02b      	b.n	8004162 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800410a:	4b22      	ldr	r3, [pc, #136]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004110:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8004114:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004116:	4b1f      	ldr	r3, [pc, #124]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004118:	2202      	movs	r2, #2
 800411a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	d107      	bne.n	8004134 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4919      	ldr	r1, [pc, #100]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 800412e:	4313      	orrs	r3, r2
 8004130:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8004132:	e006      	b.n	8004142 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004134:	4a17      	ldr	r2, [pc, #92]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800413a:	4a16      	ldr	r2, [pc, #88]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004142:	4a14      	ldr	r2, [pc, #80]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f043 0202 	orr.w	r2, r3, #2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004156:	4b0f      	ldr	r3, [pc, #60]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	4a0e      	ldr	r2, [pc, #56]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 800415c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8004160:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004162:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <HAL_RTC_SetAlarm_IT+0x214>)
 8004164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004168:	4a0b      	ldr	r2, [pc, #44]	@ (8004198 <HAL_RTC_SetAlarm_IT+0x214>)
 800416a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800416e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004172:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <HAL_RTC_SetAlarm_IT+0x210>)
 8004174:	22ff      	movs	r2, #255	@ 0xff
 8004176:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	bf00      	nop
 8004194:	40002800 	.word	0x40002800
 8004198:	58000800 	.word	0x58000800

0800419c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_RTC_DeactivateAlarm+0x18>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e048      	b.n	8004246 <HAL_RTC_DeactivateAlarm+0xaa>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041c4:	4b22      	ldr	r3, [pc, #136]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041c6:	22ca      	movs	r2, #202	@ 0xca
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80041ca:	4b21      	ldr	r3, [pc, #132]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041cc:	2253      	movs	r2, #83	@ 0x53
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041d6:	d115      	bne.n	8004204 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80041d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041e2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80041e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e8:	4a19      	ldr	r2, [pc, #100]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041ee:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	f023 0201 	bic.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041fc:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041fe:	2201      	movs	r2, #1
 8004200:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004202:	e014      	b.n	800422e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004204:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	4a11      	ldr	r2, [pc, #68]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 800420a:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800420e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004210:	4b0f      	ldr	r3, [pc, #60]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004214:	4a0e      	ldr	r2, [pc, #56]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004216:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800421a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	f023 0202 	bic.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004228:	4b09      	ldr	r3, [pc, #36]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 800422a:	2202      	movs	r2, #2
 800422c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800422e:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004230:	22ff      	movs	r2, #255	@ 0xff
 8004232:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	40002800 	.word	0x40002800

08004254 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800425c:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800425e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004272:	4b0c      	ldr	r3, [pc, #48]	@ (80042a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004274:	2201      	movs	r2, #1
 8004276:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7fc fe28 	bl	8000ece <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004288:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800428a:	2202      	movs	r2, #2
 800428c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f94a 	bl	8004528 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40002800 	.word	0x40002800

080042a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <HAL_RTC_WaitForSynchro+0x48>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a0e      	ldr	r2, [pc, #56]	@ (80042f0 <HAL_RTC_WaitForSynchro+0x48>)
 80042b6:	f023 0320 	bic.w	r3, r3, #32
 80042ba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80042bc:	f7fc fc2e 	bl	8000b1c <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042c2:	e009      	b.n	80042d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042c4:	f7fc fc2a 	bl	8000b1c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042d2:	d901      	bls.n	80042d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_RTC_WaitForSynchro+0x48>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ef      	beq.n	80042c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40002800 	.word	0x40002800

080042f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004300:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <RTC_EnterInitMode+0x64>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d120      	bne.n	800434e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800430c:	4b12      	ldr	r3, [pc, #72]	@ (8004358 <RTC_EnterInitMode+0x64>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4a11      	ldr	r2, [pc, #68]	@ (8004358 <RTC_EnterInitMode+0x64>)
 8004312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004316:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004318:	f7fc fc00 	bl	8000b1c <HAL_GetTick>
 800431c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800431e:	e00d      	b.n	800433c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004320:	f7fc fbfc 	bl	8000b1c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800432e:	d905      	bls.n	800433c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2203      	movs	r2, #3
 8004338:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800433c:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <RTC_EnterInitMode+0x64>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <RTC_EnterInitMode+0x5a>
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d1e8      	bne.n	8004320 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40002800 	.word	0x40002800

0800435c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004368:	4b1a      	ldr	r3, [pc, #104]	@ (80043d4 <RTC_ExitInitMode+0x78>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a19      	ldr	r2, [pc, #100]	@ (80043d4 <RTC_ExitInitMode+0x78>)
 800436e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004372:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004374:	4b17      	ldr	r3, [pc, #92]	@ (80043d4 <RTC_ExitInitMode+0x78>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10c      	bne.n	800439a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff91 	bl	80042a8 <HAL_RTC_WaitForSynchro>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01e      	beq.n	80043ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2203      	movs	r2, #3
 8004390:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	73fb      	strb	r3, [r7, #15]
 8004398:	e017      	b.n	80043ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800439a:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <RTC_ExitInitMode+0x78>)
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	4a0d      	ldr	r2, [pc, #52]	@ (80043d4 <RTC_ExitInitMode+0x78>)
 80043a0:	f023 0320 	bic.w	r3, r3, #32
 80043a4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ff7e 	bl	80042a8 <HAL_RTC_WaitForSynchro>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2203      	movs	r2, #3
 80043b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043be:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <RTC_ExitInitMode+0x78>)
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <RTC_ExitInitMode+0x78>)
 80043c4:	f043 0320 	orr.w	r3, r3, #32
 80043c8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40002800 	.word	0x40002800

080043d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80043ea:	e005      	b.n	80043f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80043f2:	7afb      	ldrb	r3, [r7, #11]
 80043f4:	3b0a      	subs	r3, #10
 80043f6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	2b09      	cmp	r3, #9
 80043fc:	d8f6      	bhi.n	80043ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	b2da      	uxtb	r2, r3
 8004406:	7afb      	ldrb	r3, [r7, #11]
 8004408:	4313      	orrs	r3, r2
 800440a:	b2db      	uxtb	r3, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
	...

08004418 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_RTCEx_EnableBypassShadow+0x16>
 800442a:	2302      	movs	r3, #2
 800442c:	e01f      	b.n	800446e <HAL_RTCEx_EnableBypassShadow+0x56>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800443e:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004440:	22ca      	movs	r2, #202	@ 0xca
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004446:	2253      	movs	r2, #83	@ 0x53
 8004448:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	4a0a      	ldr	r2, [pc, #40]	@ (8004478 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004450:	f043 0320 	orr.w	r3, r3, #32
 8004454:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004458:	22ff      	movs	r2, #255	@ 0xff
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	40002800 	.word	0x40002800

0800447c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_RTCEx_SetSSRU_IT+0x16>
 800448e:	2302      	movs	r3, #2
 8004490:	e027      	b.n	80044e2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044a2:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044a4:	22ca      	movs	r2, #202	@ 0xca
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80044a8:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044aa:	2253      	movs	r2, #83	@ 0x53
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80044ae:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	4a0e      	ldr	r2, [pc, #56]	@ (80044ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80044bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044c0:	4a0b      	ldr	r2, [pc, #44]	@ (80044f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80044c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ca:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044cc:	22ff      	movs	r2, #255	@ 0xff
 80044ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40002800 	.word	0x40002800
 80044f0:	58000800 	.word	0x58000800

080044f4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80044fc:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004508:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800450a:	2240      	movs	r2, #64	@ 0x40
 800450c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc fce7 	bl	8000ee2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40002800 	.word	0x40002800

08004528 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
	...

0800453c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004548:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <HAL_RTCEx_BKUPWrite+0x2c>)
 800454a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	4000b100 	.word	0x4000b100

0800456c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <HAL_RTCEx_BKUPRead+0x28>)
 8004578:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	4000b100 	.word	0x4000b100

08004598 <LL_PWR_SetRadioBusyTrigger>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045a8:	4904      	ldr	r1, [pc, #16]	@ (80045bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	58000400 	.word	0x58000400

080045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80045c4:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	4a04      	ldr	r2, [pc, #16]	@ (80045dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	58000400 	.word	0x58000400

080045e0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ea:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80045ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	58000400 	.word	0x58000400

08004600 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004604:	4b03      	ldr	r3, [pc, #12]	@ (8004614 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800460a:	619a      	str	r2, [r3, #24]
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	58000400 	.word	0x58000400

08004618 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	d101      	bne.n	800462c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	58000400 	.word	0x58000400

0800463c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004640:	4b06      	ldr	r3, [pc, #24]	@ (800465c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d101      	bne.n	8004650 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	58000400 	.word	0x58000400

08004660 <LL_RCC_RF_DisableReset>:
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004674:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <LL_RCC_IsRFUnderReset>:
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004690:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004694:	d101      	bne.n	800469a <LL_RCC_IsRFUnderReset+0x1a>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <LL_RCC_IsRFUnderReset+0x1c>
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80046ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80046b2:	4905      	ldr	r1, [pc, #20]	@ (80046c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	58000800 	.word	0x58000800

080046cc <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d103      	bne.n	80046e2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
    return status;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	e052      	b.n	8004788 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	799b      	ldrb	r3, [r3, #6]
 80046ea:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_SUBGHZ_Init+0x2c>
 80046f2:	7bbb      	ldrb	r3, [r7, #14]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d109      	bne.n	800470c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc f970 	bl	80009e4 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004704:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004708:	f7ff ffcc 	bl	80046a4 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800470c:	7bbb      	ldrb	r3, [r7, #14]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d126      	bne.n	8004760 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004718:	f7ff ffa2 	bl	8004660 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800471c:	4b1c      	ldr	r3, [pc, #112]	@ (8004790 <HAL_SUBGHZ_Init+0xc4>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	0cdb      	lsrs	r3, r3, #19
 800472a:	2264      	movs	r2, #100	@ 0x64
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	609a      	str	r2, [r3, #8]
        break;
 8004742:	e007      	b.n	8004754 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800474a:	f7ff ff99 	bl	8004680 <LL_RCC_IsRFUnderReset>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ee      	bne.n	8004732 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004754:	f7ff ff34 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004758:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800475c:	f7ff ff1c 	bl	8004598 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004760:	f7ff ff4e 	bl	8004600 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fabc 	bl	8004cec <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	719a      	strb	r2, [r3, #6]

  return status;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000000 	.word	0x20000000

08004794 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	461a      	mov	r2, r3
 80047a0:	460b      	mov	r3, r1
 80047a2:	817b      	strh	r3, [r7, #10]
 80047a4:	4613      	mov	r3, r2
 80047a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	799b      	ldrb	r3, [r3, #6]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d14a      	bne.n	8004848 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	795b      	ldrb	r3, [r3, #5]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_SUBGHZ_WriteRegisters+0x2a>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e045      	b.n	800484a <HAL_SUBGHZ_WriteRegisters+0xb6>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2202      	movs	r2, #2
 80047c8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fb5c 	bl	8004e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047d0:	f7ff ff06 	bl	80045e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80047d4:	210d      	movs	r1, #13
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 faa8 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80047dc:	897b      	ldrh	r3, [r7, #10]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	4619      	mov	r1, r3
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 faa0 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80047ec:	897b      	ldrh	r3, [r7, #10]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fa9a 	bl	8004d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80047f8:	2300      	movs	r3, #0
 80047fa:	82bb      	strh	r3, [r7, #20]
 80047fc:	e00a      	b.n	8004814 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80047fe:	8abb      	ldrh	r3, [r7, #20]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	4413      	add	r3, r2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fa8f 	bl	8004d2c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800480e:	8abb      	ldrh	r3, [r7, #20]
 8004810:	3301      	adds	r3, #1
 8004812:	82bb      	strh	r3, [r7, #20]
 8004814:	8aba      	ldrh	r2, [r7, #20]
 8004816:	893b      	ldrh	r3, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	d3f0      	bcc.n	80047fe <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800481c:	f7ff fed0 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fb55 	bl	8004ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
 8004832:	e001      	b.n	8004838 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	715a      	strb	r2, [r3, #5]

    return status;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	e000      	b.n	800484a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	461a      	mov	r2, r3
 800485e:	460b      	mov	r3, r1
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	4613      	mov	r3, r2
 8004864:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	799b      	ldrb	r3, [r3, #6]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d14a      	bne.n	800490a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	795b      	ldrb	r3, [r3, #5]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800487c:	2302      	movs	r3, #2
 800487e:	e045      	b.n	800490c <HAL_SUBGHZ_ReadRegisters+0xba>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fafe 	bl	8004e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800488c:	f7ff fea8 	bl	80045e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004890:	211d      	movs	r1, #29
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fa4a 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004898:	897b      	ldrh	r3, [r7, #10]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	b29b      	uxth	r3, r3
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa42 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80048a8:	897b      	ldrh	r3, [r7, #10]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	4619      	mov	r1, r3
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fa3c 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80048b4:	2100      	movs	r1, #0
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa38 	bl	8004d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048bc:	2300      	movs	r3, #0
 80048be:	82fb      	strh	r3, [r7, #22]
 80048c0:	e009      	b.n	80048d6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80048c2:	69b9      	ldr	r1, [r7, #24]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fa87 	bl	8004dd8 <SUBGHZSPI_Receive>
      pData++;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80048d0:	8afb      	ldrh	r3, [r7, #22]
 80048d2:	3301      	adds	r3, #1
 80048d4:	82fb      	strh	r3, [r7, #22]
 80048d6:	8afa      	ldrh	r2, [r7, #22]
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3f1      	bcc.n	80048c2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048de:	f7ff fe6f 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 faf4 	bl	8004ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e001      	b.n	80048fa <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	715a      	strb	r2, [r3, #5]

    return status;
 8004906:	7ffb      	ldrb	r3, [r7, #31]
 8004908:	e000      	b.n	800490c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	460b      	mov	r3, r1
 8004922:	72fb      	strb	r3, [r7, #11]
 8004924:	4613      	mov	r3, r2
 8004926:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	799b      	ldrb	r3, [r3, #6]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d14a      	bne.n	80049c8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	795b      	ldrb	r3, [r3, #5]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800493a:	2302      	movs	r3, #2
 800493c:	e045      	b.n	80049ca <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fa9f 	bl	8004e88 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	2b84      	cmp	r3, #132	@ 0x84
 800494e:	d002      	beq.n	8004956 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004950:	7afb      	ldrb	r3, [r7, #11]
 8004952:	2b94      	cmp	r3, #148	@ 0x94
 8004954:	d103      	bne.n	800495e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	711a      	strb	r2, [r3, #4]
 800495c:	e002      	b.n	8004964 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004964:	f7ff fe3c 	bl	80045e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004968:	7afb      	ldrb	r3, [r7, #11]
 800496a:	4619      	mov	r1, r3
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f9dd 	bl	8004d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004972:	2300      	movs	r3, #0
 8004974:	82bb      	strh	r3, [r7, #20]
 8004976:	e00a      	b.n	800498e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004978:	8abb      	ldrh	r3, [r7, #20]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	4619      	mov	r1, r3
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f9d2 	bl	8004d2c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004988:	8abb      	ldrh	r3, [r7, #20]
 800498a:	3301      	adds	r3, #1
 800498c:	82bb      	strh	r3, [r7, #20]
 800498e:	8aba      	ldrh	r2, [r7, #20]
 8004990:	893b      	ldrh	r3, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	d3f0      	bcc.n	8004978 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004996:	f7ff fe13 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800499a:	7afb      	ldrb	r3, [r7, #11]
 800499c:	2b84      	cmp	r3, #132	@ 0x84
 800499e:	d002      	beq.n	80049a6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fa95 	bl	8004ed0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
 80049b2:	e001      	b.n	80049b8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	715a      	strb	r2, [r3, #5]

    return status;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	e000      	b.n	80049ca <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b088      	sub	sp, #32
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	461a      	mov	r2, r3
 80049de:	460b      	mov	r3, r1
 80049e0:	72fb      	strb	r3, [r7, #11]
 80049e2:	4613      	mov	r3, r2
 80049e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	799b      	ldrb	r3, [r3, #6]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d13d      	bne.n	8004a70 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	795b      	ldrb	r3, [r3, #5]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e038      	b.n	8004a72 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa3e 	bl	8004e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a0c:	f7ff fde8 	bl	80045e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	4619      	mov	r1, r3
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f989 	bl	8004d2c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f985 	bl	8004d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	82fb      	strh	r3, [r7, #22]
 8004a26:	e009      	b.n	8004a3c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a28:	69b9      	ldr	r1, [r7, #24]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f9d4 	bl	8004dd8 <SUBGHZSPI_Receive>
      pData++;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	3301      	adds	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a36:	8afb      	ldrh	r3, [r7, #22]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	82fb      	strh	r3, [r7, #22]
 8004a3c:	8afa      	ldrh	r2, [r7, #22]
 8004a3e:	893b      	ldrh	r3, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d3f1      	bcc.n	8004a28 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a44:	f7ff fdbc 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fa41 	bl	8004ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e001      	b.n	8004a60 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	715a      	strb	r2, [r3, #5]

    return status;
 8004a6c:	7ffb      	ldrb	r3, [r7, #31]
 8004a6e:	e000      	b.n	8004a72 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	461a      	mov	r2, r3
 8004a86:	460b      	mov	r3, r1
 8004a88:	72fb      	strb	r3, [r7, #11]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	799b      	ldrb	r3, [r3, #6]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d13e      	bne.n	8004b16 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	795b      	ldrb	r3, [r3, #5]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e039      	b.n	8004b18 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f9ec 	bl	8004e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ab0:	f7ff fd96 	bl	80045e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004ab4:	210e      	movs	r1, #14
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f938 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004abc:	7afb      	ldrb	r3, [r7, #11]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f933 	bl	8004d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	82bb      	strh	r3, [r7, #20]
 8004aca:	e00a      	b.n	8004ae2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004acc:	8abb      	ldrh	r3, [r7, #20]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f928 	bl	8004d2c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004adc:	8abb      	ldrh	r3, [r7, #20]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	82bb      	strh	r3, [r7, #20]
 8004ae2:	8aba      	ldrh	r2, [r7, #20]
 8004ae4:	893b      	ldrh	r3, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d3f0      	bcc.n	8004acc <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004aea:	f7ff fd69 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f9ee 	bl	8004ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
 8004b00:	e001      	b.n	8004b06 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	715a      	strb	r2, [r3, #5]

    return status;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	e000      	b.n	8004b18 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	72fb      	strb	r3, [r7, #11]
 8004b30:	4613      	mov	r3, r2
 8004b32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	799b      	ldrb	r3, [r3, #6]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d141      	bne.n	8004bc6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	795b      	ldrb	r3, [r3, #5]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e03c      	b.n	8004bc8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f997 	bl	8004e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b5a:	f7ff fd41 	bl	80045e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004b5e:	211e      	movs	r1, #30
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f8e3 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004b66:	7afb      	ldrb	r3, [r7, #11]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f8de 	bl	8004d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004b70:	2100      	movs	r1, #0
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f8da 	bl	8004d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	82fb      	strh	r3, [r7, #22]
 8004b7c:	e009      	b.n	8004b92 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f929 	bl	8004dd8 <SUBGHZSPI_Receive>
      pData++;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004b8c:	8afb      	ldrh	r3, [r7, #22]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	82fb      	strh	r3, [r7, #22]
 8004b92:	8afa      	ldrh	r2, [r7, #22]
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d3f1      	bcc.n	8004b7e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b9a:	f7ff fd11 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f996 	bl	8004ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e001      	b.n	8004bb6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	715a      	strb	r2, [r3, #5]

    return status;
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	e000      	b.n	8004bc8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
  }
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004bd8:	2300      	movs	r3, #0
 8004bda:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004bdc:	f107 020c 	add.w	r2, r7, #12
 8004be0:	2302      	movs	r3, #2
 8004be2:	2112      	movs	r1, #18
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fef4 	bl	80049d2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004bea:	7b3b      	ldrb	r3, [r7, #12]
 8004bec:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004bee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	b21a      	sxth	r2, r3
 8004bf6:	7b7b      	ldrb	r3, [r7, #13]
 8004bf8:	b21b      	sxth	r3, r3
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	b21b      	sxth	r3, r3
 8004bfe:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004c00:	f107 020c 	add.w	r2, r7, #12
 8004c04:	2302      	movs	r3, #2
 8004c06:	2102      	movs	r1, #2
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fe83 	bl	8004914 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f005 fc2b 	bl	800a474 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004c1e:	89fb      	ldrh	r3, [r7, #14]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f005 fc2a 	bl	800a490 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004c3c:	89fb      	ldrh	r3, [r7, #14]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f005 fc79 	bl	800a540 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	08db      	lsrs	r3, r3, #3
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f005 fc7e 	bl	800a55c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004c60:	89fb      	ldrh	r3, [r7, #14]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f005 fc83 	bl	800a578 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f005 fc50 	bl	800a524 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004c84:	89fb      	ldrh	r3, [r7, #14]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f005 fc0b 	bl	800a4ac <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004c96:	89fb      	ldrh	r3, [r7, #14]
 8004c98:	09db      	lsrs	r3, r3, #7
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
 8004ca4:	0a1b      	lsrs	r3, r3, #8
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004cae:	2101      	movs	r1, #1
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f005 fc09 	bl	800a4c8 <HAL_SUBGHZ_CADStatusCallback>
 8004cb6:	e003      	b.n	8004cc0 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f005 fc04 	bl	800a4c8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	0a5b      	lsrs	r3, r3, #9
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f005 fc19 	bl	800a504 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004cd2:	89fb      	ldrh	r3, [r7, #14]
 8004cd4:	0b9b      	lsrs	r3, r3, #14
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f005 fc58 	bl	800a594 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d28 <SUBGHZSPI_Init+0x3c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8004d28 <SUBGHZSPI_Init+0x3c>)
 8004cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cfe:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004d00:	4a09      	ldr	r2, [pc, #36]	@ (8004d28 <SUBGHZSPI_Init+0x3c>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004d08:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004d0a:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <SUBGHZSPI_Init+0x3c>)
 8004d0c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004d10:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d12:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <SUBGHZSPI_Init+0x3c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a04      	ldr	r2, [pc, #16]	@ (8004d28 <SUBGHZSPI_Init+0x3c>)
 8004d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d1c:	6013      	str	r3, [r2, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	58010000 	.word	0x58010000

08004d2c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d3c:	4b23      	ldr	r3, [pc, #140]	@ (8004dcc <SUBGHZSPI_Transmit+0xa0>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	0cdb      	lsrs	r3, r3, #19
 8004d4a:	2264      	movs	r2, #100	@ 0x64
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	609a      	str	r2, [r3, #8]
      break;
 8004d62:	e008      	b.n	8004d76 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d6a:	4b19      	ldr	r3, [pc, #100]	@ (8004dd0 <SUBGHZSPI_Transmit+0xa4>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d1ed      	bne.n	8004d52 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d76:	4b17      	ldr	r3, [pc, #92]	@ (8004dd4 <SUBGHZSPI_Transmit+0xa8>)
 8004d78:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d80:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <SUBGHZSPI_Transmit+0xa0>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	0cdb      	lsrs	r3, r3, #19
 8004d8e:	2264      	movs	r2, #100	@ 0x64
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	609a      	str	r2, [r3, #8]
      break;
 8004da6:	e008      	b.n	8004dba <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004dae:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <SUBGHZSPI_Transmit+0xa4>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d1ed      	bne.n	8004d96 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004dba:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <SUBGHZSPI_Transmit+0xa4>)
 8004dbc:	68db      	ldr	r3, [r3, #12]

  return status;
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	58010000 	.word	0x58010000
 8004dd4:	5801000c 	.word	0x5801000c

08004dd8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004de6:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <SUBGHZSPI_Receive+0xa4>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	0cdb      	lsrs	r3, r3, #19
 8004df4:	2264      	movs	r2, #100	@ 0x64
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	609a      	str	r2, [r3, #8]
      break;
 8004e0c:	e008      	b.n	8004e20 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004e14:	4b1a      	ldr	r3, [pc, #104]	@ (8004e80 <SUBGHZSPI_Receive+0xa8>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d1ed      	bne.n	8004dfc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004e20:	4b18      	ldr	r3, [pc, #96]	@ (8004e84 <SUBGHZSPI_Receive+0xac>)
 8004e22:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	22ff      	movs	r2, #255	@ 0xff
 8004e28:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e2a:	4b14      	ldr	r3, [pc, #80]	@ (8004e7c <SUBGHZSPI_Receive+0xa4>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	0cdb      	lsrs	r3, r3, #19
 8004e38:	2264      	movs	r2, #100	@ 0x64
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d105      	bne.n	8004e52 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	609a      	str	r2, [r3, #8]
      break;
 8004e50:	e008      	b.n	8004e64 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <SUBGHZSPI_Receive+0xa8>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d1ed      	bne.n	8004e40 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004e64:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <SUBGHZSPI_Receive+0xa8>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	701a      	strb	r2, [r3, #0]

  return status;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	58010000 	.word	0x58010000
 8004e84:	5801000c 	.word	0x5801000c

08004e88 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	791b      	ldrb	r3, [r3, #4]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d111      	bne.n	8004ebc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004e98:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <SUBGHZ_CheckDeviceReady+0x44>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ea8:	f7ff fb9a 	bl	80045e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f9      	bne.n	8004eac <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004eb8:	f7ff fb82 	bl	80045c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f807 	bl	8004ed0 <SUBGHZ_WaitOnBusy>
 8004ec2:	4603      	mov	r3, r0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000000 	.word	0x20000000

08004ed0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004edc:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <SUBGHZ_WaitOnBusy+0x58>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	0d1b      	lsrs	r3, r3, #20
 8004eea:	2264      	movs	r2, #100	@ 0x64
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004ef2:	f7ff fba3 	bl	800463c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004ef6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	609a      	str	r2, [r3, #8]
      break;
 8004f08:	e009      	b.n	8004f1e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004f10:	f7ff fb82 	bl	8004618 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d0e9      	beq.n	8004ef2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000000 	.word	0x20000000

08004f2c <LL_RCC_GetUSARTClockSource>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	401a      	ands	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	4313      	orrs	r3, r2
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <LL_RCC_GetLPUARTClockSource>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4013      	ands	r3, r2
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e042      	b.n	8005006 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc f90a 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	@ 0x24
 8004f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 feab 	bl	8005d14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fc34 	bl	800582c <UART_SetConfig>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e01b      	b.n	8005006 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 ff29 	bl	8005e56 <UART_CheckIdleState>
 8005004:	4603      	mov	r3, r0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	@ 0x28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005024:	2b20      	cmp	r3, #32
 8005026:	d137      	bne.n	8005098 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_UART_Receive_IT+0x24>
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e030      	b.n	800509a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_UART_Receive_IT+0x94>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01f      	beq.n	8005088 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61bb      	str	r3, [r7, #24]
   return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	461a      	mov	r2, r3
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fffe 	bl	8006090 <UART_Start_Receive_IT>
 8005094:	4603      	mov	r3, r0
 8005096:	e000      	b.n	800509a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	3728      	adds	r7, #40	@ 0x28
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40008000 	.word	0x40008000

080050a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	@ 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d167      	bne.n	8005190 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_UART_Transmit_DMA+0x24>
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e060      	b.n	8005192 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	88fa      	ldrh	r2, [r7, #6]
 80050e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2221      	movs	r2, #33	@ 0x21
 80050f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d028      	beq.n	8005150 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005102:	4a26      	ldr	r2, [pc, #152]	@ (800519c <HAL_UART_Transmit_DMA+0xf4>)
 8005104:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800510a:	4a25      	ldr	r2, [pc, #148]	@ (80051a0 <HAL_UART_Transmit_DMA+0xf8>)
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005112:	4a24      	ldr	r2, [pc, #144]	@ (80051a4 <HAL_UART_Transmit_DMA+0xfc>)
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800511a:	2200      	movs	r2, #0
 800511c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005126:	4619      	mov	r1, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3328      	adds	r3, #40	@ 0x28
 800512e:	461a      	mov	r2, r3
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	f7fc fdb5 	bl	8001ca0 <HAL_DMA_Start_IT>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2210      	movs	r2, #16
 8005140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e020      	b.n	8005192 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2240      	movs	r2, #64	@ 0x40
 8005156:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	613b      	str	r3, [r7, #16]
   return(result);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005178:	623a      	str	r2, [r7, #32]
 800517a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	6a3a      	ldr	r2, [r7, #32]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	61bb      	str	r3, [r7, #24]
   return(result);
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e5      	bne.n	8005158 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3728      	adds	r7, #40	@ 0x28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	0800641b 	.word	0x0800641b
 80051a0:	080064b5 	.word	0x080064b5
 80051a4:	080064d1 	.word	0x080064d1

080051a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b0ba      	sub	sp, #232	@ 0xe8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80051d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80051d6:	4013      	ands	r3, r2
 80051d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80051dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11b      	bne.n	800521c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 82e3 	beq.w	80057d8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
      }
      return;
 800521a:	e2dd      	b.n	80057d8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800521c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8123 	beq.w	800546c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800522a:	4b8d      	ldr	r3, [pc, #564]	@ (8005460 <HAL_UART_IRQHandler+0x2b8>)
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005236:	4b8b      	ldr	r3, [pc, #556]	@ (8005464 <HAL_UART_IRQHandler+0x2bc>)
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8116 	beq.w	800546c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d011      	beq.n	8005270 <HAL_UART_IRQHandler+0xc8>
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2201      	movs	r2, #1
 800525e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d011      	beq.n	80052a0 <HAL_UART_IRQHandler+0xf8>
 800527c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2202      	movs	r2, #2
 800528e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005296:	f043 0204 	orr.w	r2, r3, #4
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d011      	beq.n	80052d0 <HAL_UART_IRQHandler+0x128>
 80052ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2204      	movs	r2, #4
 80052be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d017      	beq.n	800530c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005460 <HAL_UART_IRQHandler+0x2b8>)
 80052ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2208      	movs	r2, #8
 80052fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005302:	f043 0208 	orr.w	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <HAL_UART_IRQHandler+0x196>
 8005318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00c      	beq.n	800533e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800532c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8249 	beq.w	80057dc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d013      	beq.n	800537e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	d005      	beq.n	80053a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800539a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d054      	beq.n	800544c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 ffd4 	bl	8006350 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b40      	cmp	r3, #64	@ 0x40
 80053b4:	d146      	bne.n	8005444 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1d9      	bne.n	80053b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005412:	4a15      	ldr	r2, [pc, #84]	@ (8005468 <HAL_UART_IRQHandler+0x2c0>)
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800541c:	4618      	mov	r0, r3
 800541e:	f7fc fd1b 	bl	8001e58 <HAL_DMA_Abort_IT>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d019      	beq.n	800545c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005436:	4610      	mov	r0, r2
 8005438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	e00f      	b.n	800545c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f9e0 	bl	8005802 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005442:	e00b      	b.n	800545c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9dc 	bl	8005802 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544a:	e007      	b.n	800545c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f9d8 	bl	8005802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800545a:	e1bf      	b.n	80057dc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	bf00      	nop
    return;
 800545e:	e1bd      	b.n	80057dc <HAL_UART_IRQHandler+0x634>
 8005460:	10000001 	.word	0x10000001
 8005464:	04000120 	.word	0x04000120
 8005468:	08006551 	.word	0x08006551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 8153 	bne.w	800571c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 814c 	beq.w	800571c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8145 	beq.w	800571c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2210      	movs	r2, #16
 8005498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b40      	cmp	r3, #64	@ 0x40
 80054a6:	f040 80bb 	bne.w	8005620 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 818f 	beq.w	80057e0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054cc:	429a      	cmp	r2, r3
 80054ce:	f080 8187 	bcs.w	80057e0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 8087 	bne.w	80055fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800550c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800551a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800551e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1da      	bne.n	80054f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800554a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800555e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005562:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e1      	bne.n	800553a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800559a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800559c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055cc:	f023 0310 	bic.w	r3, r3, #16
 80055d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e4      	bne.n	80055bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fc fbcf 	bl	8001d9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005610:	b29b      	uxth	r3, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8fb 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561e:	e0df      	b.n	80057e0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800562c:	b29b      	uxth	r3, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80d1 	beq.w	80057e4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80cc 	beq.w	80057e4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800566e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005670:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e4      	bne.n	800564c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	623b      	str	r3, [r7, #32]
   return(result);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e1      	bne.n	8005682 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0310 	bic.w	r3, r3, #16
 80056e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69b9      	ldr	r1, [r7, #24]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	617b      	str	r3, [r7, #20]
   return(result);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e4      	bne.n	80056d2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800570e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f87d 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800571a:	e063      	b.n	80057e4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800571c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <HAL_UART_IRQHandler+0x59e>
 8005728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800573c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f001 fc64 	bl	800700c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005744:	e051      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800575e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800576e:	2b00      	cmp	r3, #0
 8005770:	d03a      	beq.n	80057e8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
    }
    return;
 800577a:	e035      	b.n	80057e8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <HAL_UART_IRQHandler+0x5f4>
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fef1 	bl	800657c <UART_EndTransmit_IT>
    return;
 800579a:	e026      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_UART_IRQHandler+0x614>
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fc3b 	bl	8007030 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057ba:	e016      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <HAL_UART_IRQHandler+0x642>
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	da0c      	bge.n	80057ea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 fc24 	bl	800701e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d6:	e008      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
      return;
 80057d8:	bf00      	nop
 80057da:	e006      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
    return;
 80057dc:	bf00      	nop
 80057de:	e004      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
      return;
 80057e0:	bf00      	nop
 80057e2:	e002      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
      return;
 80057e4:	bf00      	nop
 80057e6:	e000      	b.n	80057ea <HAL_UART_IRQHandler+0x642>
    return;
 80057e8:	bf00      	nop
  }
}
 80057ea:	37e8      	adds	r7, #232	@ 0xe8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr
	...

0800582c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800582c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005830:	b08c      	sub	sp, #48	@ 0x30
 8005832:	af00      	add	r7, sp, #0
 8005834:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	431a      	orrs	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	431a      	orrs	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	4313      	orrs	r3, r2
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b94      	ldr	r3, [pc, #592]	@ (8005aac <UART_SetConfig+0x280>)
 800585c:	4013      	ands	r3, r2
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005864:	430b      	orrs	r3, r1
 8005866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a89      	ldr	r2, [pc, #548]	@ (8005ab0 <UART_SetConfig+0x284>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005894:	4313      	orrs	r3, r2
 8005896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80058a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	f023 010f 	bic.w	r1, r3, #15
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a7a      	ldr	r2, [pc, #488]	@ (8005ab4 <UART_SetConfig+0x288>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d127      	bne.n	8005920 <UART_SetConfig+0xf4>
 80058d0:	2003      	movs	r0, #3
 80058d2:	f7ff fb2b 	bl	8004f2c <LL_RCC_GetUSARTClockSource>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d81b      	bhi.n	8005918 <UART_SetConfig+0xec>
 80058e0:	a201      	add	r2, pc, #4	@ (adr r2, 80058e8 <UART_SetConfig+0xbc>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005911 	.word	0x08005911
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fe:	e080      	b.n	8005a02 <UART_SetConfig+0x1d6>
 8005900:	2302      	movs	r3, #2
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005906:	e07c      	b.n	8005a02 <UART_SetConfig+0x1d6>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590e:	e078      	b.n	8005a02 <UART_SetConfig+0x1d6>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005916:	e074      	b.n	8005a02 <UART_SetConfig+0x1d6>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800591e:	e070      	b.n	8005a02 <UART_SetConfig+0x1d6>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a64      	ldr	r2, [pc, #400]	@ (8005ab8 <UART_SetConfig+0x28c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d138      	bne.n	800599c <UART_SetConfig+0x170>
 800592a:	200c      	movs	r0, #12
 800592c:	f7ff fafe 	bl	8004f2c <LL_RCC_GetUSARTClockSource>
 8005930:	4603      	mov	r3, r0
 8005932:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d82c      	bhi.n	8005994 <UART_SetConfig+0x168>
 800593a:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <UART_SetConfig+0x114>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005975 	.word	0x08005975
 8005944:	08005995 	.word	0x08005995
 8005948:	08005995 	.word	0x08005995
 800594c:	08005995 	.word	0x08005995
 8005950:	08005985 	.word	0x08005985
 8005954:	08005995 	.word	0x08005995
 8005958:	08005995 	.word	0x08005995
 800595c:	08005995 	.word	0x08005995
 8005960:	0800597d 	.word	0x0800597d
 8005964:	08005995 	.word	0x08005995
 8005968:	08005995 	.word	0x08005995
 800596c:	08005995 	.word	0x08005995
 8005970:	0800598d 	.word	0x0800598d
 8005974:	2300      	movs	r3, #0
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597a:	e042      	b.n	8005a02 <UART_SetConfig+0x1d6>
 800597c:	2302      	movs	r3, #2
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005982:	e03e      	b.n	8005a02 <UART_SetConfig+0x1d6>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598a:	e03a      	b.n	8005a02 <UART_SetConfig+0x1d6>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005992:	e036      	b.n	8005a02 <UART_SetConfig+0x1d6>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599a:	e032      	b.n	8005a02 <UART_SetConfig+0x1d6>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a43      	ldr	r2, [pc, #268]	@ (8005ab0 <UART_SetConfig+0x284>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d12a      	bne.n	80059fc <UART_SetConfig+0x1d0>
 80059a6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80059aa:	f7ff fad1 	bl	8004f50 <LL_RCC_GetLPUARTClockSource>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059b4:	d01a      	beq.n	80059ec <UART_SetConfig+0x1c0>
 80059b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059ba:	d81b      	bhi.n	80059f4 <UART_SetConfig+0x1c8>
 80059bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c0:	d00c      	beq.n	80059dc <UART_SetConfig+0x1b0>
 80059c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c6:	d815      	bhi.n	80059f4 <UART_SetConfig+0x1c8>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <UART_SetConfig+0x1a8>
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d0:	d008      	beq.n	80059e4 <UART_SetConfig+0x1b8>
 80059d2:	e00f      	b.n	80059f4 <UART_SetConfig+0x1c8>
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059da:	e012      	b.n	8005a02 <UART_SetConfig+0x1d6>
 80059dc:	2302      	movs	r3, #2
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e2:	e00e      	b.n	8005a02 <UART_SetConfig+0x1d6>
 80059e4:	2304      	movs	r3, #4
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ea:	e00a      	b.n	8005a02 <UART_SetConfig+0x1d6>
 80059ec:	2308      	movs	r3, #8
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f2:	e006      	b.n	8005a02 <UART_SetConfig+0x1d6>
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fa:	e002      	b.n	8005a02 <UART_SetConfig+0x1d6>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab0 <UART_SetConfig+0x284>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	f040 80a4 	bne.w	8005b56 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d823      	bhi.n	8005a5e <UART_SetConfig+0x232>
 8005a16:	a201      	add	r2, pc, #4	@ (adr r2, 8005a1c <UART_SetConfig+0x1f0>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a5f 	.word	0x08005a5f
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a5f 	.word	0x08005a5f
 8005a2c:	08005a4f 	.word	0x08005a4f
 8005a30:	08005a5f 	.word	0x08005a5f
 8005a34:	08005a5f 	.word	0x08005a5f
 8005a38:	08005a5f 	.word	0x08005a5f
 8005a3c:	08005a57 	.word	0x08005a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7fd ff3a 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a46:	e010      	b.n	8005a6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a48:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <UART_SetConfig+0x290>)
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a4c:	e00d      	b.n	8005a6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4e:	f7fd fe7f 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8005a52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a54:	e009      	b.n	8005a6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a5c:	e005      	b.n	8005a6a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8137 	beq.w	8005ce0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	4a12      	ldr	r2, [pc, #72]	@ (8005ac0 <UART_SetConfig+0x294>)
 8005a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d305      	bcc.n	8005aa2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d910      	bls.n	8005ac4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aa8:	e11a      	b.n	8005ce0 <UART_SetConfig+0x4b4>
 8005aaa:	bf00      	nop
 8005aac:	cfff69f3 	.word	0xcfff69f3
 8005ab0:	40008000 	.word	0x40008000
 8005ab4:	40013800 	.word	0x40013800
 8005ab8:	40004400 	.word	0x40004400
 8005abc:	00f42400 	.word	0x00f42400
 8005ac0:	0800c008 	.word	0x0800c008
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	60fa      	str	r2, [r7, #12]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	4a8e      	ldr	r2, [pc, #568]	@ (8005d0c <UART_SetConfig+0x4e0>)
 8005ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2200      	movs	r2, #0
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ae6:	f7fa fb4f 	bl	8000188 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	020b      	lsls	r3, r1, #8
 8005afc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b00:	0202      	lsls	r2, r0, #8
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	6849      	ldr	r1, [r1, #4]
 8005b06:	0849      	lsrs	r1, r1, #1
 8005b08:	2000      	movs	r0, #0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	eb12 0804 	adds.w	r8, r2, r4
 8005b12:	eb43 0905 	adc.w	r9, r3, r5
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	469a      	mov	sl, r3
 8005b1e:	4693      	mov	fp, r2
 8005b20:	4652      	mov	r2, sl
 8005b22:	465b      	mov	r3, fp
 8005b24:	4640      	mov	r0, r8
 8005b26:	4649      	mov	r1, r9
 8005b28:	f7fa fb2e 	bl	8000188 <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4613      	mov	r3, r2
 8005b32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b3a:	d308      	bcc.n	8005b4e <UART_SetConfig+0x322>
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b42:	d204      	bcs.n	8005b4e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	60da      	str	r2, [r3, #12]
 8005b4c:	e0c8      	b.n	8005ce0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b54:	e0c4      	b.n	8005ce0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b5e:	d167      	bne.n	8005c30 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005b60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d828      	bhi.n	8005bba <UART_SetConfig+0x38e>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0x344>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005bbb 	.word	0x08005bbb
 8005b80:	08005bab 	.word	0x08005bab
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bbb 	.word	0x08005bbb
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bb3 	.word	0x08005bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fd fe90 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8005b98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b9a:	e014      	b.n	8005bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fd fe9e 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8005ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ba2:	e010      	b.n	8005bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8005d10 <UART_SetConfig+0x4e4>)
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ba8:	e00d      	b.n	8005bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7fd fdd1 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8005bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bb0:	e009      	b.n	8005bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bb8:	e005      	b.n	8005bc6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8089 	beq.w	8005ce0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8005d0c <UART_SetConfig+0x4e0>)
 8005bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be0:	005a      	lsls	r2, r3, #1
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	441a      	add	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d916      	bls.n	8005c28 <UART_SetConfig+0x3fc>
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c00:	d212      	bcs.n	8005c28 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f023 030f 	bic.w	r3, r3, #15
 8005c0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	8bfb      	ldrh	r3, [r7, #30]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	8bfa      	ldrh	r2, [r7, #30]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	e05b      	b.n	8005ce0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c2e:	e057      	b.n	8005ce0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d828      	bhi.n	8005c8a <UART_SetConfig+0x45e>
 8005c38:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <UART_SetConfig+0x414>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08005c6d 	.word	0x08005c6d
 8005c48:	08005c75 	.word	0x08005c75
 8005c4c:	08005c8b 	.word	0x08005c8b
 8005c50:	08005c7b 	.word	0x08005c7b
 8005c54:	08005c8b 	.word	0x08005c8b
 8005c58:	08005c8b 	.word	0x08005c8b
 8005c5c:	08005c8b 	.word	0x08005c8b
 8005c60:	08005c83 	.word	0x08005c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c64:	f7fd fe28 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8005c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c6a:	e014      	b.n	8005c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fd fe36 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8005c70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c72:	e010      	b.n	8005c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c74:	4b26      	ldr	r3, [pc, #152]	@ (8005d10 <UART_SetConfig+0x4e4>)
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c78:	e00d      	b.n	8005c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7fd fd69 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8005c7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c80:	e009      	b.n	8005c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c88:	e005      	b.n	8005c96 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c94:	bf00      	nop
    }

    if (pclk != 0U)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d021      	beq.n	8005ce0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d0c <UART_SetConfig+0x4e0>)
 8005ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	441a      	add	r2, r3
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	2b0f      	cmp	r3, #15
 8005cc4:	d909      	bls.n	8005cda <UART_SetConfig+0x4ae>
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ccc:	d205      	bcs.n	8005cda <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e002      	b.n	8005ce0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3730      	adds	r7, #48	@ 0x30
 8005d04:	46bd      	mov	sp, r7
 8005d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d0a:	bf00      	nop
 8005d0c:	0800c008 	.word	0x0800c008
 8005d10:	00f42400 	.word	0x00f42400

08005d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01a      	beq.n	8005e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e12:	d10a      	bne.n	8005e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr

08005e56 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af02      	add	r7, sp, #8
 8005e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e66:	f7fa fe59 	bl	8000b1c <HAL_GetTick>
 8005e6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d10e      	bne.n	8005e98 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f832 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e028      	b.n	8005eea <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d10e      	bne.n	8005ec4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f81c 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e012      	b.n	8005eea <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b09c      	sub	sp, #112	@ 0x70
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4613      	mov	r3, r2
 8005f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f02:	e0af      	b.n	8006064 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	f000 80ab 	beq.w	8006064 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fa fe05 	bl	8000b1c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d140      	bne.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005f38:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f44:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e6      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f76:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f78:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e06f      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d057      	beq.n	8006064 <UART_WaitOnFlagUntilTimeout+0x172>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b80      	cmp	r3, #128	@ 0x80
 8005fb8:	d054      	beq.n	8006064 <UART_WaitOnFlagUntilTimeout+0x172>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b40      	cmp	r3, #64	@ 0x40
 8005fbe:	d051      	beq.n	8006064 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fce:	d149      	bne.n	8006064 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e6      	bne.n	8005fda <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3308      	adds	r3, #8
 8006012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	613b      	str	r3, [r7, #16]
   return(result);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3308      	adds	r3, #8
 800602a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800602c:	623a      	str	r2, [r7, #32]
 800602e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69f9      	ldr	r1, [r7, #28]
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	61bb      	str	r3, [r7, #24]
   return(result);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e010      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69da      	ldr	r2, [r3, #28]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	429a      	cmp	r2, r3
 8006080:	f43f af40 	beq.w	8005f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3770      	adds	r7, #112	@ 0x70
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006090:	b480      	push	{r7}
 8006092:	b0a3      	sub	sp, #140	@ 0x8c
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	88fa      	ldrh	r2, [r7, #6]
 80060b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c2:	d10e      	bne.n	80060e2 <UART_Start_Receive_IT+0x52>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <UART_Start_Receive_IT+0x48>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80060d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060d6:	e02d      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	22ff      	movs	r2, #255	@ 0xff
 80060dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060e0:	e028      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10d      	bne.n	8006106 <UART_Start_Receive_IT+0x76>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <UART_Start_Receive_IT+0x6c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	22ff      	movs	r2, #255	@ 0xff
 80060f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060fa:	e01b      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	227f      	movs	r2, #127	@ 0x7f
 8006100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006104:	e016      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800610e:	d10d      	bne.n	800612c <UART_Start_Receive_IT+0x9c>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <UART_Start_Receive_IT+0x92>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	227f      	movs	r2, #127	@ 0x7f
 800611c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006120:	e008      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	223f      	movs	r2, #63	@ 0x3f
 8006126:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800612a:	e003      	b.n	8006134 <UART_Start_Receive_IT+0xa4>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2222      	movs	r2, #34	@ 0x22
 8006140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006168:	673a      	str	r2, [r7, #112]	@ 0x70
 800616a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800616e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e3      	bne.n	8006144 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006184:	d14f      	bne.n	8006226 <UART_Start_Receive_IT+0x196>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	429a      	cmp	r2, r3
 8006190:	d349      	bcc.n	8006226 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619a:	d107      	bne.n	80061ac <UART_Start_Receive_IT+0x11c>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4a46      	ldr	r2, [pc, #280]	@ (80062c0 <UART_Start_Receive_IT+0x230>)
 80061a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80061aa:	e002      	b.n	80061b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a45      	ldr	r2, [pc, #276]	@ (80062c4 <UART_Start_Receive_IT+0x234>)
 80061b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01a      	beq.n	80061f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80061c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061de:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80061ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e4      	bne.n	80061ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3308      	adds	r3, #8
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006206:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006210:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006212:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800621e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e5      	bne.n	80061f0 <UART_Start_Receive_IT+0x160>
 8006224:	e046      	b.n	80062b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622e:	d107      	bne.n	8006240 <UART_Start_Receive_IT+0x1b0>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a23      	ldr	r2, [pc, #140]	@ (80062c8 <UART_Start_Receive_IT+0x238>)
 800623c:	675a      	str	r2, [r3, #116]	@ 0x74
 800623e:	e002      	b.n	8006246 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a22      	ldr	r2, [pc, #136]	@ (80062cc <UART_Start_Receive_IT+0x23c>)
 8006244:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d019      	beq.n	8006282 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006262:	677b      	str	r3, [r7, #116]	@ 0x74
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e6      	bne.n	800624e <UART_Start_Receive_IT+0x1be>
 8006280:	e018      	b.n	80062b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	613b      	str	r3, [r7, #16]
   return(result);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f043 0320 	orr.w	r3, r3, #32
 8006296:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062a0:	623b      	str	r3, [r7, #32]
 80062a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	69f9      	ldr	r1, [r7, #28]
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e6      	bne.n	8006282 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	378c      	adds	r7, #140	@ 0x8c
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr
 80062c0:	08006ca5 	.word	0x08006ca5
 80062c4:	08006945 	.word	0x08006945
 80062c8:	0800678d 	.word	0x0800678d
 80062cc:	080065d5 	.word	0x080065d5

080062d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b08f      	sub	sp, #60	@ 0x3c
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e6      	bne.n	80062d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	60bb      	str	r3, [r7, #8]
   return(result);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006320:	633b      	str	r3, [r7, #48]	@ 0x30
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800632a:	61ba      	str	r2, [r7, #24]
 800632c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6979      	ldr	r1, [r7, #20]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	613b      	str	r3, [r7, #16]
   return(result);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006346:	bf00      	nop
 8006348:	373c      	adds	r7, #60	@ 0x3c
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b095      	sub	sp, #84	@ 0x54
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800636c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006376:	643b      	str	r3, [r7, #64]	@ 0x40
 8006378:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800637c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e6      	bne.n	8006358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	61fb      	str	r3, [r7, #28]
   return(result);
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e3      	bne.n	800638a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d118      	bne.n	80063fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6979      	ldr	r1, [r7, #20]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	613b      	str	r3, [r7, #16]
   return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006410:	bf00      	nop
 8006412:	3754      	adds	r7, #84	@ 0x54
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr

0800641a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b090      	sub	sp, #64	@ 0x40
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d137      	bne.n	80064a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006438:	2200      	movs	r2, #0
 800643a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800643e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3308      	adds	r3, #8
 8006444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	623b      	str	r3, [r7, #32]
   return(result);
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800645e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
 8006488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	617b      	str	r3, [r7, #20]
   return(result);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064a4:	e002      	b.n	80064ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80064a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80064a8:	f7fa fff2 	bl	8001490 <HAL_UART_TxCpltCallback>
}
 80064ac:	bf00      	nop
 80064ae:	3740      	adds	r7, #64	@ 0x40
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff f994 	bl	80057f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f8:	2b80      	cmp	r3, #128	@ 0x80
 80064fa:	d109      	bne.n	8006510 <UART_DMAError+0x40>
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b21      	cmp	r3, #33	@ 0x21
 8006500:	d106      	bne.n	8006510 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f7ff fee0 	bl	80062d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d109      	bne.n	8006532 <UART_DMAError+0x62>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b22      	cmp	r3, #34	@ 0x22
 8006522:	d106      	bne.n	8006532 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2200      	movs	r2, #0
 8006528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800652c:	6978      	ldr	r0, [r7, #20]
 800652e:	f7ff ff0f 	bl	8006350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006538:	f043 0210 	orr.w	r2, r3, #16
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006542:	6978      	ldr	r0, [r7, #20]
 8006544:	f7ff f95d 	bl	8005802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006548:	bf00      	nop
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff f947 	bl	8005802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	60bb      	str	r3, [r7, #8]
   return(result);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6979      	ldr	r1, [r7, #20]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	613b      	str	r3, [r7, #16]
   return(result);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e6      	bne.n	8006584 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fa ff63 	bl	8001490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ca:	bf00      	nop
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b09c      	sub	sp, #112	@ 0x70
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80065e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ec:	2b22      	cmp	r3, #34	@ 0x22
 80065ee:	f040 80be 	bne.w	800676e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006600:	b2d9      	uxtb	r1, r3
 8006602:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006606:	b2da      	uxtb	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660c:	400a      	ands	r2, r1
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 80a1 	bne.w	800677e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800664a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800664c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800665a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800665c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e6      	bne.n	800663c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3308      	adds	r3, #8
 8006674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	667b      	str	r3, [r7, #100]	@ 0x64
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800668e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006690:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800669c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e5      	bne.n	800666e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a33      	ldr	r2, [pc, #204]	@ (8006788 <UART_RxISR_8BIT+0x1b4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d01f      	beq.n	8006700 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d018      	beq.n	8006700 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	623b      	str	r3, [r7, #32]
   return(result);
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e6      	bne.n	80066ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d12e      	bne.n	8006766 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	60fb      	str	r3, [r7, #12]
   return(result);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0310 	bic.w	r3, r3, #16
 8006722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	69b9      	ldr	r1, [r7, #24]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	617b      	str	r3, [r7, #20]
   return(result);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e6      	bne.n	800670e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b10      	cmp	r3, #16
 800674c:	d103      	bne.n	8006756 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2210      	movs	r2, #16
 8006754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff f858 	bl	8005814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006764:	e00b      	b.n	800677e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fa fea8 	bl	80014bc <HAL_UART_RxCpltCallback>
}
 800676c:	e007      	b.n	800677e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0208 	orr.w	r2, r2, #8
 800677c:	619a      	str	r2, [r3, #24]
}
 800677e:	bf00      	nop
 8006780:	3770      	adds	r7, #112	@ 0x70
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40008000 	.word	0x40008000

0800678c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b09c      	sub	sp, #112	@ 0x70
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800679a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a4:	2b22      	cmp	r3, #34	@ 0x22
 80067a6:	f040 80be 	bne.w	8006926 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067c2:	4013      	ands	r3, r2
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ce:	1c9a      	adds	r2, r3, #2
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 80a1 	bne.w	8006936 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006808:	667b      	str	r3, [r7, #100]	@ 0x64
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006812:	657b      	str	r3, [r7, #84]	@ 0x54
 8006814:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006818:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e6      	bne.n	80067f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3308      	adds	r3, #8
 800682c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	663b      	str	r3, [r7, #96]	@ 0x60
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006846:	643a      	str	r2, [r7, #64]	@ 0x40
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800684c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e5      	bne.n	8006826 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a33      	ldr	r2, [pc, #204]	@ (8006940 <UART_RxISR_16BIT+0x1b4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01f      	beq.n	80068b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d018      	beq.n	80068b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	61fb      	str	r3, [r7, #28]
   return(result);
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800689a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068a6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e6      	bne.n	8006886 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d12e      	bne.n	800691e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b10      	cmp	r3, #16
 8006904:	d103      	bne.n	800690e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2210      	movs	r2, #16
 800690c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fe ff7c 	bl	8005814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800691c:	e00b      	b.n	8006936 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fa fdcc 	bl	80014bc <HAL_UART_RxCpltCallback>
}
 8006924:	e007      	b.n	8006936 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0208 	orr.w	r2, r2, #8
 8006934:	619a      	str	r2, [r3, #24]
}
 8006936:	bf00      	nop
 8006938:	3770      	adds	r7, #112	@ 0x70
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40008000 	.word	0x40008000

08006944 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b0ac      	sub	sp, #176	@ 0xb0
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006952:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800697a:	2b22      	cmp	r3, #34	@ 0x22
 800697c:	f040 8182 	bne.w	8006c84 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006986:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800698a:	e125      	b.n	8006bd8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006992:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006996:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800699a:	b2d9      	uxtb	r1, r3
 800699c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a6:	400a      	ands	r2, r1
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d053      	beq.n	8006a86 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d011      	beq.n	8006a0e <UART_RxISR_8BIT_FIFOEN+0xca>
 80069ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2201      	movs	r2, #1
 80069fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a04:	f043 0201 	orr.w	r2, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d011      	beq.n	8006a3e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00b      	beq.n	8006a3e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a34:	f043 0204 	orr.w	r2, r3, #4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d011      	beq.n	8006a6e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a64:	f043 0202 	orr.w	r2, r3, #2
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fe fec2 	bl	8005802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f040 80a2 	bne.w	8006bd8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ab8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006abc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e4      	bne.n	8006a94 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae0:	f023 0301 	bic.w	r3, r3, #1
 8006ae4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006af2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006af4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006af8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e1      	bne.n	8006aca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8006c9c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d021      	beq.n	8006b68 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01a      	beq.n	8006b68 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b56:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e4      	bne.n	8006b32 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d130      	bne.n	8006bd2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	f023 0310 	bic.w	r3, r3, #16
 8006b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e4      	bne.n	8006b76 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b10      	cmp	r3, #16
 8006bb8:	d103      	bne.n	8006bc2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2210      	movs	r2, #16
 8006bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fe fe22 	bl	8005814 <HAL_UARTEx_RxEventCallback>
 8006bd0:	e002      	b.n	8006bd8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fa fc72 	bl	80014bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bd8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d006      	beq.n	8006bee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f47f aecf 	bne.w	800698c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d049      	beq.n	8006c94 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d242      	bcs.n	8006c94 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e3      	bne.n	8006c0e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006c4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f043 0320 	orr.w	r3, r3, #32
 8006c60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6979      	ldr	r1, [r7, #20]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e4      	bne.n	8006c4c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c82:	e007      	b.n	8006c94 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0208 	orr.w	r2, r2, #8
 8006c92:	619a      	str	r2, [r3, #24]
}
 8006c94:	bf00      	nop
 8006c96:	37b0      	adds	r7, #176	@ 0xb0
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40008000 	.word	0x40008000
 8006ca0:	080065d5 	.word	0x080065d5

08006ca4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b0ae      	sub	sp, #184	@ 0xb8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cb2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cda:	2b22      	cmp	r3, #34	@ 0x22
 8006cdc:	f040 8186 	bne.w	8006fec <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ce6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cea:	e129      	b.n	8006f40 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006cfe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006d02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006d06:	4013      	ands	r3, r2
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d053      	beq.n	8006dea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d011      	beq.n	8006d72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d68:	f043 0201 	orr.w	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d011      	beq.n	8006da2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d98:	f043 0204 	orr.w	r2, r3, #4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d011      	beq.n	8006dd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00b      	beq.n	8006dd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc8:	f043 0202 	orr.w	r2, r3, #2
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d006      	beq.n	8006dea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fe fd10 	bl	8005802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 80a4 	bne.w	8006f40 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e2      	bne.n	8006df8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e1      	bne.n	8006e32 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a5f      	ldr	r2, [pc, #380]	@ (8007004 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d021      	beq.n	8006ed0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01a      	beq.n	8006ed0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ebe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e4      	bne.n	8006e9a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d130      	bne.n	8006f3a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eee:	f023 0310 	bic.w	r3, r3, #16
 8006ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e4      	bne.n	8006ede <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d103      	bne.n	8006f2a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2210      	movs	r2, #16
 8006f28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fe fc6e 	bl	8005814 <HAL_UARTEx_RxEventCallback>
 8006f38:	e002      	b.n	8006f40 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fa fabe 	bl	80014bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f40:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d006      	beq.n	8006f56 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f47f aecb 	bne.w	8006cec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f5c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d049      	beq.n	8006ffc <UART_RxISR_16BIT_FIFOEN+0x358>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f6e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d242      	bcs.n	8006ffc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	623b      	str	r3, [r7, #32]
   return(result);
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006f9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e3      	bne.n	8006f76 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a15      	ldr	r2, [pc, #84]	@ (8007008 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006fb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f043 0320 	orr.w	r3, r3, #32
 8006fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	69b9      	ldr	r1, [r7, #24]
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e4      	bne.n	8006fb4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fea:	e007      	b.n	8006ffc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	619a      	str	r2, [r3, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	37b8      	adds	r7, #184	@ 0xb8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40008000 	.word	0x40008000
 8007008:	0800678d 	.word	0x0800678d

0800700c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr

0800701e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b088      	sub	sp, #32
 8007046:	af02      	add	r7, sp, #8
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800705e:	2302      	movs	r3, #2
 8007060:	e046      	b.n	80070f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2224      	movs	r2, #36	@ 0x24
 800706e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0201 	bic.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800709c:	1d3b      	adds	r3, r7, #4
 800709e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f911 	bl	80072ca <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b8:	f7f9 fd30 	bl	8000b1c <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7fe ff10 	bl	8005ef2 <UART_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	75fb      	strb	r3, [r7, #23]
 80070dc:	e003      	b.n	80070e6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	@ 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_UARTEx_EnableStopMode+0x16>
 800710a:	2302      	movs	r3, #2
 800710c:	e021      	b.n	8007152 <HAL_UARTEx_EnableStopMode+0x5a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	60bb      	str	r3, [r7, #8]
   return(result);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f043 0302 	orr.w	r3, r3, #2
 800712a:	61fb      	str	r3, [r7, #28]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6979      	ldr	r1, [r7, #20]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	613b      	str	r3, [r7, #16]
   return(result);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3724      	adds	r7, #36	@ 0x24
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_UARTEx_EnableFifoMode+0x16>
 800716e:	2302      	movs	r3, #2
 8007170:	e02b      	b.n	80071ca <HAL_UARTEx_EnableFifoMode+0x6e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	@ 0x24
 800717e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80071a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f8ac 	bl	8007310 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e02d      	b.n	8007246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2224      	movs	r2, #36	@ 0x24
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f872 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007262:	2302      	movs	r3, #2
 8007264:	e02d      	b.n	80072c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2224      	movs	r2, #36	@ 0x24
 8007272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0201 	bic.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f834 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	1d3b      	adds	r3, r7, #4
 80072d4:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f023 0210 	bic.w	r2, r3, #16
 80072e2:	893b      	ldrh	r3, [r7, #8]
 80072e4:	4619      	mov	r1, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80072f8:	7abb      	ldrb	r3, [r7, #10]
 80072fa:	061a      	lsls	r2, r3, #24
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	605a      	str	r2, [r3, #4]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
	...

08007310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007330:	e031      	b.n	8007396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007332:	2308      	movs	r3, #8
 8007334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007336:	2308      	movs	r3, #8
 8007338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	0e5b      	lsrs	r3, r3, #25
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	0f5b      	lsrs	r3, r3, #29
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	7b3a      	ldrb	r2, [r7, #12]
 800735e:	4910      	ldr	r1, [pc, #64]	@ (80073a0 <UARTEx_SetNbDataToProcess+0x90>)
 8007360:	5c8a      	ldrb	r2, [r1, r2]
 8007362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007366:	7b3a      	ldrb	r2, [r7, #12]
 8007368:	490e      	ldr	r1, [pc, #56]	@ (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 800736a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	7b7a      	ldrb	r2, [r7, #13]
 800737c:	4908      	ldr	r1, [pc, #32]	@ (80073a0 <UARTEx_SetNbDataToProcess+0x90>)
 800737e:	5c8a      	ldrb	r2, [r1, r2]
 8007380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007384:	7b7a      	ldrb	r2, [r7, #13]
 8007386:	4907      	ldr	r1, [pc, #28]	@ (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738a:	fb93 f3f2 	sdiv	r3, r3, r2
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr
 80073a0:	0800c020 	.word	0x0800c020
 80073a4:	0800c028 	.word	0x0800c028

080073a8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80073b0:	4a24      	ldr	r2, [pc, #144]	@ (8007444 <RadioInit+0x9c>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80073b6:	4b24      	ldr	r3, [pc, #144]	@ (8007448 <RadioInit+0xa0>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80073bc:	4b22      	ldr	r3, [pc, #136]	@ (8007448 <RadioInit+0xa0>)
 80073be:	2200      	movs	r2, #0
 80073c0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80073c2:	4b21      	ldr	r3, [pc, #132]	@ (8007448 <RadioInit+0xa0>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80073c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007448 <RadioInit+0xa0>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80073ce:	481f      	ldr	r0, [pc, #124]	@ (800744c <RadioInit+0xa4>)
 80073d0:	f001 ffc6 	bl	8009360 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80073d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007448 <RadioInit+0xa0>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80073da:	4b1b      	ldr	r3, [pc, #108]	@ (8007448 <RadioInit+0xa0>)
 80073dc:	2200      	movs	r2, #0
 80073de:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80073e0:	f002 fa5c 	bl	800989c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80073e4:	2100      	movs	r1, #0
 80073e6:	2000      	movs	r0, #0
 80073e8:	f002 fe28 	bl	800a03c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80073ec:	2204      	movs	r2, #4
 80073ee:	2100      	movs	r1, #0
 80073f0:	2001      	movs	r0, #1
 80073f2:	f002 fbeb 	bl	8009bcc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80073f6:	2300      	movs	r3, #0
 80073f8:	2200      	movs	r2, #0
 80073fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80073fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007402:	f002 fb1b 	bl	8009a3c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007406:	f000 fe99 	bl	800813c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800740a:	2300      	movs	r3, #0
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <RadioInit+0xa8>)
 8007410:	2200      	movs	r2, #0
 8007412:	f04f 31ff 	mov.w	r1, #4294967295
 8007416:	480f      	ldr	r0, [pc, #60]	@ (8007454 <RadioInit+0xac>)
 8007418:	f003 ffa8 	bl	800b36c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800741c:	2300      	movs	r3, #0
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4b0d      	ldr	r3, [pc, #52]	@ (8007458 <RadioInit+0xb0>)
 8007422:	2200      	movs	r2, #0
 8007424:	f04f 31ff 	mov.w	r1, #4294967295
 8007428:	480c      	ldr	r0, [pc, #48]	@ (800745c <RadioInit+0xb4>)
 800742a:	f003 ff9f 	bl	800b36c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800742e:	4809      	ldr	r0, [pc, #36]	@ (8007454 <RadioInit+0xac>)
 8007430:	f004 f840 	bl	800b4b4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007434:	4809      	ldr	r0, [pc, #36]	@ (800745c <RadioInit+0xb4>)
 8007436:	f004 f83d 	bl	800b4b4 <UTIL_TIMER_Stop>
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20000284 	.word	0x20000284
 8007448:	20000288 	.word	0x20000288
 800744c:	08008531 	.word	0x08008531
 8007450:	080084b9 	.word	0x080084b9
 8007454:	200002e4 	.word	0x200002e4
 8007458:	080084cd 	.word	0x080084cd
 800745c:	200002fc 	.word	0x200002fc

08007460 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007464:	f001 ffc4 	bl	80093f0 <SUBGRF_GetOperatingMode>
 8007468:	4603      	mov	r3, r0
 800746a:	2b07      	cmp	r3, #7
 800746c:	d00a      	beq.n	8007484 <RadioGetStatus+0x24>
 800746e:	2b07      	cmp	r3, #7
 8007470:	dc0a      	bgt.n	8007488 <RadioGetStatus+0x28>
 8007472:	2b04      	cmp	r3, #4
 8007474:	d002      	beq.n	800747c <RadioGetStatus+0x1c>
 8007476:	2b05      	cmp	r3, #5
 8007478:	d002      	beq.n	8007480 <RadioGetStatus+0x20>
 800747a:	e005      	b.n	8007488 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800747c:	2302      	movs	r3, #2
 800747e:	e004      	b.n	800748a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007480:	2301      	movs	r3, #1
 8007482:	e002      	b.n	800748a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007484:	2303      	movs	r3, #3
 8007486:	e000      	b.n	800748a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007488:	2300      	movs	r3, #0
    }
}
 800748a:	4618      	mov	r0, r3
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800749a:	4a2a      	ldr	r2, [pc, #168]	@ (8007544 <RadioSetModem+0xb4>)
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f003 f9b7 	bl	800a816 <RFW_SetRadioModem>
    switch( modem )
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	2b05      	cmp	r3, #5
 80074ac:	d80e      	bhi.n	80074cc <RadioSetModem+0x3c>
 80074ae:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <RadioSetModem+0x24>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	080074db 	.word	0x080074db
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	0800750f 	.word	0x0800750f
 80074c4:	0800751d 	.word	0x0800751d
 80074c8:	0800752b 	.word	0x0800752b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80074cc:	2003      	movs	r0, #3
 80074ce:	f002 fb57 	bl	8009b80 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80074d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <RadioSetModem+0xb4>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	735a      	strb	r2, [r3, #13]
        break;
 80074d8:	e02f      	b.n	800753a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80074da:	2000      	movs	r0, #0
 80074dc:	f002 fb50 	bl	8009b80 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80074e0:	4b18      	ldr	r3, [pc, #96]	@ (8007544 <RadioSetModem+0xb4>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	735a      	strb	r2, [r3, #13]
        break;
 80074e6:	e028      	b.n	800753a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80074e8:	2001      	movs	r0, #1
 80074ea:	f002 fb49 	bl	8009b80 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80074ee:	4b15      	ldr	r3, [pc, #84]	@ (8007544 <RadioSetModem+0xb4>)
 80074f0:	7b5a      	ldrb	r2, [r3, #13]
 80074f2:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <RadioSetModem+0xb4>)
 80074f4:	7b1b      	ldrb	r3, [r3, #12]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d01e      	beq.n	8007538 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80074fa:	4b12      	ldr	r3, [pc, #72]	@ (8007544 <RadioSetModem+0xb4>)
 80074fc:	7b1a      	ldrb	r2, [r3, #12]
 80074fe:	4b11      	ldr	r3, [pc, #68]	@ (8007544 <RadioSetModem+0xb4>)
 8007500:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <RadioSetModem+0xb4>)
 8007504:	7b5b      	ldrb	r3, [r3, #13]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 ffa0 	bl	800844c <RadioSetPublicNetwork>
        }
        break;
 800750c:	e014      	b.n	8007538 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800750e:	2002      	movs	r0, #2
 8007510:	f002 fb36 	bl	8009b80 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007514:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <RadioSetModem+0xb4>)
 8007516:	2200      	movs	r2, #0
 8007518:	735a      	strb	r2, [r3, #13]
        break;
 800751a:	e00e      	b.n	800753a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800751c:	2002      	movs	r0, #2
 800751e:	f002 fb2f 	bl	8009b80 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007522:	4b08      	ldr	r3, [pc, #32]	@ (8007544 <RadioSetModem+0xb4>)
 8007524:	2200      	movs	r2, #0
 8007526:	735a      	strb	r2, [r3, #13]
        break;
 8007528:	e007      	b.n	800753a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800752a:	2000      	movs	r0, #0
 800752c:	f002 fb28 	bl	8009b80 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007530:	4b04      	ldr	r3, [pc, #16]	@ (8007544 <RadioSetModem+0xb4>)
 8007532:	2200      	movs	r2, #0
 8007534:	735a      	strb	r2, [r3, #13]
        break;
 8007536:	e000      	b.n	800753a <RadioSetModem+0xaa>
        break;
 8007538:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000288 	.word	0x20000288

08007548 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f002 facf 	bl	8009af4 <SUBGRF_SetRfFrequency>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b090      	sub	sp, #64	@ 0x40
 8007562:	af0a      	add	r7, sp, #40	@ 0x28
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	603b      	str	r3, [r7, #0]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800757a:	f000 fdf2 	bl	8008162 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800757e:	2000      	movs	r0, #0
 8007580:	f7ff ff86 	bl	8007490 <RadioSetModem>

    RadioSetChannel( freq );
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff ffdf 	bl	8007548 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800758a:	2301      	movs	r3, #1
 800758c:	9309      	str	r3, [sp, #36]	@ 0x24
 800758e:	2300      	movs	r3, #0
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	2300      	movs	r3, #0
 8007594:	9307      	str	r3, [sp, #28]
 8007596:	2300      	movs	r3, #0
 8007598:	9306      	str	r3, [sp, #24]
 800759a:	2300      	movs	r3, #0
 800759c:	9305      	str	r3, [sp, #20]
 800759e:	2300      	movs	r3, #0
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	2300      	movs	r3, #0
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	2300      	movs	r3, #0
 80075a8:	9302      	str	r3, [sp, #8]
 80075aa:	2303      	movs	r3, #3
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	2300      	movs	r3, #0
 80075b4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	2000      	movs	r0, #0
 80075bc:	f000 f83c 	bl	8007638 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80075c0:	2000      	movs	r0, #0
 80075c2:	f000 fdd5 	bl	8008170 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80075c6:	f000 ff6f 	bl	80084a8 <RadioGetWakeupTime>
 80075ca:	4603      	mov	r3, r0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f9 fab9 	bl	8000b44 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80075d2:	f004 f889 	bl	800b6e8 <UTIL_TIMER_GetCurrentTime>
 80075d6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80075d8:	e00d      	b.n	80075f6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80075da:	2000      	movs	r0, #0
 80075dc:	f000 feb6 	bl	800834c <RadioRssi>
 80075e0:	4603      	mov	r3, r0
 80075e2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80075e4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80075e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	dd02      	ble.n	80075f6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80075f0:	2300      	movs	r3, #0
 80075f2:	75fb      	strb	r3, [r7, #23]
            break;
 80075f4:	e006      	b.n	8007604 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80075f6:	6938      	ldr	r0, [r7, #16]
 80075f8:	f004 f888 	bl	800b70c <UTIL_TIMER_GetElapsedTime>
 80075fc:	4602      	mov	r2, r0
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	4293      	cmp	r3, r2
 8007602:	d8ea      	bhi.n	80075da <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007604:	f000 fdad 	bl	8008162 <RadioStandby>

    return status;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800761c:	2300      	movs	r3, #0
 800761e:	2200      	movs	r2, #0
 8007620:	2100      	movs	r1, #0
 8007622:	2000      	movs	r0, #0
 8007624:	f002 fa0a 	bl	8009a3c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007628:	f001 ffb3 	bl	8009592 <SUBGRF_GetRandom>
 800762c:	6078      	str	r0, [r7, #4]

    return rnd;
 800762e:	687b      	ldr	r3, [r7, #4]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	@ 0x28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	461a      	mov	r2, r3
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
 8007648:	4613      	mov	r3, r2
 800764a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800764c:	4ab9      	ldr	r2, [pc, #740]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800764e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007652:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007654:	f003 f89d 	bl	800a792 <RFW_DeInit>
    if( rxContinuous == true )
 8007658:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8007664:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800766c:	4ab2      	ldr	r2, [pc, #712]	@ (8007938 <RadioSetRxConfig+0x300>)
 800766e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007672:	7013      	strb	r3, [r2, #0]
 8007674:	e002      	b.n	800767c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007676:	4bb0      	ldr	r3, [pc, #704]	@ (8007938 <RadioSetRxConfig+0x300>)
 8007678:	22ff      	movs	r2, #255	@ 0xff
 800767a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b05      	cmp	r3, #5
 8007680:	d009      	beq.n	8007696 <RadioSetRxConfig+0x5e>
 8007682:	2b05      	cmp	r3, #5
 8007684:	f300 81d7 	bgt.w	8007a36 <RadioSetRxConfig+0x3fe>
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80bf 	beq.w	800780c <RadioSetRxConfig+0x1d4>
 800768e:	2b01      	cmp	r3, #1
 8007690:	f000 8124 	beq.w	80078dc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007694:	e1cf      	b.n	8007a36 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007696:	2001      	movs	r0, #1
 8007698:	f002 f8c2 	bl	8009820 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800769c:	4ba5      	ldr	r3, [pc, #660]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80076a4:	4aa3      	ldr	r2, [pc, #652]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80076aa:	4ba2      	ldr	r3, [pc, #648]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076ac:	2209      	movs	r2, #9
 80076ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80076b2:	4ba0      	ldr	r3, [pc, #640]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076b4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80076b8:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	f002 ff9c 	bl	800a5f8 <SUBGRF_GetFskBandwidthRegValue>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	4b9b      	ldr	r3, [pc, #620]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80076ca:	4b9a      	ldr	r3, [pc, #616]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80076d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	4b97      	ldr	r3, [pc, #604]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076d8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80076da:	4b96      	ldr	r3, [pc, #600]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076dc:	2200      	movs	r2, #0
 80076de:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80076e0:	4b94      	ldr	r3, [pc, #592]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076e2:	2210      	movs	r2, #16
 80076e4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80076e6:	4b93      	ldr	r3, [pc, #588]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80076ec:	4b91      	ldr	r3, [pc, #580]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80076f2:	4b91      	ldr	r3, [pc, #580]	@ (8007938 <RadioSetRxConfig+0x300>)
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	4b8f      	ldr	r3, [pc, #572]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076f8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80076fa:	4b8e      	ldr	r3, [pc, #568]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007700:	4b8c      	ldr	r3, [pc, #560]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007702:	2200      	movs	r2, #0
 8007704:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007706:	2005      	movs	r0, #5
 8007708:	f7ff fec2 	bl	8007490 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800770c:	488b      	ldr	r0, [pc, #556]	@ (800793c <RadioSetRxConfig+0x304>)
 800770e:	f002 fb2b 	bl	8009d68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007712:	488b      	ldr	r0, [pc, #556]	@ (8007940 <RadioSetRxConfig+0x308>)
 8007714:	f002 fbf6 	bl	8009f04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007718:	4a8a      	ldr	r2, [pc, #552]	@ (8007944 <RadioSetRxConfig+0x30c>)
 800771a:	f107 031c 	add.w	r3, r7, #28
 800771e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007722:	e883 0003 	stmia.w	r3, {r0, r1}
 8007726:	f107 031c 	add.w	r3, r7, #28
 800772a:	4618      	mov	r0, r3
 800772c:	f001 feaf 	bl	800948e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007730:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007734:	f001 fefa 	bl	800952c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007738:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800773c:	f000 fe24 	bl	8008388 <RadioRead>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007746:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800774a:	f023 0310 	bic.w	r3, r3, #16
 800774e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007756:	4619      	mov	r1, r3
 8007758:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800775c:	f000 fe02 	bl	8008364 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007760:	2104      	movs	r1, #4
 8007762:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8007766:	f000 fdfd 	bl	8008364 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800776a:	f640 009b 	movw	r0, #2203	@ 0x89b
 800776e:	f000 fe0b 	bl	8008388 <RadioRead>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800777c:	f023 031c 	bic.w	r3, r3, #28
 8007780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007788:	f043 0308 	orr.w	r3, r3, #8
 800778c:	b2db      	uxtb	r3, r3
 800778e:	4619      	mov	r1, r3
 8007790:	f640 009b 	movw	r0, #2203	@ 0x89b
 8007794:	f000 fde6 	bl	8008364 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007798:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800779c:	f000 fdf4 	bl	8008388 <RadioRead>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80077a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077aa:	f023 0318 	bic.w	r3, r3, #24
 80077ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80077b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077b6:	f043 0318 	orr.w	r3, r3, #24
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	4619      	mov	r1, r3
 80077be:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80077c2:	f000 fdcf 	bl	8008364 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80077c6:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80077ca:	f000 fddd 	bl	8008388 <RadioRead>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80077d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80077e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80077f0:	f000 fdb8 	bl	8008364 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80077f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80077f6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	fbb2 f3f3 	udiv	r3, r2, r3
 8007806:	4a4b      	ldr	r2, [pc, #300]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007808:	6093      	str	r3, [r2, #8]
            break;
 800780a:	e115      	b.n	8007a38 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800780c:	2000      	movs	r0, #0
 800780e:	f002 f807 	bl	8009820 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007812:	4b48      	ldr	r3, [pc, #288]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800781a:	4a46      	ldr	r2, [pc, #280]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007820:	4b44      	ldr	r3, [pc, #272]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007822:	220b      	movs	r2, #11
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f002 fee5 	bl	800a5f8 <SUBGRF_GetFskBandwidthRegValue>
 800782e:	4603      	mov	r3, r0
 8007830:	461a      	mov	r2, r3
 8007832:	4b40      	ldr	r3, [pc, #256]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007838:	4b3e      	ldr	r3, [pc, #248]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800783a:	2200      	movs	r2, #0
 800783c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800783e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	b29a      	uxth	r2, r3
 8007844:	4b3b      	ldr	r3, [pc, #236]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007846:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007848:	4b3a      	ldr	r3, [pc, #232]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800784a:	2204      	movs	r2, #4
 800784c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800784e:	4b39      	ldr	r3, [pc, #228]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007850:	2218      	movs	r2, #24
 8007852:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007854:	4b37      	ldr	r3, [pc, #220]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007856:	2200      	movs	r2, #0
 8007858:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800785a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800785e:	f083 0301 	eor.w	r3, r3, #1
 8007862:	b2db      	uxtb	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	4b33      	ldr	r3, [pc, #204]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007868:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800786a:	4b33      	ldr	r3, [pc, #204]	@ (8007938 <RadioSetRxConfig+0x300>)
 800786c:	781a      	ldrb	r2, [r3, #0]
 800786e:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007870:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007872:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800787a:	4b2e      	ldr	r3, [pc, #184]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800787c:	22f2      	movs	r2, #242	@ 0xf2
 800787e:	75da      	strb	r2, [r3, #23]
 8007880:	e002      	b.n	8007888 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007882:	4b2c      	ldr	r3, [pc, #176]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007884:	2201      	movs	r2, #1
 8007886:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007888:	4b2a      	ldr	r3, [pc, #168]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800788a:	2201      	movs	r2, #1
 800788c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800788e:	f000 fc68 	bl	8008162 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007892:	2000      	movs	r0, #0
 8007894:	f7ff fdfc 	bl	8007490 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007898:	4828      	ldr	r0, [pc, #160]	@ (800793c <RadioSetRxConfig+0x304>)
 800789a:	f002 fa65 	bl	8009d68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800789e:	4828      	ldr	r0, [pc, #160]	@ (8007940 <RadioSetRxConfig+0x308>)
 80078a0:	f002 fb30 	bl	8009f04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80078a4:	4a28      	ldr	r2, [pc, #160]	@ (8007948 <RadioSetRxConfig+0x310>)
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80078b2:	f107 0314 	add.w	r3, r7, #20
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fde9 	bl	800948e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80078bc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80078c0:	f001 fe34 	bl	800952c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80078c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80078c6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	4a17      	ldr	r2, [pc, #92]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80078d8:	6093      	str	r3, [r2, #8]
            break;
 80078da:	e0ad      	b.n	8007a38 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80078dc:	2000      	movs	r0, #0
 80078de:	f001 ff9f 	bl	8009820 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80078e2:	4b14      	ldr	r3, [pc, #80]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	4b11      	ldr	r3, [pc, #68]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80078f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80078f4:	4a15      	ldr	r2, [pc, #84]	@ (800794c <RadioSetRxConfig+0x314>)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 80078fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007902:	4a0c      	ldr	r2, [pc, #48]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <RadioSetRxConfig+0x2e4>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b0b      	cmp	r3, #11
 8007914:	d008      	beq.n	8007928 <RadioSetRxConfig+0x2f0>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b0c      	cmp	r3, #12
 800791a:	d005      	beq.n	8007928 <RadioSetRxConfig+0x2f0>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d116      	bne.n	8007950 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b0c      	cmp	r3, #12
 8007926:	d113      	bne.n	8007950 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007928:	4b02      	ldr	r3, [pc, #8]	@ (8007934 <RadioSetRxConfig+0x2fc>)
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007930:	e012      	b.n	8007958 <RadioSetRxConfig+0x320>
 8007932:	bf00      	nop
 8007934:	20000288 	.word	0x20000288
 8007938:	20000008 	.word	0x20000008
 800793c:	200002c0 	.word	0x200002c0
 8007940:	20000296 	.word	0x20000296
 8007944:	0800be2c 	.word	0x0800be2c
 8007948:	0800be34 	.word	0x0800be34
 800794c:	0800c0bc 	.word	0x0800c0bc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007950:	4b3b      	ldr	r3, [pc, #236]	@ (8007a40 <RadioSetRxConfig+0x408>)
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007958:	4b39      	ldr	r3, [pc, #228]	@ (8007a40 <RadioSetRxConfig+0x408>)
 800795a:	2201      	movs	r2, #1
 800795c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800795e:	4b38      	ldr	r3, [pc, #224]	@ (8007a40 <RadioSetRxConfig+0x408>)
 8007960:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007964:	2b05      	cmp	r3, #5
 8007966:	d004      	beq.n	8007972 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007968:	4b35      	ldr	r3, [pc, #212]	@ (8007a40 <RadioSetRxConfig+0x408>)
 800796a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800796e:	2b06      	cmp	r3, #6
 8007970:	d10a      	bne.n	8007988 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007972:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007974:	2b0b      	cmp	r3, #11
 8007976:	d803      	bhi.n	8007980 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007978:	4b31      	ldr	r3, [pc, #196]	@ (8007a40 <RadioSetRxConfig+0x408>)
 800797a:	220c      	movs	r2, #12
 800797c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800797e:	e006      	b.n	800798e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007980:	4a2f      	ldr	r2, [pc, #188]	@ (8007a40 <RadioSetRxConfig+0x408>)
 8007982:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007984:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007986:	e002      	b.n	800798e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007988:	4a2d      	ldr	r2, [pc, #180]	@ (8007a40 <RadioSetRxConfig+0x408>)
 800798a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800798c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800798e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007992:	4b2b      	ldr	r3, [pc, #172]	@ (8007a40 <RadioSetRxConfig+0x408>)
 8007994:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007996:	4b2b      	ldr	r3, [pc, #172]	@ (8007a44 <RadioSetRxConfig+0x40c>)
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	4b29      	ldr	r3, [pc, #164]	@ (8007a40 <RadioSetRxConfig+0x408>)
 800799c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800799e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80079a2:	4b27      	ldr	r3, [pc, #156]	@ (8007a40 <RadioSetRxConfig+0x408>)
 80079a4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80079a8:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80079ac:	4b24      	ldr	r3, [pc, #144]	@ (8007a40 <RadioSetRxConfig+0x408>)
 80079ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80079b2:	f000 fbd6 	bl	8008162 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80079b6:	2001      	movs	r0, #1
 80079b8:	f7ff fd6a 	bl	8007490 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079bc:	4822      	ldr	r0, [pc, #136]	@ (8007a48 <RadioSetRxConfig+0x410>)
 80079be:	f002 f9d3 	bl	8009d68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079c2:	4822      	ldr	r0, [pc, #136]	@ (8007a4c <RadioSetRxConfig+0x414>)
 80079c4:	f002 fa9e 	bl	8009f04 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80079c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 ff36 	bl	800983e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80079d2:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80079d6:	f002 fbfd 	bl	800a1d4 <SUBGRF_ReadRegister>
 80079da:	4603      	mov	r3, r0
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80079e8:	f002 fbd2 	bl	800a190 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80079ec:	4b14      	ldr	r3, [pc, #80]	@ (8007a40 <RadioSetRxConfig+0x408>)
 80079ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d10d      	bne.n	8007a12 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80079f6:	f240 7036 	movw	r0, #1846	@ 0x736
 80079fa:	f002 fbeb 	bl	800a1d4 <SUBGRF_ReadRegister>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f023 0304 	bic.w	r3, r3, #4
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4619      	mov	r1, r3
 8007a08:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a0c:	f002 fbc0 	bl	800a190 <SUBGRF_WriteRegister>
 8007a10:	e00c      	b.n	8007a2c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007a12:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a16:	f002 fbdd 	bl	800a1d4 <SUBGRF_ReadRegister>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f043 0304 	orr.w	r3, r3, #4
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	4619      	mov	r1, r3
 8007a24:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a28:	f002 fbb2 	bl	800a190 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007a2c:	4b04      	ldr	r3, [pc, #16]	@ (8007a40 <RadioSetRxConfig+0x408>)
 8007a2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a32:	609a      	str	r2, [r3, #8]
            break;
 8007a34:	e000      	b.n	8007a38 <RadioSetRxConfig+0x400>
            break;
 8007a36:	bf00      	nop
    }
}
 8007a38:	bf00      	nop
 8007a3a:	3728      	adds	r7, #40	@ 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000288 	.word	0x20000288
 8007a44:	20000008 	.word	0x20000008
 8007a48:	200002c0 	.word	0x200002c0
 8007a4c:	20000296 	.word	0x20000296

08007a50 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60ba      	str	r2, [r7, #8]
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8007a62:	f002 fe96 	bl	800a792 <RFW_DeInit>
    switch( modem )
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	f000 80c7 	beq.w	8007bfc <RadioSetTxConfig+0x1ac>
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	f300 80d6 	bgt.w	8007c20 <RadioSetTxConfig+0x1d0>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <RadioSetTxConfig+0x2e>
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d059      	beq.n	8007b30 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007a7c:	e0d0      	b.n	8007c20 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007a7e:	4b77      	ldr	r3, [pc, #476]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007a86:	4a75      	ldr	r2, [pc, #468]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007a8c:	4b73      	ldr	r3, [pc, #460]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007a8e:	220b      	movs	r2, #11
 8007a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f002 fdaf 	bl	800a5f8 <SUBGRF_GetFskBandwidthRegValue>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007ab0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	4b69      	ldr	r3, [pc, #420]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007ab8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007aba:	4b68      	ldr	r3, [pc, #416]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007abc:	2204      	movs	r2, #4
 8007abe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007ac0:	4b66      	ldr	r3, [pc, #408]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007ac2:	2218      	movs	r2, #24
 8007ac4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007ac6:	4b65      	ldr	r3, [pc, #404]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007acc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007ad0:	f083 0301 	eor.w	r3, r3, #1
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	4b60      	ldr	r3, [pc, #384]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007ada:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007adc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007ae6:	22f2      	movs	r2, #242	@ 0xf2
 8007ae8:	75da      	strb	r2, [r3, #23]
 8007aea:	e002      	b.n	8007af2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007aec:	4b5b      	ldr	r3, [pc, #364]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007af2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007af8:	f000 fb33 	bl	8008162 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007afc:	2000      	movs	r0, #0
 8007afe:	f7ff fcc7 	bl	8007490 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b02:	4857      	ldr	r0, [pc, #348]	@ (8007c60 <RadioSetTxConfig+0x210>)
 8007b04:	f002 f930 	bl	8009d68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b08:	4856      	ldr	r0, [pc, #344]	@ (8007c64 <RadioSetTxConfig+0x214>)
 8007b0a:	f002 f9fb 	bl	8009f04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007b0e:	4a56      	ldr	r2, [pc, #344]	@ (8007c68 <RadioSetTxConfig+0x218>)
 8007b10:	f107 0310 	add.w	r3, r7, #16
 8007b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b18:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b1c:	f107 0310 	add.w	r3, r7, #16
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 fcb4 	bl	800948e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007b26:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007b2a:	f001 fcff 	bl	800952c <SUBGRF_SetWhiteningSeed>
            break;
 8007b2e:	e078      	b.n	8007c22 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007b30:	4b4a      	ldr	r3, [pc, #296]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	4b47      	ldr	r3, [pc, #284]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007b42:	4a4a      	ldr	r2, [pc, #296]	@ (8007c6c <RadioSetTxConfig+0x21c>)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	781a      	ldrb	r2, [r3, #0]
 8007b4a:	4b44      	ldr	r3, [pc, #272]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007b50:	4a42      	ldr	r2, [pc, #264]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b56:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d105      	bne.n	8007b6c <RadioSetTxConfig+0x11c>
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	2b0b      	cmp	r3, #11
 8007b64:	d008      	beq.n	8007b78 <RadioSetTxConfig+0x128>
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	2b0c      	cmp	r3, #12
 8007b6a:	d005      	beq.n	8007b78 <RadioSetTxConfig+0x128>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d107      	bne.n	8007b82 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	d104      	bne.n	8007b82 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007b78:	4b38      	ldr	r3, [pc, #224]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007b80:	e003      	b.n	8007b8a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007b82:	4b36      	ldr	r3, [pc, #216]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007b8a:	4b34      	ldr	r3, [pc, #208]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007b90:	4b32      	ldr	r3, [pc, #200]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	d004      	beq.n	8007ba4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007b9a:	4b30      	ldr	r3, [pc, #192]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007b9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007ba0:	2b06      	cmp	r3, #6
 8007ba2:	d10a      	bne.n	8007bba <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007ba4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ba6:	2b0b      	cmp	r3, #11
 8007ba8:	d803      	bhi.n	8007bb2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007baa:	4b2c      	ldr	r3, [pc, #176]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007bac:	220c      	movs	r2, #12
 8007bae:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007bb0:	e006      	b.n	8007bc0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007bb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bb6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007bb8:	e002      	b.n	8007bc0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007bba:	4a28      	ldr	r2, [pc, #160]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007bbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bbe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007bc0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007bc4:	4b25      	ldr	r3, [pc, #148]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007bc6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007bc8:	4b29      	ldr	r3, [pc, #164]	@ (8007c70 <RadioSetTxConfig+0x220>)
 8007bca:	781a      	ldrb	r2, [r3, #0]
 8007bcc:	4b23      	ldr	r3, [pc, #140]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007bce:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007bd0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007bd4:	4b21      	ldr	r3, [pc, #132]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007bd6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007bda:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007bde:	4b1f      	ldr	r3, [pc, #124]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007be0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8007be4:	f000 fabd 	bl	8008162 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007be8:	2001      	movs	r0, #1
 8007bea:	f7ff fc51 	bl	8007490 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007bee:	481c      	ldr	r0, [pc, #112]	@ (8007c60 <RadioSetTxConfig+0x210>)
 8007bf0:	f002 f8ba 	bl	8009d68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007bf4:	481b      	ldr	r0, [pc, #108]	@ (8007c64 <RadioSetTxConfig+0x214>)
 8007bf6:	f002 f985 	bl	8009f04 <SUBGRF_SetPacketParams>
            break;
 8007bfa:	e012      	b.n	8007c22 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007bfc:	2004      	movs	r0, #4
 8007bfe:	f7ff fc47 	bl	8007490 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007c02:	4b16      	ldr	r3, [pc, #88]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007c0a:	4a14      	ldr	r2, [pc, #80]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007c10:	4b12      	ldr	r3, [pc, #72]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007c12:	2216      	movs	r2, #22
 8007c14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c18:	4811      	ldr	r0, [pc, #68]	@ (8007c60 <RadioSetTxConfig+0x210>)
 8007c1a:	f002 f8a5 	bl	8009d68 <SUBGRF_SetModulationParams>
            break;
 8007c1e:	e000      	b.n	8007c22 <RadioSetTxConfig+0x1d2>
            break;
 8007c20:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007c22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f002 fbe8 	bl	800a3fc <SUBGRF_SetRfTxPower>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007c32:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007c36:	210e      	movs	r1, #14
 8007c38:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007c3c:	f002 faa8 	bl	800a190 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007c40:	4b06      	ldr	r3, [pc, #24]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007c42:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007c46:	4618      	mov	r0, r3
 8007c48:	f002 fdb7 	bl	800a7ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007c4c:	4a03      	ldr	r2, [pc, #12]	@ (8007c5c <RadioSetTxConfig+0x20c>)
 8007c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c50:	6053      	str	r3, [r2, #4]
}
 8007c52:	bf00      	nop
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000288 	.word	0x20000288
 8007c60:	200002c0 	.word	0x200002c0
 8007c64:	20000296 	.word	0x20000296
 8007c68:	0800be34 	.word	0x0800be34
 8007c6c:	0800c0bc 	.word	0x0800c0bc
 8007c70:	20000008 	.word	0x20000008

08007c74 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
    return true;
 8007c7c:	2301      	movs	r3, #1
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr

08007c88 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	2b0a      	cmp	r3, #10
 8007c9a:	d83e      	bhi.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
 8007c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	08007ce1 	.word	0x08007ce1
 8007cac:	08007cf1 	.word	0x08007cf1
 8007cb0:	08007d01 	.word	0x08007d01
 8007cb4:	08007d09 	.word	0x08007d09
 8007cb8:	08007d0f 	.word	0x08007d0f
 8007cbc:	08007d15 	.word	0x08007d15
 8007cc0:	08007d1b 	.word	0x08007d1b
 8007cc4:	08007cd9 	.word	0x08007cd9
 8007cc8:	08007ce9 	.word	0x08007ce9
 8007ccc:	08007cf9 	.word	0x08007cf9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007cd0:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8007cd4:	60fb      	str	r3, [r7, #12]
        break;
 8007cd6:	e020      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007cd8:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8007cdc:	60fb      	str	r3, [r7, #12]
        break;
 8007cde:	e01c      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007ce0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8007ce4:	60fb      	str	r3, [r7, #12]
        break;
 8007ce6:	e018      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007ce8:	f245 1361 	movw	r3, #20833	@ 0x5161
 8007cec:	60fb      	str	r3, [r7, #12]
        break;
 8007cee:	e014      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007cf0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8007cf4:	60fb      	str	r3, [r7, #12]
        break;
 8007cf6:	e010      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007cf8:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8007cfc:	60fb      	str	r3, [r7, #12]
        break;
 8007cfe:	e00c      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007d00:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007d04:	60fb      	str	r3, [r7, #12]
        break;
 8007d06:	e008      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007d08:	4b07      	ldr	r3, [pc, #28]	@ (8007d28 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007d0a:	60fb      	str	r3, [r7, #12]
        break;
 8007d0c:	e005      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007d0e:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <RadioGetLoRaBandwidthInHz+0xa4>)
 8007d10:	60fb      	str	r3, [r7, #12]
        break;
 8007d12:	e002      	b.n	8007d1a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007d14:	4b06      	ldr	r3, [pc, #24]	@ (8007d30 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007d16:	60fb      	str	r3, [r7, #12]
        break;
 8007d18:	bf00      	nop
    }

    return bandwidthInHz;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	0001e848 	.word	0x0001e848
 8007d2c:	0003d090 	.word	0x0003d090
 8007d30:	0007a120 	.word	0x0007a120

08007d34 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	70fb      	strb	r3, [r7, #3]
 8007d46:	460b      	mov	r3, r1
 8007d48:	803b      	strh	r3, [r7, #0]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007d4e:	883b      	ldrh	r3, [r7, #0]
 8007d50:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007d52:	78ba      	ldrb	r2, [r7, #2]
 8007d54:	f082 0201 	eor.w	r2, r2, #1
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	d001      	beq.n	8007d62 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007d5e:	2208      	movs	r2, #8
 8007d60:	e000      	b.n	8007d64 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007d62:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007d64:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007d66:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007d6a:	7c3b      	ldrb	r3, [r7, #16]
 8007d6c:	7d39      	ldrb	r1, [r7, #20]
 8007d6e:	2900      	cmp	r1, #0
 8007d70:	d001      	beq.n	8007d76 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007d72:	2102      	movs	r1, #2
 8007d74:	e000      	b.n	8007d78 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007d76:	2100      	movs	r1, #0
 8007d78:	440b      	add	r3, r1
 8007d7a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007d7c:	4413      	add	r3, r2
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b08b      	sub	sp, #44	@ 0x2c
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4611      	mov	r1, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	460b      	mov	r3, r1
 8007d98:	71fb      	strb	r3, [r7, #7]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	3304      	adds	r3, #4
 8007da2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b05      	cmp	r3, #5
 8007dae:	d002      	beq.n	8007db6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b06      	cmp	r3, #6
 8007db4:	d104      	bne.n	8007dc0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007db6:	88bb      	ldrh	r3, [r7, #4]
 8007db8:	2b0b      	cmp	r3, #11
 8007dba:	d801      	bhi.n	8007dc0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d105      	bne.n	8007dd2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b0b      	cmp	r3, #11
 8007dca:	d008      	beq.n	8007dde <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b0c      	cmp	r3, #12
 8007dd0:	d005      	beq.n	8007dde <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b0c      	cmp	r3, #12
 8007ddc:	d102      	bne.n	8007de4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007dde:	2301      	movs	r3, #1
 8007de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007de4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007de8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007dea:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	d001      	beq.n	8007df6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007df2:	2210      	movs	r2, #16
 8007df4:	e000      	b.n	8007df8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007df6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007df8:	4413      	add	r3, r2
 8007dfa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007e00:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007e02:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	d001      	beq.n	8007e0e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	e000      	b.n	8007e10 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007e0e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007e10:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007e12:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b06      	cmp	r3, #6
 8007e18:	d803      	bhi.n	8007e22 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	623b      	str	r3, [r7, #32]
 8007e20:	e00e      	b.n	8007e40 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	3308      	adds	r3, #8
 8007e26:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3b02      	subs	r3, #2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	623b      	str	r3, [r7, #32]
 8007e38:	e002      	b.n	8007e40 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	da01      	bge.n	8007e4a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	4413      	add	r3, r2
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	fb03 f202 	mul.w	r2, r3, r2
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	4413      	add	r3, r2
    int32_t intermediate =
 8007e62:	330c      	adds	r3, #12
 8007e64:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b06      	cmp	r3, #6
 8007e6a:	d802      	bhi.n	8007e72 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	3b02      	subs	r3, #2
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	372c      	adds	r7, #44	@ 0x2c
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
	...

08007e8c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	@ 0x28
 8007e90:	af04      	add	r7, sp, #16
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	461a      	mov	r2, r3
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <RadioTimeOnAir+0x28>
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d017      	beq.n	8007ee2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007eb2:	e035      	b.n	8007f20 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007eb4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8007eb8:	8c3a      	ldrh	r2, [r7, #32]
 8007eba:	7bb9      	ldrb	r1, [r7, #14]
 8007ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4603      	mov	r3, r0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff ff32 	bl	8007d34 <RadioGetGfskTimeOnAirNumerator>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ed6:	fb02 f303 	mul.w	r3, r2, r3
 8007eda:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	613b      	str	r3, [r7, #16]
        break;
 8007ee0:	e01e      	b.n	8007f20 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007ee2:	8c39      	ldrh	r1, [r7, #32]
 8007ee4:	7bba      	ldrb	r2, [r7, #14]
 8007ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007eea:	9302      	str	r3, [sp, #8]
 8007eec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	68b8      	ldr	r0, [r7, #8]
 8007efe:	f7ff ff43 	bl	8007d88 <RadioGetLoRaTimeOnAirNumerator>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f38 <RadioTimeOnAir+0xac>)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4413      	add	r3, r2
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff feb6 	bl	8007c88 <RadioGetLoRaBandwidthInHz>
 8007f1c:	6138      	str	r0, [r7, #16]
        break;
 8007f1e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	4413      	add	r3, r2
 8007f26:	1e5a      	subs	r2, r3, #1
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	0800c0bc 	.word	0x0800c0bc

08007f3c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f240 2101 	movw	r1, #513	@ 0x201
 8007f50:	f240 2001 	movw	r0, #513	@ 0x201
 8007f54:	f001 fd72 	bl	8009a3c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007f58:	4b73      	ldr	r3, [pc, #460]	@ (8008128 <RadioSend+0x1ec>)
 8007f5a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007f5e:	2101      	movs	r1, #1
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 fa23 	bl	800a3ac <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007f66:	4b70      	ldr	r3, [pc, #448]	@ (8008128 <RadioSend+0x1ec>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d112      	bne.n	8007f94 <RadioSend+0x58>
 8007f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8008128 <RadioSend+0x1ec>)
 8007f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f74:	2b06      	cmp	r3, #6
 8007f76:	d10d      	bne.n	8007f94 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007f78:	f640 0089 	movw	r0, #2185	@ 0x889
 8007f7c:	f002 f92a 	bl	800a1d4 <SUBGRF_ReadRegister>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f023 0304 	bic.w	r3, r3, #4
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	4619      	mov	r1, r3
 8007f8a:	f640 0089 	movw	r0, #2185	@ 0x889
 8007f8e:	f002 f8ff 	bl	800a190 <SUBGRF_WriteRegister>
 8007f92:	e00c      	b.n	8007fae <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007f94:	f640 0089 	movw	r0, #2185	@ 0x889
 8007f98:	f002 f91c 	bl	800a1d4 <SUBGRF_ReadRegister>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f043 0304 	orr.w	r3, r3, #4
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	f640 0089 	movw	r0, #2185	@ 0x889
 8007faa:	f002 f8f1 	bl	800a190 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007fae:	4b5e      	ldr	r3, [pc, #376]	@ (8008128 <RadioSend+0x1ec>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	f200 80a8 	bhi.w	8008108 <RadioSend+0x1cc>
 8007fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc0 <RadioSend+0x84>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fef 	.word	0x08007fef
 8007fc4:	08007fd5 	.word	0x08007fd5
 8007fc8:	08007fef 	.word	0x08007fef
 8007fcc:	08008051 	.word	0x08008051
 8007fd0:	08008071 	.word	0x08008071
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007fd4:	4a54      	ldr	r2, [pc, #336]	@ (8008128 <RadioSend+0x1ec>)
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007fda:	4854      	ldr	r0, [pc, #336]	@ (800812c <RadioSend+0x1f0>)
 8007fdc:	f001 ff92 	bl	8009f04 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 fa3e 	bl	8009468 <SUBGRF_SendPayload>
            break;
 8007fec:	e08d      	b.n	800810a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007fee:	f002 fbd6 	bl	800a79e <RFW_Is_Init>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d11e      	bne.n	8008036 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007ff8:	f107 020d 	add.w	r2, r7, #13
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f002 fbe4 	bl	800a7ce <RFW_TransmitInit>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10c      	bne.n	8008026 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800800c:	7b7a      	ldrb	r2, [r7, #13]
 800800e:	4b46      	ldr	r3, [pc, #280]	@ (8008128 <RadioSend+0x1ec>)
 8008010:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008012:	4846      	ldr	r0, [pc, #280]	@ (800812c <RadioSend+0x1f0>)
 8008014:	f001 ff76 	bl	8009f04 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008018:	7b7b      	ldrb	r3, [r7, #13]
 800801a:	2200      	movs	r2, #0
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fa22 	bl	8009468 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008024:	e071      	b.n	800810a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8008026:	4b42      	ldr	r3, [pc, #264]	@ (8008130 <RadioSend+0x1f4>)
 8008028:	2201      	movs	r2, #1
 800802a:	2100      	movs	r1, #0
 800802c:	2002      	movs	r0, #2
 800802e:	f003 fc39 	bl	800b8a4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8008032:	2303      	movs	r3, #3
 8008034:	e073      	b.n	800811e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008036:	4a3c      	ldr	r2, [pc, #240]	@ (8008128 <RadioSend+0x1ec>)
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800803c:	483b      	ldr	r0, [pc, #236]	@ (800812c <RadioSend+0x1f0>)
 800803e:	f001 ff61 	bl	8009f04 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	2200      	movs	r2, #0
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 fa0d 	bl	8009468 <SUBGRF_SendPayload>
            break;
 800804e:	e05c      	b.n	800810a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008050:	4b35      	ldr	r3, [pc, #212]	@ (8008128 <RadioSend+0x1ec>)
 8008052:	2202      	movs	r2, #2
 8008054:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008056:	4a34      	ldr	r2, [pc, #208]	@ (8008128 <RadioSend+0x1ec>)
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800805c:	4833      	ldr	r0, [pc, #204]	@ (800812c <RadioSend+0x1f0>)
 800805e:	f001 ff51 	bl	8009f04 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	2200      	movs	r2, #0
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f9fd 	bl	8009468 <SUBGRF_SendPayload>
            break;
 800806e:	e04c      	b.n	800810a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	461a      	mov	r2, r3
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	482f      	ldr	r0, [pc, #188]	@ (8008134 <RadioSend+0x1f8>)
 8008078:	f000 fcca 	bl	8008a10 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800807c:	4b2a      	ldr	r3, [pc, #168]	@ (8008128 <RadioSend+0x1ec>)
 800807e:	2202      	movs	r2, #2
 8008080:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	3301      	adds	r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	4b27      	ldr	r3, [pc, #156]	@ (8008128 <RadioSend+0x1ec>)
 800808a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800808c:	4827      	ldr	r0, [pc, #156]	@ (800812c <RadioSend+0x1f0>)
 800808e:	f001 ff39 	bl	8009f04 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008092:	2100      	movs	r1, #0
 8008094:	20f1      	movs	r0, #241	@ 0xf1
 8008096:	f000 f965 	bl	8008364 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800809a:	2100      	movs	r1, #0
 800809c:	20f0      	movs	r0, #240	@ 0xf0
 800809e:	f000 f961 	bl	8008364 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80080a2:	4b21      	ldr	r3, [pc, #132]	@ (8008128 <RadioSend+0x1ec>)
 80080a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080a6:	2b64      	cmp	r3, #100	@ 0x64
 80080a8:	d108      	bne.n	80080bc <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80080aa:	2170      	movs	r1, #112	@ 0x70
 80080ac:	20f3      	movs	r0, #243	@ 0xf3
 80080ae:	f000 f959 	bl	8008364 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80080b2:	211d      	movs	r1, #29
 80080b4:	20f2      	movs	r0, #242	@ 0xf2
 80080b6:	f000 f955 	bl	8008364 <RadioWrite>
 80080ba:	e007      	b.n	80080cc <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80080bc:	21e1      	movs	r1, #225	@ 0xe1
 80080be:	20f3      	movs	r0, #243	@ 0xf3
 80080c0:	f000 f950 	bl	8008364 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80080c4:	2104      	movs	r1, #4
 80080c6:	20f2      	movs	r0, #242	@ 0xf2
 80080c8:	f000 f94c 	bl	8008364 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	3302      	adds	r3, #2
 80080d6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80080d8:	89fb      	ldrh	r3, [r7, #14]
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	b29b      	uxth	r3, r3
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	4619      	mov	r1, r3
 80080e2:	20f4      	movs	r0, #244	@ 0xf4
 80080e4:	f000 f93e 	bl	8008364 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	20f5      	movs	r0, #245	@ 0xf5
 80080f0:	f000 f938 	bl	8008364 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	3301      	adds	r3, #1
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80080fe:	4619      	mov	r1, r3
 8008100:	480c      	ldr	r0, [pc, #48]	@ (8008134 <RadioSend+0x1f8>)
 8008102:	f001 f9b1 	bl	8009468 <SUBGRF_SendPayload>
            break;
 8008106:	e000      	b.n	800810a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008108:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800810a:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <RadioSend+0x1ec>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	4619      	mov	r1, r3
 8008110:	4809      	ldr	r0, [pc, #36]	@ (8008138 <RadioSend+0x1fc>)
 8008112:	f003 fa3f 	bl	800b594 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008116:	4808      	ldr	r0, [pc, #32]	@ (8008138 <RadioSend+0x1fc>)
 8008118:	f003 f95e 	bl	800b3d8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000288 	.word	0x20000288
 800812c:	20000296 	.word	0x20000296
 8008130:	0800be3c 	.word	0x0800be3c
 8008134:	20000184 	.word	0x20000184
 8008138:	200002e4 	.word	0x200002e4

0800813c <RadioSleep>:

static void RadioSleep( void )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008142:	2300      	movs	r3, #0
 8008144:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008146:	793b      	ldrb	r3, [r7, #4]
 8008148:	f043 0304 	orr.w	r3, r3, #4
 800814c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800814e:	7938      	ldrb	r0, [r7, #4]
 8008150:	f001 fa66 	bl	8009620 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008154:	2002      	movs	r0, #2
 8008156:	f7f8 fcf5 	bl	8000b44 <HAL_Delay>
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <RadioStandby>:

static void RadioStandby( void )
{
 8008162:	b580      	push	{r7, lr}
 8008164:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008166:	2000      	movs	r0, #0
 8008168:	f001 fa8e 	bl	8009688 <SUBGRF_SetStandby>
}
 800816c:	bf00      	nop
 800816e:	bd80      	pop	{r7, pc}

08008170 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008178:	f002 fb11 	bl	800a79e <RFW_Is_Init>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d102      	bne.n	8008188 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008182:	f002 fb34 	bl	800a7ee <RFW_ReceiveInit>
 8008186:	e007      	b.n	8008198 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008188:	2300      	movs	r3, #0
 800818a:	2200      	movs	r2, #0
 800818c:	f240 2162 	movw	r1, #610	@ 0x262
 8008190:	f240 2062 	movw	r0, #610	@ 0x262
 8008194:	f001 fc52 	bl	8009a3c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d006      	beq.n	80081ac <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4811      	ldr	r0, [pc, #68]	@ (80081e8 <RadioRx+0x78>)
 80081a2:	f003 f9f7 	bl	800b594 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80081a6:	4810      	ldr	r0, [pc, #64]	@ (80081e8 <RadioRx+0x78>)
 80081a8:	f003 f916 	bl	800b3d8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80081ac:	4b0f      	ldr	r3, [pc, #60]	@ (80081ec <RadioRx+0x7c>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80081b2:	4b0e      	ldr	r3, [pc, #56]	@ (80081ec <RadioRx+0x7c>)
 80081b4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80081b8:	2100      	movs	r1, #0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f002 f8f6 	bl	800a3ac <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80081c0:	4b0a      	ldr	r3, [pc, #40]	@ (80081ec <RadioRx+0x7c>)
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80081c8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80081cc:	f001 fa98 	bl	8009700 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80081d0:	e005      	b.n	80081de <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80081d2:	4b06      	ldr	r3, [pc, #24]	@ (80081ec <RadioRx+0x7c>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	019b      	lsls	r3, r3, #6
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 fa91 	bl	8009700 <SUBGRF_SetRx>
}
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	200002fc 	.word	0x200002fc
 80081ec:	20000288 	.word	0x20000288

080081f0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80081f8:	f002 fad1 	bl	800a79e <RFW_Is_Init>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d102      	bne.n	8008208 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008202:	f002 faf4 	bl	800a7ee <RFW_ReceiveInit>
 8008206:	e007      	b.n	8008218 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008208:	2300      	movs	r3, #0
 800820a:	2200      	movs	r2, #0
 800820c:	f240 2162 	movw	r1, #610	@ 0x262
 8008210:	f240 2062 	movw	r0, #610	@ 0x262
 8008214:	f001 fc12 	bl	8009a3c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	4811      	ldr	r0, [pc, #68]	@ (8008268 <RadioRxBoosted+0x78>)
 8008222:	f003 f9b7 	bl	800b594 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008226:	4810      	ldr	r0, [pc, #64]	@ (8008268 <RadioRxBoosted+0x78>)
 8008228:	f003 f8d6 	bl	800b3d8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800822c:	4b0f      	ldr	r3, [pc, #60]	@ (800826c <RadioRxBoosted+0x7c>)
 800822e:	2200      	movs	r2, #0
 8008230:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008232:	4b0e      	ldr	r3, [pc, #56]	@ (800826c <RadioRxBoosted+0x7c>)
 8008234:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f002 f8b6 	bl	800a3ac <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008240:	4b0a      	ldr	r3, [pc, #40]	@ (800826c <RadioRxBoosted+0x7c>)
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008248:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800824c:	f001 fa78 	bl	8009740 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008250:	e005      	b.n	800825e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008252:	4b06      	ldr	r3, [pc, #24]	@ (800826c <RadioRxBoosted+0x7c>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	019b      	lsls	r3, r3, #6
 8008258:	4618      	mov	r0, r3
 800825a:	f001 fa71 	bl	8009740 <SUBGRF_SetRxBoosted>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	200002fc 	.word	0x200002fc
 800826c:	20000288 	.word	0x20000288

08008270 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	005a      	lsls	r2, r3, #1
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	4413      	add	r3, r2
 8008282:	4a0c      	ldr	r2, [pc, #48]	@ (80082b4 <RadioSetRxDutyCycle+0x44>)
 8008284:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800828e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008292:	f001 fbd3 	bl	8009a3c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008296:	4b07      	ldr	r3, [pc, #28]	@ (80082b4 <RadioSetRxDutyCycle+0x44>)
 8008298:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 f884 	bl	800a3ac <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 fa6e 	bl	8009788 <SUBGRF_SetRxDutyCycle>
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000288 	.word	0x20000288

080082b8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80082bc:	4b09      	ldr	r3, [pc, #36]	@ (80082e4 <RadioStartCad+0x2c>)
 80082be:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80082c2:	2100      	movs	r1, #0
 80082c4:	4618      	mov	r0, r3
 80082c6:	f002 f871 	bl	800a3ac <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80082ca:	2300      	movs	r3, #0
 80082cc:	2200      	movs	r2, #0
 80082ce:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80082d2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80082d6:	f001 fbb1 	bl	8009a3c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80082da:	f001 fa81 	bl	80097e0 <SUBGRF_SetCad>
}
 80082de:	bf00      	nop
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000288 	.word	0x20000288

080082e8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	4613      	mov	r3, r2
 80082f6:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80082f8:	883b      	ldrh	r3, [r7, #0]
 80082fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 fbf5 	bl	8009af4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800830a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800830e:	4618      	mov	r0, r3
 8008310:	f002 f874 	bl	800a3fc <SUBGRF_SetRfTxPower>
 8008314:	4603      	mov	r3, r0
 8008316:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008318:	210e      	movs	r1, #14
 800831a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800831e:	f001 ff37 	bl	800a190 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	2101      	movs	r1, #1
 8008326:	4618      	mov	r0, r3
 8008328:	f002 f840 	bl	800a3ac <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800832c:	f001 fa66 	bl	80097fc <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008330:	68f9      	ldr	r1, [r7, #12]
 8008332:	4805      	ldr	r0, [pc, #20]	@ (8008348 <RadioSetTxContinuousWave+0x60>)
 8008334:	f003 f92e 	bl	800b594 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008338:	4803      	ldr	r0, [pc, #12]	@ (8008348 <RadioSetTxContinuousWave+0x60>)
 800833a:	f003 f84d 	bl	800b3d8 <UTIL_TIMER_Start>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	200002e4 	.word	0x200002e4

0800834c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008356:	f001 fe88 	bl	800a06a <SUBGRF_GetRssiInst>
 800835a:	4603      	mov	r3, r0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	460a      	mov	r2, r1
 800836e:	80fb      	strh	r3, [r7, #6]
 8008370:	4613      	mov	r3, r2
 8008372:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008374:	797a      	ldrb	r2, [r7, #5]
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f001 ff08 	bl	800a190 <SUBGRF_WriteRegister>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	4618      	mov	r0, r3
 8008396:	f001 ff1d 	bl	800a1d4 <SUBGRF_ReadRegister>
 800839a:	4603      	mov	r3, r0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	80fb      	strh	r3, [r7, #6]
 80083b0:	4613      	mov	r3, r2
 80083b2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80083b4:	797b      	ldrb	r3, [r7, #5]
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	88fb      	ldrh	r3, [r7, #6]
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 ff29 	bl	800a214 <SUBGRF_WriteRegisters>
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	4603      	mov	r3, r0
 80083d2:	6039      	str	r1, [r7, #0]
 80083d4:	80fb      	strh	r3, [r7, #6]
 80083d6:	4613      	mov	r3, r2
 80083d8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80083da:	797b      	ldrb	r3, [r7, #5]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 ff38 	bl	800a258 <SUBGRF_ReadRegisters>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	460a      	mov	r2, r1
 80083fa:	71fb      	strb	r3, [r7, #7]
 80083fc:	4613      	mov	r3, r2
 80083fe:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d10a      	bne.n	800841c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008406:	4a0e      	ldr	r2, [pc, #56]	@ (8008440 <RadioSetMaxPayloadLength+0x50>)
 8008408:	79bb      	ldrb	r3, [r7, #6]
 800840a:	7013      	strb	r3, [r2, #0]
 800840c:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <RadioSetMaxPayloadLength+0x50>)
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	4b0c      	ldr	r3, [pc, #48]	@ (8008444 <RadioSetMaxPayloadLength+0x54>)
 8008412:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008414:	480c      	ldr	r0, [pc, #48]	@ (8008448 <RadioSetMaxPayloadLength+0x58>)
 8008416:	f001 fd75 	bl	8009f04 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800841a:	e00d      	b.n	8008438 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800841c:	4b09      	ldr	r3, [pc, #36]	@ (8008444 <RadioSetMaxPayloadLength+0x54>)
 800841e:	7d5b      	ldrb	r3, [r3, #21]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d109      	bne.n	8008438 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008424:	4a06      	ldr	r2, [pc, #24]	@ (8008440 <RadioSetMaxPayloadLength+0x50>)
 8008426:	79bb      	ldrb	r3, [r7, #6]
 8008428:	7013      	strb	r3, [r2, #0]
 800842a:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <RadioSetMaxPayloadLength+0x50>)
 800842c:	781a      	ldrb	r2, [r3, #0]
 800842e:	4b05      	ldr	r3, [pc, #20]	@ (8008444 <RadioSetMaxPayloadLength+0x54>)
 8008430:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008432:	4805      	ldr	r0, [pc, #20]	@ (8008448 <RadioSetMaxPayloadLength+0x58>)
 8008434:	f001 fd66 	bl	8009f04 <SUBGRF_SetPacketParams>
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000008 	.word	0x20000008
 8008444:	20000288 	.word	0x20000288
 8008448:	20000296 	.word	0x20000296

0800844c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008456:	4a13      	ldr	r2, [pc, #76]	@ (80084a4 <RadioSetPublicNetwork+0x58>)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	7313      	strb	r3, [r2, #12]
 800845c:	4b11      	ldr	r3, [pc, #68]	@ (80084a4 <RadioSetPublicNetwork+0x58>)
 800845e:	7b1a      	ldrb	r2, [r3, #12]
 8008460:	4b10      	ldr	r3, [pc, #64]	@ (80084a4 <RadioSetPublicNetwork+0x58>)
 8008462:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008464:	2001      	movs	r0, #1
 8008466:	f7ff f813 	bl	8007490 <RadioSetModem>
    if( enable == true )
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008470:	2134      	movs	r1, #52	@ 0x34
 8008472:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8008476:	f001 fe8b 	bl	800a190 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800847a:	2144      	movs	r1, #68	@ 0x44
 800847c:	f240 7041 	movw	r0, #1857	@ 0x741
 8008480:	f001 fe86 	bl	800a190 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008484:	e009      	b.n	800849a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008486:	2114      	movs	r1, #20
 8008488:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800848c:	f001 fe80 	bl	800a190 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008490:	2124      	movs	r1, #36	@ 0x24
 8008492:	f240 7041 	movw	r0, #1857	@ 0x741
 8008496:	f001 fe7b 	bl	800a190 <SUBGRF_WriteRegister>
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000288 	.word	0x20000288

080084a8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80084ac:	f001 ffda 	bl	800a464 <SUBGRF_GetRadioWakeUpTime>
 80084b0:	4603      	mov	r3, r0
 80084b2:	3303      	adds	r3, #3
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80084c0:	f000 f80e 	bl	80084e0 <RadioOnTxTimeoutProcess>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80084d4:	f000 f818 	bl	8008508 <RadioOnRxTimeoutProcess>
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80084e4:	4b07      	ldr	r3, [pc, #28]	@ (8008504 <RadioOnTxTimeoutProcess+0x24>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d008      	beq.n	80084fe <RadioOnTxTimeoutProcess+0x1e>
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <RadioOnTxTimeoutProcess+0x24>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80084f6:	4b03      	ldr	r3, [pc, #12]	@ (8008504 <RadioOnTxTimeoutProcess+0x24>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	4798      	blx	r3
    }
}
 80084fe:	bf00      	nop
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20000284 	.word	0x20000284

08008508 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800850c:	4b07      	ldr	r3, [pc, #28]	@ (800852c <RadioOnRxTimeoutProcess+0x24>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <RadioOnRxTimeoutProcess+0x1e>
 8008514:	4b05      	ldr	r3, [pc, #20]	@ (800852c <RadioOnRxTimeoutProcess+0x24>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800851e:	4b03      	ldr	r3, [pc, #12]	@ (800852c <RadioOnRxTimeoutProcess+0x24>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4798      	blx	r3
    }
}
 8008526:	bf00      	nop
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000284 	.word	0x20000284

08008530 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800853a:	4a05      	ldr	r2, [pc, #20]	@ (8008550 <RadioOnDioIrq+0x20>)
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8008542:	f000 f807 	bl	8008554 <RadioIrqProcess>
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000288 	.word	0x20000288

08008554 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008554:	b5b0      	push	{r4, r5, r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008562:	4ba8      	ldr	r3, [pc, #672]	@ (8008804 <RadioIrqProcess+0x2b0>)
 8008564:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800856c:	f000 810d 	beq.w	800878a <RadioIrqProcess+0x236>
 8008570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008574:	f300 81e8 	bgt.w	8008948 <RadioIrqProcess+0x3f4>
 8008578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800857c:	f000 80f1 	beq.w	8008762 <RadioIrqProcess+0x20e>
 8008580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008584:	f300 81e0 	bgt.w	8008948 <RadioIrqProcess+0x3f4>
 8008588:	2b80      	cmp	r3, #128	@ 0x80
 800858a:	f000 80d6 	beq.w	800873a <RadioIrqProcess+0x1e6>
 800858e:	2b80      	cmp	r3, #128	@ 0x80
 8008590:	f300 81da 	bgt.w	8008948 <RadioIrqProcess+0x3f4>
 8008594:	2b20      	cmp	r3, #32
 8008596:	dc49      	bgt.n	800862c <RadioIrqProcess+0xd8>
 8008598:	2b00      	cmp	r3, #0
 800859a:	f340 81d5 	ble.w	8008948 <RadioIrqProcess+0x3f4>
 800859e:	3b01      	subs	r3, #1
 80085a0:	2b1f      	cmp	r3, #31
 80085a2:	f200 81d1 	bhi.w	8008948 <RadioIrqProcess+0x3f4>
 80085a6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <RadioIrqProcess+0x58>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	08008635 	.word	0x08008635
 80085b0:	0800866f 	.word	0x0800866f
 80085b4:	08008949 	.word	0x08008949
 80085b8:	08008825 	.word	0x08008825
 80085bc:	08008949 	.word	0x08008949
 80085c0:	08008949 	.word	0x08008949
 80085c4:	08008949 	.word	0x08008949
 80085c8:	080088a1 	.word	0x080088a1
 80085cc:	08008949 	.word	0x08008949
 80085d0:	08008949 	.word	0x08008949
 80085d4:	08008949 	.word	0x08008949
 80085d8:	08008949 	.word	0x08008949
 80085dc:	08008949 	.word	0x08008949
 80085e0:	08008949 	.word	0x08008949
 80085e4:	08008949 	.word	0x08008949
 80085e8:	080088bd 	.word	0x080088bd
 80085ec:	08008949 	.word	0x08008949
 80085f0:	08008949 	.word	0x08008949
 80085f4:	08008949 	.word	0x08008949
 80085f8:	08008949 	.word	0x08008949
 80085fc:	08008949 	.word	0x08008949
 8008600:	08008949 	.word	0x08008949
 8008604:	08008949 	.word	0x08008949
 8008608:	08008949 	.word	0x08008949
 800860c:	08008949 	.word	0x08008949
 8008610:	08008949 	.word	0x08008949
 8008614:	08008949 	.word	0x08008949
 8008618:	08008949 	.word	0x08008949
 800861c:	08008949 	.word	0x08008949
 8008620:	08008949 	.word	0x08008949
 8008624:	08008949 	.word	0x08008949
 8008628:	080088cb 	.word	0x080088cb
 800862c:	2b40      	cmp	r3, #64	@ 0x40
 800862e:	f000 816d 	beq.w	800890c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008632:	e189      	b.n	8008948 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8008634:	4874      	ldr	r0, [pc, #464]	@ (8008808 <RadioIrqProcess+0x2b4>)
 8008636:	f002 ff3d 	bl	800b4b4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800863a:	2000      	movs	r0, #0
 800863c:	f001 f824 	bl	8009688 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008640:	f002 f8b4 	bl	800a7ac <RFW_Is_LongPacketModeEnabled>
 8008644:	4603      	mov	r3, r0
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800864a:	f002 f8d8 	bl	800a7fe <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800864e:	4b6f      	ldr	r3, [pc, #444]	@ (800880c <RadioIrqProcess+0x2b8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 817a 	beq.w	800894c <RadioIrqProcess+0x3f8>
 8008658:	4b6c      	ldr	r3, [pc, #432]	@ (800880c <RadioIrqProcess+0x2b8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8174 	beq.w	800894c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8008664:	4b69      	ldr	r3, [pc, #420]	@ (800880c <RadioIrqProcess+0x2b8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4798      	blx	r3
        break;
 800866c:	e16e      	b.n	800894c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 800866e:	4868      	ldr	r0, [pc, #416]	@ (8008810 <RadioIrqProcess+0x2bc>)
 8008670:	f002 ff20 	bl	800b4b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008674:	4b63      	ldr	r3, [pc, #396]	@ (8008804 <RadioIrqProcess+0x2b0>)
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	f083 0301 	eor.w	r3, r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d014      	beq.n	80086ac <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008682:	2000      	movs	r0, #0
 8008684:	f001 f800 	bl	8009688 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008688:	2100      	movs	r1, #0
 800868a:	f640 1002 	movw	r0, #2306	@ 0x902
 800868e:	f001 fd7f 	bl	800a190 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008692:	f640 1044 	movw	r0, #2372	@ 0x944
 8008696:	f001 fd9d 	bl	800a1d4 <SUBGRF_ReadRegister>
 800869a:	4603      	mov	r3, r0
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	f640 1044 	movw	r0, #2372	@ 0x944
 80086a8:	f001 fd72 	bl	800a190 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80086ac:	1dfb      	adds	r3, r7, #7
 80086ae:	22ff      	movs	r2, #255	@ 0xff
 80086b0:	4619      	mov	r1, r3
 80086b2:	4858      	ldr	r0, [pc, #352]	@ (8008814 <RadioIrqProcess+0x2c0>)
 80086b4:	f000 feb6 	bl	8009424 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80086b8:	4857      	ldr	r0, [pc, #348]	@ (8008818 <RadioIrqProcess+0x2c4>)
 80086ba:	f001 fd17 	bl	800a0ec <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80086be:	4b53      	ldr	r3, [pc, #332]	@ (800880c <RadioIrqProcess+0x2b8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 8144 	beq.w	8008950 <RadioIrqProcess+0x3fc>
 80086c8:	4b50      	ldr	r3, [pc, #320]	@ (800880c <RadioIrqProcess+0x2b8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 813e 	beq.w	8008950 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 80086d4:	4b4b      	ldr	r3, [pc, #300]	@ (8008804 <RadioIrqProcess+0x2b0>)
 80086d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10e      	bne.n	80086fc <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80086de:	4b4b      	ldr	r3, [pc, #300]	@ (800880c <RadioIrqProcess+0x2b8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689c      	ldr	r4, [r3, #8]
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	4619      	mov	r1, r3
 80086e8:	4b46      	ldr	r3, [pc, #280]	@ (8008804 <RadioIrqProcess+0x2b0>)
 80086ea:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80086ee:	461a      	mov	r2, r3
 80086f0:	4b44      	ldr	r3, [pc, #272]	@ (8008804 <RadioIrqProcess+0x2b0>)
 80086f2:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80086f6:	4847      	ldr	r0, [pc, #284]	@ (8008814 <RadioIrqProcess+0x2c0>)
 80086f8:	47a0      	blx	r4
                break;
 80086fa:	e01d      	b.n	8008738 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80086fc:	4b41      	ldr	r3, [pc, #260]	@ (8008804 <RadioIrqProcess+0x2b0>)
 80086fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008700:	463a      	mov	r2, r7
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f001 ff9f 	bl	800a648 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800870a:	4b40      	ldr	r3, [pc, #256]	@ (800880c <RadioIrqProcess+0x2b8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689c      	ldr	r4, [r3, #8]
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	4619      	mov	r1, r3
 8008714:	4b3b      	ldr	r3, [pc, #236]	@ (8008804 <RadioIrqProcess+0x2b0>)
 8008716:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 800871a:	4618      	mov	r0, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008722:	4a3e      	ldr	r2, [pc, #248]	@ (800881c <RadioIrqProcess+0x2c8>)
 8008724:	fb82 5203 	smull	r5, r2, r2, r3
 8008728:	1192      	asrs	r2, r2, #6
 800872a:	17db      	asrs	r3, r3, #31
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	b25b      	sxtb	r3, r3
 8008730:	4602      	mov	r2, r0
 8008732:	4838      	ldr	r0, [pc, #224]	@ (8008814 <RadioIrqProcess+0x2c0>)
 8008734:	47a0      	blx	r4
                break;
 8008736:	bf00      	nop
        break;
 8008738:	e10a      	b.n	8008950 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 800873a:	2000      	movs	r0, #0
 800873c:	f000 ffa4 	bl	8009688 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008740:	4b32      	ldr	r3, [pc, #200]	@ (800880c <RadioIrqProcess+0x2b8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8105 	beq.w	8008954 <RadioIrqProcess+0x400>
 800874a:	4b30      	ldr	r3, [pc, #192]	@ (800880c <RadioIrqProcess+0x2b8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 80ff 	beq.w	8008954 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8008756:	4b2d      	ldr	r3, [pc, #180]	@ (800880c <RadioIrqProcess+0x2b8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	2000      	movs	r0, #0
 800875e:	4798      	blx	r3
        break;
 8008760:	e0f8      	b.n	8008954 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8008762:	2000      	movs	r0, #0
 8008764:	f000 ff90 	bl	8009688 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008768:	4b28      	ldr	r3, [pc, #160]	@ (800880c <RadioIrqProcess+0x2b8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 80f3 	beq.w	8008958 <RadioIrqProcess+0x404>
 8008772:	4b26      	ldr	r3, [pc, #152]	@ (800880c <RadioIrqProcess+0x2b8>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 80ed 	beq.w	8008958 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 800877e:	4b23      	ldr	r3, [pc, #140]	@ (800880c <RadioIrqProcess+0x2b8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	2001      	movs	r0, #1
 8008786:	4798      	blx	r3
        break;
 8008788:	e0e6      	b.n	8008958 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800878a:	4b25      	ldr	r3, [pc, #148]	@ (8008820 <RadioIrqProcess+0x2cc>)
 800878c:	2201      	movs	r2, #1
 800878e:	2100      	movs	r1, #0
 8008790:	2002      	movs	r0, #2
 8008792:	f003 f887 	bl	800b8a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008796:	f000 fe2b 	bl	80093f0 <SUBGRF_GetOperatingMode>
 800879a:	4603      	mov	r3, r0
 800879c:	2b04      	cmp	r3, #4
 800879e:	d115      	bne.n	80087cc <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 80087a0:	4819      	ldr	r0, [pc, #100]	@ (8008808 <RadioIrqProcess+0x2b4>)
 80087a2:	f002 fe87 	bl	800b4b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80087a6:	2000      	movs	r0, #0
 80087a8:	f000 ff6e 	bl	8009688 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80087ac:	4b17      	ldr	r3, [pc, #92]	@ (800880c <RadioIrqProcess+0x2b8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 80d3 	beq.w	800895c <RadioIrqProcess+0x408>
 80087b6:	4b15      	ldr	r3, [pc, #84]	@ (800880c <RadioIrqProcess+0x2b8>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 80cd 	beq.w	800895c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <RadioIrqProcess+0x2b8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4798      	blx	r3
        break;
 80087ca:	e0c7      	b.n	800895c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80087cc:	f000 fe10 	bl	80093f0 <SUBGRF_GetOperatingMode>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	f040 80c2 	bne.w	800895c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 80087d8:	480d      	ldr	r0, [pc, #52]	@ (8008810 <RadioIrqProcess+0x2bc>)
 80087da:	f002 fe6b 	bl	800b4b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80087de:	2000      	movs	r0, #0
 80087e0:	f000 ff52 	bl	8009688 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80087e4:	4b09      	ldr	r3, [pc, #36]	@ (800880c <RadioIrqProcess+0x2b8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 80b7 	beq.w	800895c <RadioIrqProcess+0x408>
 80087ee:	4b07      	ldr	r3, [pc, #28]	@ (800880c <RadioIrqProcess+0x2b8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80b1 	beq.w	800895c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 80087fa:	4b04      	ldr	r3, [pc, #16]	@ (800880c <RadioIrqProcess+0x2b8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	4798      	blx	r3
        break;
 8008802:	e0ab      	b.n	800895c <RadioIrqProcess+0x408>
 8008804:	20000288 	.word	0x20000288
 8008808:	200002e4 	.word	0x200002e4
 800880c:	20000284 	.word	0x20000284
 8008810:	200002fc 	.word	0x200002fc
 8008814:	20000184 	.word	0x20000184
 8008818:	200002ac 	.word	0x200002ac
 800881c:	10624dd3 	.word	0x10624dd3
 8008820:	0800be54 	.word	0x0800be54
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008824:	4b54      	ldr	r3, [pc, #336]	@ (8008978 <RadioIrqProcess+0x424>)
 8008826:	2201      	movs	r2, #1
 8008828:	2100      	movs	r1, #0
 800882a:	2002      	movs	r0, #2
 800882c:	f003 f83a 	bl	800b8a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008830:	4b52      	ldr	r3, [pc, #328]	@ (800897c <RadioIrqProcess+0x428>)
 8008832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 8093 	beq.w	8008960 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800883a:	4a51      	ldr	r2, [pc, #324]	@ (8008980 <RadioIrqProcess+0x42c>)
 800883c:	4b4f      	ldr	r3, [pc, #316]	@ (800897c <RadioIrqProcess+0x428>)
 800883e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	b2db      	uxtb	r3, r3
 8008844:	4619      	mov	r1, r3
 8008846:	f640 1003 	movw	r0, #2307	@ 0x903
 800884a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800884c:	4a4c      	ldr	r2, [pc, #304]	@ (8008980 <RadioIrqProcess+0x42c>)
 800884e:	4b4b      	ldr	r3, [pc, #300]	@ (800897c <RadioIrqProcess+0x428>)
 8008850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	b2db      	uxtb	r3, r3
 8008856:	4619      	mov	r1, r3
 8008858:	f640 1004 	movw	r0, #2308	@ 0x904
 800885c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800885e:	4a48      	ldr	r2, [pc, #288]	@ (8008980 <RadioIrqProcess+0x42c>)
 8008860:	4b46      	ldr	r3, [pc, #280]	@ (800897c <RadioIrqProcess+0x428>)
 8008862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008864:	b2db      	uxtb	r3, r3
 8008866:	4619      	mov	r1, r3
 8008868:	f640 1005 	movw	r0, #2309	@ 0x905
 800886c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800886e:	4c44      	ldr	r4, [pc, #272]	@ (8008980 <RadioIrqProcess+0x42c>)
 8008870:	4b44      	ldr	r3, [pc, #272]	@ (8008984 <RadioIrqProcess+0x430>)
 8008872:	f640 1002 	movw	r0, #2306	@ 0x902
 8008876:	4798      	blx	r3
 8008878:	4603      	mov	r3, r0
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	4619      	mov	r1, r3
 8008882:	f640 1002 	movw	r0, #2306	@ 0x902
 8008886:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8008888:	4b3c      	ldr	r3, [pc, #240]	@ (800897c <RadioIrqProcess+0x428>)
 800888a:	2200      	movs	r2, #0
 800888c:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800888e:	2300      	movs	r3, #0
 8008890:	2200      	movs	r2, #0
 8008892:	f240 2162 	movw	r1, #610	@ 0x262
 8008896:	f240 2062 	movw	r0, #610	@ 0x262
 800889a:	f001 f8cf 	bl	8009a3c <SUBGRF_SetDioIrqParams>
        break;
 800889e:	e05f      	b.n	8008960 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80088a0:	4b39      	ldr	r3, [pc, #228]	@ (8008988 <RadioIrqProcess+0x434>)
 80088a2:	2201      	movs	r2, #1
 80088a4:	2100      	movs	r1, #0
 80088a6:	2002      	movs	r0, #2
 80088a8:	f002 fffc 	bl	800b8a4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80088ac:	f001 ff77 	bl	800a79e <RFW_Is_Init>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d156      	bne.n	8008964 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 80088b6:	f001 ffa8 	bl	800a80a <RFW_ReceivePayload>
        break;
 80088ba:	e053      	b.n	8008964 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80088bc:	4b33      	ldr	r3, [pc, #204]	@ (800898c <RadioIrqProcess+0x438>)
 80088be:	2201      	movs	r2, #1
 80088c0:	2100      	movs	r1, #0
 80088c2:	2002      	movs	r0, #2
 80088c4:	f002 ffee 	bl	800b8a4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80088c8:	e051      	b.n	800896e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 80088ca:	4831      	ldr	r0, [pc, #196]	@ (8008990 <RadioIrqProcess+0x43c>)
 80088cc:	f002 fdf2 	bl	800b4b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80088d0:	4b2a      	ldr	r3, [pc, #168]	@ (800897c <RadioIrqProcess+0x428>)
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	f083 0301 	eor.w	r3, r3, #1
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80088de:	2000      	movs	r0, #0
 80088e0:	f000 fed2 	bl	8009688 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80088e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008994 <RadioIrqProcess+0x440>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d03d      	beq.n	8008968 <RadioIrqProcess+0x414>
 80088ec:	4b29      	ldr	r3, [pc, #164]	@ (8008994 <RadioIrqProcess+0x440>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d038      	beq.n	8008968 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 80088f6:	4b27      	ldr	r3, [pc, #156]	@ (8008994 <RadioIrqProcess+0x440>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80088fe:	4b26      	ldr	r3, [pc, #152]	@ (8008998 <RadioIrqProcess+0x444>)
 8008900:	2201      	movs	r2, #1
 8008902:	2100      	movs	r1, #0
 8008904:	2002      	movs	r0, #2
 8008906:	f002 ffcd 	bl	800b8a4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800890a:	e02d      	b.n	8008968 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800890c:	4b23      	ldr	r3, [pc, #140]	@ (800899c <RadioIrqProcess+0x448>)
 800890e:	2201      	movs	r2, #1
 8008910:	2100      	movs	r1, #0
 8008912:	2002      	movs	r0, #2
 8008914:	f002 ffc6 	bl	800b8a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008918:	4b18      	ldr	r3, [pc, #96]	@ (800897c <RadioIrqProcess+0x428>)
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	f083 0301 	eor.w	r3, r3, #1
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8008926:	2000      	movs	r0, #0
 8008928:	f000 feae 	bl	8009688 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800892c:	4b19      	ldr	r3, [pc, #100]	@ (8008994 <RadioIrqProcess+0x440>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01b      	beq.n	800896c <RadioIrqProcess+0x418>
 8008934:	4b17      	ldr	r3, [pc, #92]	@ (8008994 <RadioIrqProcess+0x440>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d016      	beq.n	800896c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 800893e:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <RadioIrqProcess+0x440>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	4798      	blx	r3
        break;
 8008946:	e011      	b.n	800896c <RadioIrqProcess+0x418>
        break;
 8008948:	bf00      	nop
 800894a:	e010      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 800894c:	bf00      	nop
 800894e:	e00e      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 8008950:	bf00      	nop
 8008952:	e00c      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 8008954:	bf00      	nop
 8008956:	e00a      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 8008958:	bf00      	nop
 800895a:	e008      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 800895c:	bf00      	nop
 800895e:	e006      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 8008960:	bf00      	nop
 8008962:	e004      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 8008964:	bf00      	nop
 8008966:	e002      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 8008968:	bf00      	nop
 800896a:	e000      	b.n	800896e <RadioIrqProcess+0x41a>
        break;
 800896c:	bf00      	nop
    }
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bdb0      	pop	{r4, r5, r7, pc}
 8008976:	bf00      	nop
 8008978:	0800be68 	.word	0x0800be68
 800897c:	20000288 	.word	0x20000288
 8008980:	08008365 	.word	0x08008365
 8008984:	08008389 	.word	0x08008389
 8008988:	0800be74 	.word	0x0800be74
 800898c:	0800be80 	.word	0x0800be80
 8008990:	200002fc 	.word	0x200002fc
 8008994:	20000284 	.word	0x20000284
 8008998:	0800be8c 	.word	0x0800be8c
 800899c:	0800be98 	.word	0x0800be98

080089a0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80089a4:	4b09      	ldr	r3, [pc, #36]	@ (80089cc <RadioTxPrbs+0x2c>)
 80089a6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80089aa:	2101      	movs	r1, #1
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 fcfd 	bl	800a3ac <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80089b2:	4b07      	ldr	r3, [pc, #28]	@ (80089d0 <RadioTxPrbs+0x30>)
 80089b4:	212d      	movs	r1, #45	@ 0x2d
 80089b6:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80089ba:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80089bc:	f000 ff27 	bl	800980e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80089c0:	4804      	ldr	r0, [pc, #16]	@ (80089d4 <RadioTxPrbs+0x34>)
 80089c2:	f000 fe7d 	bl	80096c0 <SUBGRF_SetTx>
}
 80089c6:	bf00      	nop
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20000288 	.word	0x20000288
 80089d0:	08008365 	.word	0x08008365
 80089d4:	000fffff 	.word	0x000fffff

080089d8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80089e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 fd08 	bl	800a3fc <SUBGRF_SetRfTxPower>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80089f0:	210e      	movs	r1, #14
 80089f2:	f640 101f 	movw	r0, #2335	@ 0x91f
 80089f6:	f001 fbcb 	bl	800a190 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	2101      	movs	r1, #1
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 fcd4 	bl	800a3ac <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008a04:	f000 fefa 	bl	80097fc <SUBGRF_SetTxContinuousWave>
}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b089      	sub	sp, #36	@ 0x24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8008a26:	2300      	movs	r3, #0
 8008a28:	61bb      	str	r3, [r7, #24]
 8008a2a:	e011      	b.n	8008a50 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4413      	add	r3, r2
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	440b      	add	r3, r1
 8008a3a:	43d2      	mvns	r2, r2
 8008a3c:	b2d2      	uxtb	r2, r2
 8008a3e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	dbe9      	blt.n	8008a2c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	e049      	b.n	8008af2 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	425a      	negs	r2, r3
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	f002 0207 	and.w	r2, r2, #7
 8008a6a:	bf58      	it	pl
 8008a6c:	4253      	negpl	r3, r2
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f1c3 0307 	rsb	r3, r3, #7
 8008a74:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da00      	bge.n	8008a7e <payload_integration+0x6e>
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	10db      	asrs	r3, r3, #3
 8008a80:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	3301      	adds	r3, #1
 8008a86:	425a      	negs	r2, r3
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	f002 0207 	and.w	r2, r2, #7
 8008a90:	bf58      	it	pl
 8008a92:	4253      	negpl	r3, r2
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f1c3 0307 	rsb	r3, r3, #7
 8008a9a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	da00      	bge.n	8008aa6 <payload_integration+0x96>
 8008aa4:	3307      	adds	r3, #7
 8008aa6:	10db      	asrs	r3, r3, #3
 8008aa8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8008aaa:	7dbb      	ldrb	r3, [r7, #22]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	fa42 f303 	asr.w	r3, r2, r3
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008ac2:	7ffa      	ldrb	r2, [r7, #31]
 8008ac4:	7cfb      	ldrb	r3, [r7, #19]
 8008ac6:	4053      	eors	r3, r2
 8008ac8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008aca:	7d3b      	ldrb	r3, [r7, #20]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b25a      	sxtb	r2, r3
 8008ad4:	7ff9      	ldrb	r1, [r7, #31]
 8008ad6:	7d7b      	ldrb	r3, [r7, #21]
 8008ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	b259      	sxtb	r1, r3
 8008ae2:	7d3b      	ldrb	r3, [r7, #20]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	b2ca      	uxtb	r2, r1
 8008aea:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	3301      	adds	r3, #1
 8008af0:	61bb      	str	r3, [r7, #24]
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	dbb0      	blt.n	8008a5e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008afc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b00:	01db      	lsls	r3, r3, #7
 8008b02:	b25a      	sxtb	r2, r3
 8008b04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	b25b      	sxtb	r3, r3
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	b25b      	sxtb	r3, r3
 8008b10:	7ffa      	ldrb	r2, [r7, #31]
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	d101      	bne.n	8008b1a <payload_integration+0x10a>
 8008b16:	2220      	movs	r2, #32
 8008b18:	e000      	b.n	8008b1c <payload_integration+0x10c>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	b259      	sxtb	r1, r3
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4413      	add	r3, r2
 8008b26:	b2ca      	uxtb	r2, r1
 8008b28:	701a      	strb	r2, [r3, #0]
}
 8008b2a:	bf00      	nop
 8008b2c:	3724      	adds	r7, #36	@ 0x24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr

08008b34 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08c      	sub	sp, #48	@ 0x30
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8008b48:	f107 0320 	add.w	r3, r7, #32
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008b52:	f001 fe1e 	bl	800a792 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bf14      	ite	ne
 8008b66:	2301      	movne	r3, #1
 8008b68:	2300      	moveq	r3, #0
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	4ba3      	ldr	r3, [pc, #652]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008b6e:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <RadioSetRxGenericConfig+0x4a>
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	f000 80dc 	beq.w	8008d34 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008b7c:	e195      	b.n	8008eaa <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <RadioSetRxGenericConfig+0x5a>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <RadioSetRxGenericConfig+0x60>
            return -1;
 8008b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b92:	e18b      	b.n	8008eac <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	7f9b      	ldrb	r3, [r3, #30]
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d902      	bls.n	8008ba2 <RadioSetRxGenericConfig+0x6e>
            return -1;
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba0:	e184      	b.n	8008eac <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6919      	ldr	r1, [r3, #16]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	7f9b      	ldrb	r3, [r3, #30]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f107 0320 	add.w	r3, r7, #32
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 ff79 	bl	800aaa8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bf14      	ite	ne
 8008bbe:	2301      	movne	r3, #1
 8008bc0:	2300      	moveq	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fe2b 	bl	8009820 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008bca:	4b8c      	ldr	r3, [pc, #560]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	4a89      	ldr	r2, [pc, #548]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008bd8:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008be0:	4b86      	ldr	r3, [pc, #536]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 fd04 	bl	800a5f8 <SUBGRF_GetFskBandwidthRegValue>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4b81      	ldr	r3, [pc, #516]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008bfa:	4b80      	ldr	r3, [pc, #512]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008c0c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	7fda      	ldrb	r2, [r3, #31]
 8008c12:	4b7a      	ldr	r3, [pc, #488]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008c14:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	7f9b      	ldrb	r3, [r3, #30]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	4b77      	ldr	r3, [pc, #476]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008c20:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008c28:	4b74      	ldr	r3, [pc, #464]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008c2a:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d105      	bne.n	8008c42 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008c3e:	759a      	strb	r2, [r3, #22]
 8008c40:	e00b      	b.n	8008c5a <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d103      	bne.n	8008c54 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008c4e:	22ff      	movs	r2, #255	@ 0xff
 8008c50:	759a      	strb	r2, [r3, #22]
 8008c52:	e002      	b.n	8008c5a <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008c54:	4b69      	ldr	r3, [pc, #420]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008c56:	22ff      	movs	r2, #255	@ 0xff
 8008c58:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d004      	beq.n	8008c6e <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d12d      	bne.n	8008cca <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008c74:	2bf1      	cmp	r3, #241	@ 0xf1
 8008c76:	d00c      	beq.n	8008c92 <RadioSetRxGenericConfig+0x15e>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008c7e:	2bf2      	cmp	r3, #242	@ 0xf2
 8008c80:	d007      	beq.n	8008c92 <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d002      	beq.n	8008c92 <RadioSetRxGenericConfig+0x15e>
                return -1;
 8008c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c90:	e10c      	b.n	8008eac <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8008c92:	2300      	movs	r3, #0
 8008c94:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008c9a:	4b59      	ldr	r3, [pc, #356]	@ (8008e00 <RadioSetRxGenericConfig+0x2cc>)
 8008c9c:	6819      	ldr	r1, [r3, #0]
 8008c9e:	f107 0314 	add.w	r3, r7, #20
 8008ca2:	4a58      	ldr	r2, [pc, #352]	@ (8008e04 <RadioSetRxGenericConfig+0x2d0>)
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 fd67 	bl	800a778 <RFW_Init>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <RadioSetRxGenericConfig+0x182>
                return -1;
 8008cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb4:	e0fa      	b.n	8008eac <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008cb6:	4b51      	ldr	r3, [pc, #324]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	755a      	strb	r2, [r3, #21]
        {
 8008cc8:	e00e      	b.n	8008ce8 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8008cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008cd2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8008cda:	4b48      	ldr	r3, [pc, #288]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008cdc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008ce4:	4b45      	ldr	r3, [pc, #276]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008ce6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008ce8:	f7ff fa3b 	bl	8008162 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008cec:	2000      	movs	r0, #0
 8008cee:	f7fe fbcf 	bl	8007490 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008cf2:	4845      	ldr	r0, [pc, #276]	@ (8008e08 <RadioSetRxGenericConfig+0x2d4>)
 8008cf4:	f001 f838 	bl	8009d68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cf8:	4844      	ldr	r0, [pc, #272]	@ (8008e0c <RadioSetRxGenericConfig+0x2d8>)
 8008cfa:	f001 f903 	bl	8009f04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008cfe:	f107 0320 	add.w	r3, r7, #32
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fbc3 	bl	800948e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	8b9b      	ldrh	r3, [r3, #28]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fc0d 	bl	800952c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	8b1b      	ldrh	r3, [r3, #24]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fbe8 	bl	80094ec <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008d22:	fb03 f202 	mul.w	r2, r3, r2
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2e:	4a33      	ldr	r2, [pc, #204]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008d30:	6093      	str	r3, [r2, #8]
        break;
 8008d32:	e0ba      	b.n	8008eaa <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <RadioSetRxGenericConfig+0x20e>
            return -1;
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d40:	e0b4      	b.n	8008eac <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d105      	bne.n	8008d58 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008d52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008d56:	e002      	b.n	8008d5e <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 8008d58:	23ff      	movs	r3, #255	@ 0xff
 8008d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bf14      	ite	ne
 8008d66:	2301      	movne	r3, #1
 8008d68:	2300      	moveq	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fd57 	bl	8009820 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fd61 	bl	800983e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8008d96:	4b19      	ldr	r3, [pc, #100]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8008da2:	4b16      	ldr	r3, [pc, #88]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008da4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d010      	beq.n	8008dd4 <RadioSetRxGenericConfig+0x2a0>
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	dc2c      	bgt.n	8008e10 <RadioSetRxGenericConfig+0x2dc>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <RadioSetRxGenericConfig+0x28c>
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d005      	beq.n	8008dca <RadioSetRxGenericConfig+0x296>
            break;
 8008dbe:	e027      	b.n	8008e10 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008dc8:	e023      	b.n	8008e12 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008dca:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008dd2:	e01e      	b.n	8008e12 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008dda:	2b0b      	cmp	r3, #11
 8008ddc:	d004      	beq.n	8008de8 <RadioSetRxGenericConfig+0x2b4>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008de4:	2b0c      	cmp	r3, #12
 8008de6:	d104      	bne.n	8008df2 <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008de8:	4b04      	ldr	r3, [pc, #16]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008df0:	e00f      	b.n	8008e12 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008df2:	4b02      	ldr	r3, [pc, #8]	@ (8008dfc <RadioSetRxGenericConfig+0x2c8>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008dfa:	e00a      	b.n	8008e12 <RadioSetRxGenericConfig+0x2de>
 8008dfc:	20000288 	.word	0x20000288
 8008e00:	20000284 	.word	0x20000284
 8008e04:	200002fc 	.word	0x200002fc
 8008e08:	200002c0 	.word	0x200002c0
 8008e0c:	20000296 	.word	0x20000296
            break;
 8008e10:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008e12:	4b28      	ldr	r3, [pc, #160]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8008e1c:	4b25      	ldr	r3, [pc, #148]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008e1e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8008e26:	4b23      	ldr	r3, [pc, #140]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008e28:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008e2a:	4a22      	ldr	r2, [pc, #136]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e30:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8008e38:	4b1e      	ldr	r3, [pc, #120]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008e3a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8008e44:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008e46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8008e4a:	f7ff f98a 	bl	8008162 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008e4e:	2001      	movs	r0, #1
 8008e50:	f7fe fb1e 	bl	8007490 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008e54:	4818      	ldr	r0, [pc, #96]	@ (8008eb8 <RadioSetRxGenericConfig+0x384>)
 8008e56:	f000 ff87 	bl	8009d68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e5a:	4818      	ldr	r0, [pc, #96]	@ (8008ebc <RadioSetRxGenericConfig+0x388>)
 8008e5c:	f001 f852 	bl	8009f04 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008e60:	4b14      	ldr	r3, [pc, #80]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008e62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d10d      	bne.n	8008e86 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008e6a:	f240 7036 	movw	r0, #1846	@ 0x736
 8008e6e:	f001 f9b1 	bl	800a1d4 <SUBGRF_ReadRegister>
 8008e72:	4603      	mov	r3, r0
 8008e74:	f023 0304 	bic.w	r3, r3, #4
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f240 7036 	movw	r0, #1846	@ 0x736
 8008e80:	f001 f986 	bl	800a190 <SUBGRF_WriteRegister>
 8008e84:	e00c      	b.n	8008ea0 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008e86:	f240 7036 	movw	r0, #1846	@ 0x736
 8008e8a:	f001 f9a3 	bl	800a1d4 <SUBGRF_ReadRegister>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	f043 0304 	orr.w	r3, r3, #4
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	4619      	mov	r1, r3
 8008e98:	f240 7036 	movw	r0, #1846	@ 0x736
 8008e9c:	f001 f978 	bl	800a190 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008ea0:	4b04      	ldr	r3, [pc, #16]	@ (8008eb4 <RadioSetRxGenericConfig+0x380>)
 8008ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ea6:	609a      	str	r2, [r3, #8]
        break;
 8008ea8:	bf00      	nop
    }
    return status;
 8008eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3730      	adds	r7, #48	@ 0x30
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000288 	.word	0x20000288
 8008eb8:	200002c0 	.word	0x200002c0
 8008ebc:	20000296 	.word	0x20000296

08008ec0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08e      	sub	sp, #56	@ 0x38
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73fb      	strb	r3, [r7, #15]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008edc:	f001 fc59 	bl	800a792 <RFW_DeInit>
    switch( modem )
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	f200 8205 	bhi.w	80092f2 <RadioSetTxGenericConfig+0x432>
 8008ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <RadioSetTxGenericConfig+0x30>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08009075 	.word	0x08009075
 8008ef4:	080091bd 	.word	0x080091bd
 8008ef8:	080092b5 	.word	0x080092b5
 8008efc:	08008f01 	.word	0x08008f01
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	7c9b      	ldrb	r3, [r3, #18]
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d902      	bls.n	8008f0e <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8008f08:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0c:	e206      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6899      	ldr	r1, [r3, #8]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	7c9b      	ldrb	r3, [r3, #18]
 8008f16:	461a      	mov	r2, r3
 8008f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 fdc3 	bl	800aaa8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d102      	bne.n	8008f30 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8008f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2e:	e1f5      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d813      	bhi.n	8008f64 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008f42:	4b99      	ldr	r3, [pc, #612]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f44:	2203      	movs	r2, #3
 8008f46:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008f48:	4b97      	ldr	r3, [pc, #604]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a94      	ldr	r2, [pc, #592]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f56:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	7cda      	ldrb	r2, [r3, #19]
 8008f5c:	4b92      	ldr	r3, [pc, #584]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f62:	e017      	b.n	8008f94 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008f70:	4b8d      	ldr	r3, [pc, #564]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a8a      	ldr	r2, [pc, #552]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	7cda      	ldrb	r2, [r3, #19]
 8008f84:	4b88      	ldr	r3, [pc, #544]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	089b      	lsrs	r3, r3, #2
 8008f90:	4a85      	ldr	r2, [pc, #532]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008f92:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	4b82      	ldr	r3, [pc, #520]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008fa0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008fa2:	4b81      	ldr	r3, [pc, #516]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	7c9b      	ldrb	r3, [r3, #18]
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	4b7d      	ldr	r3, [pc, #500]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008fb2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008fb4:	4b7c      	ldr	r3, [pc, #496]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	7d9b      	ldrb	r3, [r3, #22]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d003      	beq.n	8008fca <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	7d1b      	ldrb	r3, [r3, #20]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d12b      	bne.n	8009022 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	7d5b      	ldrb	r3, [r3, #21]
 8008fce:	2bf1      	cmp	r3, #241	@ 0xf1
 8008fd0:	d00a      	beq.n	8008fe8 <RadioSetTxGenericConfig+0x128>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	7d5b      	ldrb	r3, [r3, #21]
 8008fd6:	2bf2      	cmp	r3, #242	@ 0xf2
 8008fd8:	d006      	beq.n	8008fe8 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	7d5b      	ldrb	r3, [r3, #21]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d002      	beq.n	8008fe8 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8008fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe6:	e199      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008ff2:	4b6e      	ldr	r3, [pc, #440]	@ (80091ac <RadioSetTxGenericConfig+0x2ec>)
 8008ff4:	6819      	ldr	r1, [r3, #0]
 8008ff6:	f107 0320 	add.w	r3, r7, #32
 8008ffa:	4a6d      	ldr	r2, [pc, #436]	@ (80091b0 <RadioSetTxGenericConfig+0x2f0>)
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f001 fbbb 	bl	800a778 <RFW_Init>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 8009008:	f04f 33ff 	mov.w	r3, #4294967295
 800900c:	e186      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800900e:	4b66      	ldr	r3, [pc, #408]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009010:	2200      	movs	r2, #0
 8009012:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009014:	4b64      	ldr	r3, [pc, #400]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009016:	2201      	movs	r2, #1
 8009018:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800901a:	4b63      	ldr	r3, [pc, #396]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 800901c:	2200      	movs	r2, #0
 800901e:	755a      	strb	r2, [r3, #21]
        {
 8009020:	e00b      	b.n	800903a <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	7d5a      	ldrb	r2, [r3, #21]
 8009026:	4b60      	ldr	r3, [pc, #384]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009028:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	7d9a      	ldrb	r2, [r3, #22]
 800902e:	4b5e      	ldr	r3, [pc, #376]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009030:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	7d1a      	ldrb	r2, [r3, #20]
 8009036:	4b5c      	ldr	r3, [pc, #368]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009038:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800903a:	f7ff f892 	bl	8008162 <RadioStandby>
        RadioSetModem( radio_modem );
 800903e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fa24 	bl	8007490 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009048:	485a      	ldr	r0, [pc, #360]	@ (80091b4 <RadioSetTxGenericConfig+0x2f4>)
 800904a:	f000 fe8d 	bl	8009d68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800904e:	485a      	ldr	r0, [pc, #360]	@ (80091b8 <RadioSetTxGenericConfig+0x2f8>)
 8009050:	f000 ff58 	bl	8009f04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009054:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fa18 	bl	800948e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	8a1b      	ldrh	r3, [r3, #16]
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fa62 	bl	800952c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	899b      	ldrh	r3, [r3, #12]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fa3d 	bl	80094ec <SUBGRF_SetCrcPolynomial>
        break;
 8009072:	e13f      	b.n	80092f4 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 800907c:	f04f 33ff 	mov.w	r3, #4294967295
 8009080:	e14c      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	7c9b      	ldrb	r3, [r3, #18]
 8009086:	2b08      	cmp	r3, #8
 8009088:	d902      	bls.n	8009090 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 800908a:	f04f 33ff 	mov.w	r3, #4294967295
 800908e:	e145      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	6899      	ldr	r1, [r3, #8]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	7c9b      	ldrb	r3, [r3, #18]
 8009098:	461a      	mov	r2, r3
 800909a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 fd02 	bl	800aaa8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80090a4:	4b40      	ldr	r3, [pc, #256]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a3d      	ldr	r2, [pc, #244]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	7cda      	ldrb	r2, [r3, #19]
 80090b8:	4b3b      	ldr	r3, [pc, #236]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	4a39      	ldr	r2, [pc, #228]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090c4:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80090c6:	4b38      	ldr	r3, [pc, #224]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	4b34      	ldr	r3, [pc, #208]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090d8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80090da:	4b33      	ldr	r3, [pc, #204]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090dc:	2204      	movs	r2, #4
 80090de:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	7c9b      	ldrb	r3, [r3, #18]
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	4b2f      	ldr	r3, [pc, #188]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090ea:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80090ec:	4b2e      	ldr	r3, [pc, #184]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	7d9b      	ldrb	r3, [r3, #22]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d003      	beq.n	8009102 <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	7d1b      	ldrb	r3, [r3, #20]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d12a      	bne.n	8009158 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	7d5b      	ldrb	r3, [r3, #21]
 8009106:	2bf1      	cmp	r3, #241	@ 0xf1
 8009108:	d00a      	beq.n	8009120 <RadioSetTxGenericConfig+0x260>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	7d5b      	ldrb	r3, [r3, #21]
 800910e:	2bf2      	cmp	r3, #242	@ 0xf2
 8009110:	d006      	beq.n	8009120 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	7d5b      	ldrb	r3, [r3, #21]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d002      	beq.n	8009120 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 800911a:	f04f 33ff 	mov.w	r3, #4294967295
 800911e:	e0fd      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009120:	2301      	movs	r3, #1
 8009122:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009128:	4b20      	ldr	r3, [pc, #128]	@ (80091ac <RadioSetTxGenericConfig+0x2ec>)
 800912a:	6819      	ldr	r1, [r3, #0]
 800912c:	f107 0314 	add.w	r3, r7, #20
 8009130:	4a1f      	ldr	r2, [pc, #124]	@ (80091b0 <RadioSetTxGenericConfig+0x2f0>)
 8009132:	4618      	mov	r0, r3
 8009134:	f001 fb20 	bl	800a778 <RFW_Init>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 800913e:	f04f 33ff 	mov.w	r3, #4294967295
 8009142:	e0eb      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009144:	4b18      	ldr	r3, [pc, #96]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009146:	2200      	movs	r2, #0
 8009148:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800914a:	4b17      	ldr	r3, [pc, #92]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 800914c:	2201      	movs	r2, #1
 800914e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009150:	4b15      	ldr	r3, [pc, #84]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009152:	2200      	movs	r2, #0
 8009154:	755a      	strb	r2, [r3, #21]
        {
 8009156:	e00b      	b.n	8009170 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	7d5a      	ldrb	r2, [r3, #21]
 800915c:	4b12      	ldr	r3, [pc, #72]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 800915e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	7d9a      	ldrb	r2, [r3, #22]
 8009164:	4b10      	ldr	r3, [pc, #64]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 8009166:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	7d1a      	ldrb	r2, [r3, #20]
 800916c:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <RadioSetTxGenericConfig+0x2e8>)
 800916e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009170:	f7fe fff7 	bl	8008162 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009174:	2000      	movs	r0, #0
 8009176:	f7fe f98b 	bl	8007490 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800917a:	480e      	ldr	r0, [pc, #56]	@ (80091b4 <RadioSetTxGenericConfig+0x2f4>)
 800917c:	f000 fdf4 	bl	8009d68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009180:	480d      	ldr	r0, [pc, #52]	@ (80091b8 <RadioSetTxGenericConfig+0x2f8>)
 8009182:	f000 febf 	bl	8009f04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f97f 	bl	800948e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	8a1b      	ldrh	r3, [r3, #16]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 f9c9 	bl	800952c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	899b      	ldrh	r3, [r3, #12]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 f9a4 	bl	80094ec <SUBGRF_SetCrcPolynomial>
        break;
 80091a4:	e0a6      	b.n	80092f4 <RadioSetTxGenericConfig+0x434>
 80091a6:	bf00      	nop
 80091a8:	20000288 	.word	0x20000288
 80091ac:	20000284 	.word	0x20000284
 80091b0:	200002e4 	.word	0x200002e4
 80091b4:	200002c0 	.word	0x200002c0
 80091b8:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80091bc:	4b59      	ldr	r3, [pc, #356]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	4b56      	ldr	r3, [pc, #344]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80091ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	785a      	ldrb	r2, [r3, #1]
 80091d2:	4b54      	ldr	r3, [pc, #336]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80091d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	789a      	ldrb	r2, [r3, #2]
 80091dc:	4b51      	ldr	r3, [pc, #324]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80091de:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	78db      	ldrb	r3, [r3, #3]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d010      	beq.n	800920c <RadioSetTxGenericConfig+0x34c>
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	dc20      	bgt.n	8009230 <RadioSetTxGenericConfig+0x370>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <RadioSetTxGenericConfig+0x338>
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d005      	beq.n	8009202 <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80091f6:	e01b      	b.n	8009230 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80091f8:	4b4a      	ldr	r3, [pc, #296]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009200:	e017      	b.n	8009232 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009202:	4b48      	ldr	r3, [pc, #288]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800920a:	e012      	b.n	8009232 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b0b      	cmp	r3, #11
 8009212:	d003      	beq.n	800921c <RadioSetTxGenericConfig+0x35c>
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b0c      	cmp	r3, #12
 800921a:	d104      	bne.n	8009226 <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800921c:	4b41      	ldr	r3, [pc, #260]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009224:	e005      	b.n	8009232 <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009226:	4b3f      	ldr	r3, [pc, #252]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800922e:	e000      	b.n	8009232 <RadioSetTxGenericConfig+0x372>
            break;
 8009230:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009232:	4b3c      	ldr	r3, [pc, #240]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009234:	2201      	movs	r2, #1
 8009236:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	889a      	ldrh	r2, [r3, #4]
 800923c:	4b39      	ldr	r3, [pc, #228]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 800923e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	799a      	ldrb	r2, [r3, #6]
 8009244:	4b37      	ldr	r3, [pc, #220]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009246:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	79da      	ldrb	r2, [r3, #7]
 800924c:	4b35      	ldr	r3, [pc, #212]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 800924e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	7a1a      	ldrb	r2, [r3, #8]
 8009256:	4b33      	ldr	r3, [pc, #204]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009258:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800925c:	f7fe ff81 	bl	8008162 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009260:	2001      	movs	r0, #1
 8009262:	f7fe f915 	bl	8007490 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009266:	4830      	ldr	r0, [pc, #192]	@ (8009328 <RadioSetTxGenericConfig+0x468>)
 8009268:	f000 fd7e 	bl	8009d68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800926c:	482f      	ldr	r0, [pc, #188]	@ (800932c <RadioSetTxGenericConfig+0x46c>)
 800926e:	f000 fe49 	bl	8009f04 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009272:	4b2c      	ldr	r3, [pc, #176]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009274:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009278:	2b06      	cmp	r3, #6
 800927a:	d10d      	bne.n	8009298 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800927c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009280:	f000 ffa8 	bl	800a1d4 <SUBGRF_ReadRegister>
 8009284:	4603      	mov	r3, r0
 8009286:	f023 0304 	bic.w	r3, r3, #4
 800928a:	b2db      	uxtb	r3, r3
 800928c:	4619      	mov	r1, r3
 800928e:	f640 0089 	movw	r0, #2185	@ 0x889
 8009292:	f000 ff7d 	bl	800a190 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009296:	e02d      	b.n	80092f4 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009298:	f640 0089 	movw	r0, #2185	@ 0x889
 800929c:	f000 ff9a 	bl	800a1d4 <SUBGRF_ReadRegister>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f043 0304 	orr.w	r3, r3, #4
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	f640 0089 	movw	r0, #2185	@ 0x889
 80092ae:	f000 ff6f 	bl	800a190 <SUBGRF_WriteRegister>
        break;
 80092b2:	e01f      	b.n	80092f4 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <RadioSetTxGenericConfig+0x406>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092c4:	d902      	bls.n	80092cc <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ca:	e027      	b.n	800931c <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 80092cc:	2003      	movs	r0, #3
 80092ce:	f7fe f8df 	bl	8007490 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80092d2:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80092d4:	2202      	movs	r2, #2
 80092d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a11      	ldr	r2, [pc, #68]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80092e0:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80092e2:	4b10      	ldr	r3, [pc, #64]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 80092e4:	2216      	movs	r2, #22
 80092e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80092ea:	480f      	ldr	r0, [pc, #60]	@ (8009328 <RadioSetTxGenericConfig+0x468>)
 80092ec:	f000 fd3c 	bl	8009d68 <SUBGRF_SetModulationParams>
        break;
 80092f0:	e000      	b.n	80092f4 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 80092f2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80092f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 f87f 	bl	800a3fc <SUBGRF_SetRfTxPower>
 80092fe:	4603      	mov	r3, r0
 8009300:	461a      	mov	r2, r3
 8009302:	4b08      	ldr	r3, [pc, #32]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009304:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009308:	4b06      	ldr	r3, [pc, #24]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 800930a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800930e:	4618      	mov	r0, r3
 8009310:	f001 fa53 	bl	800a7ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009314:	4a03      	ldr	r2, [pc, #12]	@ (8009324 <RadioSetTxGenericConfig+0x464>)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6053      	str	r3, [r2, #4]
    return 0;
 800931a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800931c:	4618      	mov	r0, r3
 800931e:	3738      	adds	r7, #56	@ 0x38
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000288 	.word	0x20000288
 8009328:	200002c0 	.word	0x200002c0
 800932c:	20000296 	.word	0x20000296

08009330 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	bc80      	pop	{r7}
 8009346:	4770      	bx	lr

08009348 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009352:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bc80      	pop	{r7}
 800935c:	4770      	bx	lr
	...

08009360 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800936e:	4a1d      	ldr	r2, [pc, #116]	@ (80093e4 <SUBGRF_Init+0x84>)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009374:	f7f7 fb24 	bl	80009c0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009378:	2002      	movs	r0, #2
 800937a:	f001 f91b 	bl	800a5b4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800937e:	4b1a      	ldr	r3, [pc, #104]	@ (80093e8 <SUBGRF_Init+0x88>)
 8009380:	2200      	movs	r2, #0
 8009382:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009384:	2000      	movs	r0, #0
 8009386:	f000 f97f 	bl	8009688 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800938a:	f001 facb 	bl	800a924 <RBI_IsTCXO>
 800938e:	4603      	mov	r3, r0
 8009390:	2b01      	cmp	r3, #1
 8009392:	d10e      	bne.n	80093b2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009394:	2140      	movs	r1, #64	@ 0x40
 8009396:	2001      	movs	r0, #1
 8009398:	f000 fb8a 	bl	8009ab0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800939c:	2100      	movs	r1, #0
 800939e:	f640 1011 	movw	r0, #2321	@ 0x911
 80093a2:	f000 fef5 	bl	800a190 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80093a6:	237f      	movs	r3, #127	@ 0x7f
 80093a8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80093aa:	7b38      	ldrb	r0, [r7, #12]
 80093ac:	f000 fa8d 	bl	80098ca <SUBGRF_Calibrate>
 80093b0:	e009      	b.n	80093c6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80093b2:	2120      	movs	r1, #32
 80093b4:	f640 1011 	movw	r0, #2321	@ 0x911
 80093b8:	f000 feea 	bl	800a190 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80093bc:	2120      	movs	r1, #32
 80093be:	f640 1012 	movw	r0, #2322	@ 0x912
 80093c2:	f000 fee5 	bl	800a190 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80093c6:	210e      	movs	r1, #14
 80093c8:	f640 101f 	movw	r0, #2335	@ 0x91f
 80093cc:	f000 fee0 	bl	800a190 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80093d0:	f001 fa8c 	bl	800a8ec <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80093d4:	4b05      	ldr	r3, [pc, #20]	@ (80093ec <SUBGRF_Init+0x8c>)
 80093d6:	2201      	movs	r2, #1
 80093d8:	701a      	strb	r2, [r3, #0]
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20000320 	.word	0x20000320
 80093e8:	2000031c 	.word	0x2000031c
 80093ec:	20000314 	.word	0x20000314

080093f0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80093f4:	4b02      	ldr	r3, [pc, #8]	@ (8009400 <SUBGRF_GetOperatingMode+0x10>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr
 8009400:	20000314 	.word	0x20000314

08009404 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	461a      	mov	r2, r3
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	2000      	movs	r0, #0
 8009418:	f000 ff40 	bl	800a29c <SUBGRF_WriteBuffer>
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	4613      	mov	r3, r2
 8009430:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009436:	f107 0317 	add.w	r3, r7, #23
 800943a:	4619      	mov	r1, r3
 800943c:	68b8      	ldr	r0, [r7, #8]
 800943e:	f000 fe29 	bl	800a094 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	79fa      	ldrb	r2, [r7, #7]
 8009448:	429a      	cmp	r2, r3
 800944a:	d201      	bcs.n	8009450 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800944c:	2301      	movs	r3, #1
 800944e:	e007      	b.n	8009460 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009450:	7df8      	ldrb	r0, [r7, #23]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	68f9      	ldr	r1, [r7, #12]
 800945a:	f000 ff41 	bl	800a2e0 <SUBGRF_ReadBuffer>

    return 0;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	460b      	mov	r3, r1
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	4619      	mov	r1, r3
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff ffc2 	bl	8009404 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f91d 	bl	80096c0 <SUBGRF_SetTx>
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009496:	2208      	movs	r2, #8
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800949e:	f000 feb9 	bl	800a214 <SUBGRF_WriteRegisters>
    return 0;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80094b6:	88fb      	ldrh	r3, [r7, #6]
 80094b8:	0a1b      	lsrs	r3, r3, #8
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80094c6:	f000 fb77 	bl	8009bb8 <SUBGRF_GetPacketType>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d108      	bne.n	80094e2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80094d0:	f107 030c 	add.w	r3, r7, #12
 80094d4:	2202      	movs	r2, #2
 80094d6:	4619      	mov	r1, r3
 80094d8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80094dc:	f000 fe9a 	bl	800a214 <SUBGRF_WriteRegisters>
            break;
 80094e0:	e000      	b.n	80094e4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80094e2:	bf00      	nop
    }
}
 80094e4:	bf00      	nop
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80094f6:	88fb      	ldrh	r3, [r7, #6]
 80094f8:	0a1b      	lsrs	r3, r3, #8
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009506:	f000 fb57 	bl	8009bb8 <SUBGRF_GetPacketType>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d108      	bne.n	8009522 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009510:	f107 030c 	add.w	r3, r7, #12
 8009514:	2202      	movs	r2, #2
 8009516:	4619      	mov	r1, r3
 8009518:	f240 60be 	movw	r0, #1726	@ 0x6be
 800951c:	f000 fe7a 	bl	800a214 <SUBGRF_WriteRegisters>
            break;
 8009520:	e000      	b.n	8009524 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009522:	bf00      	nop
    }
}
 8009524:	bf00      	nop
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800953a:	f000 fb3d 	bl	8009bb8 <SUBGRF_GetPacketType>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d121      	bne.n	8009588 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009544:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009548:	f000 fe44 	bl	800a1d4 <SUBGRF_ReadRegister>
 800954c:	4603      	mov	r3, r0
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	0a1b      	lsrs	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	b25b      	sxtb	r3, r3
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	b25a      	sxtb	r2, r3
 8009562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009566:	4313      	orrs	r3, r2
 8009568:	b25b      	sxtb	r3, r3
 800956a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	4619      	mov	r1, r3
 8009570:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009574:	f000 fe0c 	bl	800a190 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	4619      	mov	r1, r3
 800957e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8009582:	f000 fe05 	bl	800a190 <SUBGRF_WriteRegister>
            break;
 8009586:	e000      	b.n	800958a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009588:	bf00      	nop
    }
}
 800958a:	bf00      	nop
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80095a4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80095a8:	f000 fe14 	bl	800a1d4 <SUBGRF_ReadRegister>
 80095ac:	4603      	mov	r3, r0
 80095ae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	f023 0301 	bic.w	r3, r3, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	4619      	mov	r1, r3
 80095ba:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80095be:	f000 fde7 	bl	800a190 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80095c2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80095c6:	f000 fe05 	bl	800a1d4 <SUBGRF_ReadRegister>
 80095ca:	4603      	mov	r3, r0
 80095cc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80095ce:	79bb      	ldrb	r3, [r7, #6]
 80095d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80095dc:	f000 fdd8 	bl	800a190 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80095e0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80095e4:	f000 f88c 	bl	8009700 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80095e8:	463b      	mov	r3, r7
 80095ea:	2204      	movs	r2, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	f640 0019 	movw	r0, #2073	@ 0x819
 80095f2:	f000 fe31 	bl	800a258 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80095f6:	2000      	movs	r0, #0
 80095f8:	f000 f846 	bl	8009688 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	4619      	mov	r1, r3
 8009600:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009604:	f000 fdc4 	bl	800a190 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009608:	79bb      	ldrb	r3, [r7, #6]
 800960a:	4619      	mov	r1, r3
 800960c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009610:	f000 fdbe 	bl	800a190 <SUBGRF_WriteRegister>

    return number;
 8009614:	683b      	ldr	r3, [r7, #0]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009628:	2000      	movs	r0, #0
 800962a:	f001 f966 	bl	800a8fa <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800962e:	2002      	movs	r0, #2
 8009630:	f000 ffc0 	bl	800a5b4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009634:	793b      	ldrb	r3, [r7, #4]
 8009636:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800963a:	b2db      	uxtb	r3, r3
 800963c:	b25b      	sxtb	r3, r3
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009642:	793b      	ldrb	r3, [r7, #4]
 8009644:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009648:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800964a:	b25b      	sxtb	r3, r3
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	b25b      	sxtb	r3, r3
 8009650:	4313      	orrs	r3, r2
 8009652:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009654:	793b      	ldrb	r3, [r7, #4]
 8009656:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800965a:	b2db      	uxtb	r3, r3
 800965c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800965e:	4313      	orrs	r3, r2
 8009660:	b25b      	sxtb	r3, r3
 8009662:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009664:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009666:	f107 030f 	add.w	r3, r7, #15
 800966a:	2201      	movs	r2, #1
 800966c:	4619      	mov	r1, r3
 800966e:	2084      	movs	r0, #132	@ 0x84
 8009670:	f000 fe58 	bl	800a324 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009674:	4b03      	ldr	r3, [pc, #12]	@ (8009684 <SUBGRF_SetSleep+0x64>)
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000314 	.word	0x20000314

08009688 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009692:	1dfb      	adds	r3, r7, #7
 8009694:	2201      	movs	r2, #1
 8009696:	4619      	mov	r1, r3
 8009698:	2080      	movs	r0, #128	@ 0x80
 800969a:	f000 fe43 	bl	800a324 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d103      	bne.n	80096ac <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80096a4:	4b05      	ldr	r3, [pc, #20]	@ (80096bc <SUBGRF_SetStandby+0x34>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80096aa:	e002      	b.n	80096b2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80096ac:	4b03      	ldr	r3, [pc, #12]	@ (80096bc <SUBGRF_SetStandby+0x34>)
 80096ae:	2202      	movs	r2, #2
 80096b0:	701a      	strb	r2, [r3, #0]
}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000314 	.word	0x20000314

080096c0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80096c8:	4b0c      	ldr	r3, [pc, #48]	@ (80096fc <SUBGRF_SetTx+0x3c>)
 80096ca:	2204      	movs	r2, #4
 80096cc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80096e4:	f107 030c 	add.w	r3, r7, #12
 80096e8:	2203      	movs	r2, #3
 80096ea:	4619      	mov	r1, r3
 80096ec:	2083      	movs	r0, #131	@ 0x83
 80096ee:	f000 fe19 	bl	800a324 <SUBGRF_WriteCommand>
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000314 	.word	0x20000314

08009700 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009708:	4b0c      	ldr	r3, [pc, #48]	@ (800973c <SUBGRF_SetRx+0x3c>)
 800970a:	2205      	movs	r2, #5
 800970c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	0c1b      	lsrs	r3, r3, #16
 8009712:	b2db      	uxtb	r3, r3
 8009714:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	0a1b      	lsrs	r3, r3, #8
 800971a:	b2db      	uxtb	r3, r3
 800971c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009724:	f107 030c 	add.w	r3, r7, #12
 8009728:	2203      	movs	r2, #3
 800972a:	4619      	mov	r1, r3
 800972c:	2082      	movs	r0, #130	@ 0x82
 800972e:	f000 fdf9 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000314 	.word	0x20000314

08009740 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009748:	4b0e      	ldr	r3, [pc, #56]	@ (8009784 <SUBGRF_SetRxBoosted+0x44>)
 800974a:	2205      	movs	r2, #5
 800974c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800974e:	2197      	movs	r1, #151	@ 0x97
 8009750:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8009754:	f000 fd1c 	bl	800a190 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	0c1b      	lsrs	r3, r3, #16
 800975c:	b2db      	uxtb	r3, r3
 800975e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	b2db      	uxtb	r3, r3
 8009766:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800976e:	f107 030c 	add.w	r3, r7, #12
 8009772:	2203      	movs	r2, #3
 8009774:	4619      	mov	r1, r3
 8009776:	2082      	movs	r0, #130	@ 0x82
 8009778:	f000 fdd4 	bl	800a324 <SUBGRF_WriteCommand>
}
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20000314 	.word	0x20000314

08009788 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	0c1b      	lsrs	r3, r3, #16
 8009796:	b2db      	uxtb	r3, r3
 8009798:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	0a1b      	lsrs	r3, r3, #8
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	0c1b      	lsrs	r3, r3, #16
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	0a1b      	lsrs	r3, r3, #8
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80097be:	f107 0308 	add.w	r3, r7, #8
 80097c2:	2206      	movs	r2, #6
 80097c4:	4619      	mov	r1, r3
 80097c6:	2094      	movs	r0, #148	@ 0x94
 80097c8:	f000 fdac 	bl	800a324 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80097cc:	4b03      	ldr	r3, [pc, #12]	@ (80097dc <SUBGRF_SetRxDutyCycle+0x54>)
 80097ce:	2206      	movs	r2, #6
 80097d0:	701a      	strb	r2, [r3, #0]
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000314 	.word	0x20000314

080097e0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80097e4:	2200      	movs	r2, #0
 80097e6:	2100      	movs	r1, #0
 80097e8:	20c5      	movs	r0, #197	@ 0xc5
 80097ea:	f000 fd9b 	bl	800a324 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80097ee:	4b02      	ldr	r3, [pc, #8]	@ (80097f8 <SUBGRF_SetCad+0x18>)
 80097f0:	2207      	movs	r2, #7
 80097f2:	701a      	strb	r2, [r3, #0]
}
 80097f4:	bf00      	nop
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20000314 	.word	0x20000314

080097fc <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009800:	2200      	movs	r2, #0
 8009802:	2100      	movs	r1, #0
 8009804:	20d1      	movs	r0, #209	@ 0xd1
 8009806:	f000 fd8d 	bl	800a324 <SUBGRF_WriteCommand>
}
 800980a:	bf00      	nop
 800980c:	bd80      	pop	{r7, pc}

0800980e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800980e:	b580      	push	{r7, lr}
 8009810:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009812:	2200      	movs	r2, #0
 8009814:	2100      	movs	r1, #0
 8009816:	20d2      	movs	r0, #210	@ 0xd2
 8009818:	f000 fd84 	bl	800a324 <SUBGRF_WriteCommand>
}
 800981c:	bf00      	nop
 800981e:	bd80      	pop	{r7, pc}

08009820 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800982a:	1dfb      	adds	r3, r7, #7
 800982c:	2201      	movs	r2, #1
 800982e:	4619      	mov	r1, r3
 8009830:	209f      	movs	r0, #159	@ 0x9f
 8009832:	f000 fd77 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	4603      	mov	r3, r0
 8009846:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009848:	1dfb      	adds	r3, r7, #7
 800984a:	2201      	movs	r2, #1
 800984c:	4619      	mov	r1, r3
 800984e:	20a0      	movs	r0, #160	@ 0xa0
 8009850:	f000 fd68 	bl	800a324 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	2b3f      	cmp	r3, #63	@ 0x3f
 8009858:	d91c      	bls.n	8009894 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	085b      	lsrs	r3, r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009868:	e005      	b.n	8009876 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	089b      	lsrs	r3, r3, #2
 800986e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	3301      	adds	r3, #1
 8009874:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	2b1f      	cmp	r3, #31
 800987a:	d8f6      	bhi.n	800986a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	b2da      	uxtb	r2, r3
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	4413      	add	r3, r2
 8009886:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009888:	7b7b      	ldrb	r3, [r7, #13]
 800988a:	4619      	mov	r1, r3
 800988c:	f240 7006 	movw	r0, #1798	@ 0x706
 8009890:	f000 fc7e 	bl	800a190 <SUBGRF_WriteRegister>
    }
}
 8009894:	bf00      	nop
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80098a2:	f001 f846 	bl	800a932 <RBI_IsDCDC>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d102      	bne.n	80098b2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80098ac:	2301      	movs	r3, #1
 80098ae:	71fb      	strb	r3, [r7, #7]
 80098b0:	e001      	b.n	80098b6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80098b2:	2300      	movs	r3, #0
 80098b4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80098b6:	1dfb      	adds	r3, r7, #7
 80098b8:	2201      	movs	r2, #1
 80098ba:	4619      	mov	r1, r3
 80098bc:	2096      	movs	r0, #150	@ 0x96
 80098be:	f000 fd31 	bl	800a324 <SUBGRF_WriteCommand>
}
 80098c2:	bf00      	nop
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80098d2:	793b      	ldrb	r3, [r7, #4]
 80098d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	b25b      	sxtb	r3, r3
 80098dc:	019b      	lsls	r3, r3, #6
 80098de:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80098e0:	793b      	ldrb	r3, [r7, #4]
 80098e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80098e6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80098e8:	b25b      	sxtb	r3, r3
 80098ea:	015b      	lsls	r3, r3, #5
 80098ec:	b25b      	sxtb	r3, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80098f2:	793b      	ldrb	r3, [r7, #4]
 80098f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80098f8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80098fa:	b25b      	sxtb	r3, r3
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	b25b      	sxtb	r3, r3
 8009900:	4313      	orrs	r3, r2
 8009902:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009904:	793b      	ldrb	r3, [r7, #4]
 8009906:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800990a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800990c:	b25b      	sxtb	r3, r3
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	b25b      	sxtb	r3, r3
 8009912:	4313      	orrs	r3, r2
 8009914:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009916:	793b      	ldrb	r3, [r7, #4]
 8009918:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800991c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800991e:	b25b      	sxtb	r3, r3
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	b25b      	sxtb	r3, r3
 8009924:	4313      	orrs	r3, r2
 8009926:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009928:	793b      	ldrb	r3, [r7, #4]
 800992a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800992e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009930:	b25b      	sxtb	r3, r3
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	b25b      	sxtb	r3, r3
 8009936:	4313      	orrs	r3, r2
 8009938:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800993a:	793b      	ldrb	r3, [r7, #4]
 800993c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009940:	b2db      	uxtb	r3, r3
 8009942:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009944:	4313      	orrs	r3, r2
 8009946:	b25b      	sxtb	r3, r3
 8009948:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800994a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800994c:	f107 030f 	add.w	r3, r7, #15
 8009950:	2201      	movs	r2, #1
 8009952:	4619      	mov	r1, r3
 8009954:	2089      	movs	r0, #137	@ 0x89
 8009956:	f000 fce5 	bl	800a324 <SUBGRF_WriteCommand>
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a1d      	ldr	r2, [pc, #116]	@ (80099e4 <SUBGRF_CalibrateImage+0x80>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d904      	bls.n	800997e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009974:	23e1      	movs	r3, #225	@ 0xe1
 8009976:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009978:	23e9      	movs	r3, #233	@ 0xe9
 800997a:	737b      	strb	r3, [r7, #13]
 800997c:	e027      	b.n	80099ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a19      	ldr	r2, [pc, #100]	@ (80099e8 <SUBGRF_CalibrateImage+0x84>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d904      	bls.n	8009990 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009986:	23d7      	movs	r3, #215	@ 0xd7
 8009988:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800998a:	23db      	movs	r3, #219	@ 0xdb
 800998c:	737b      	strb	r3, [r7, #13]
 800998e:	e01e      	b.n	80099ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a16      	ldr	r2, [pc, #88]	@ (80099ec <SUBGRF_CalibrateImage+0x88>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d904      	bls.n	80099a2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009998:	23c1      	movs	r3, #193	@ 0xc1
 800999a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800999c:	23c5      	movs	r3, #197	@ 0xc5
 800999e:	737b      	strb	r3, [r7, #13]
 80099a0:	e015      	b.n	80099ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a12      	ldr	r2, [pc, #72]	@ (80099f0 <SUBGRF_CalibrateImage+0x8c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d904      	bls.n	80099b4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80099aa:	2375      	movs	r3, #117	@ 0x75
 80099ac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80099ae:	2381      	movs	r3, #129	@ 0x81
 80099b0:	737b      	strb	r3, [r7, #13]
 80099b2:	e00c      	b.n	80099ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a0f      	ldr	r2, [pc, #60]	@ (80099f4 <SUBGRF_CalibrateImage+0x90>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d904      	bls.n	80099c6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80099bc:	236b      	movs	r3, #107	@ 0x6b
 80099be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80099c0:	236f      	movs	r3, #111	@ 0x6f
 80099c2:	737b      	strb	r3, [r7, #13]
 80099c4:	e003      	b.n	80099ce <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80099c6:	2329      	movs	r3, #41	@ 0x29
 80099c8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80099ca:	232b      	movs	r3, #43	@ 0x2b
 80099cc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80099ce:	f107 030c 	add.w	r3, r7, #12
 80099d2:	2202      	movs	r2, #2
 80099d4:	4619      	mov	r1, r3
 80099d6:	2098      	movs	r0, #152	@ 0x98
 80099d8:	f000 fca4 	bl	800a324 <SUBGRF_WriteCommand>
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	35a4e900 	.word	0x35a4e900
 80099e8:	32a9f880 	.word	0x32a9f880
 80099ec:	2de54480 	.word	0x2de54480
 80099f0:	1b6b0b00 	.word	0x1b6b0b00
 80099f4:	1954fc40 	.word	0x1954fc40

080099f8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80099f8:	b590      	push	{r4, r7, lr}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	4611      	mov	r1, r2
 8009a04:	461a      	mov	r2, r3
 8009a06:	4623      	mov	r3, r4
 8009a08:	71fb      	strb	r3, [r7, #7]
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	71bb      	strb	r3, [r7, #6]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	717b      	strb	r3, [r7, #5]
 8009a12:	4613      	mov	r3, r2
 8009a14:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009a1a:	79bb      	ldrb	r3, [r7, #6]
 8009a1c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009a1e:	797b      	ldrb	r3, [r7, #5]
 8009a20:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009a22:	793b      	ldrb	r3, [r7, #4]
 8009a24:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009a26:	f107 030c 	add.w	r3, r7, #12
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	2095      	movs	r0, #149	@ 0x95
 8009a30:	f000 fc78 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009a34:	bf00      	nop
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd90      	pop	{r4, r7, pc}

08009a3c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4623      	mov	r3, r4
 8009a4c:	80fb      	strh	r3, [r7, #6]
 8009a4e:	4603      	mov	r3, r0
 8009a50:	80bb      	strh	r3, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	807b      	strh	r3, [r7, #2]
 8009a56:	4613      	mov	r3, r2
 8009a58:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009a5a:	88fb      	ldrh	r3, [r7, #6]
 8009a5c:	0a1b      	lsrs	r3, r3, #8
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009a64:	88fb      	ldrh	r3, [r7, #6]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009a6a:	88bb      	ldrh	r3, [r7, #4]
 8009a6c:	0a1b      	lsrs	r3, r3, #8
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009a74:	88bb      	ldrh	r3, [r7, #4]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009a7a:	887b      	ldrh	r3, [r7, #2]
 8009a7c:	0a1b      	lsrs	r3, r3, #8
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009a84:	887b      	ldrh	r3, [r7, #2]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009a8a:	883b      	ldrh	r3, [r7, #0]
 8009a8c:	0a1b      	lsrs	r3, r3, #8
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009a94:	883b      	ldrh	r3, [r7, #0]
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009a9a:	f107 0308 	add.w	r3, r7, #8
 8009a9e:	2208      	movs	r2, #8
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	2008      	movs	r0, #8
 8009aa4:	f000 fc3e 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009aa8:	bf00      	nop
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd90      	pop	{r4, r7, pc}

08009ab0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	6039      	str	r1, [r7, #0]
 8009aba:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	0c1b      	lsrs	r3, r3, #16
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	0a1b      	lsrs	r3, r3, #8
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009adc:	f107 030c 	add.w	r3, r7, #12
 8009ae0:	2204      	movs	r2, #4
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	2097      	movs	r0, #151	@ 0x97
 8009ae6:	f000 fc1d 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009af4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009b02:	4b1d      	ldr	r3, [pc, #116]	@ (8009b78 <SUBGRF_SetRfFrequency+0x84>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	f083 0301 	eor.w	r3, r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff ff27 	bl	8009964 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009b16:	4b18      	ldr	r3, [pc, #96]	@ (8009b78 <SUBGRF_SetRfFrequency+0x84>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	461c      	mov	r4, r3
 8009b22:	4615      	mov	r5, r2
 8009b24:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009b28:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009b2c:	4a13      	ldr	r2, [pc, #76]	@ (8009b7c <SUBGRF_SetRfFrequency+0x88>)
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 fb27 	bl	8000188 <__aeabi_uldivmod>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4613      	mov	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	0e1b      	lsrs	r3, r3, #24
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	0c1b      	lsrs	r3, r3, #16
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	0a1b      	lsrs	r3, r3, #8
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009b60:	f107 0308 	add.w	r3, r7, #8
 8009b64:	2204      	movs	r2, #4
 8009b66:	4619      	mov	r1, r3
 8009b68:	2086      	movs	r0, #134	@ 0x86
 8009b6a:	f000 fbdb 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b78:	2000031c 	.word	0x2000031c
 8009b7c:	01e84800 	.word	0x01e84800

08009b80 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009b8a:	79fa      	ldrb	r2, [r7, #7]
 8009b8c:	4b09      	ldr	r3, [pc, #36]	@ (8009bb4 <SUBGRF_SetPacketType+0x34>)
 8009b8e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009b96:	2100      	movs	r1, #0
 8009b98:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009b9c:	f000 faf8 	bl	800a190 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009ba0:	1dfb      	adds	r3, r7, #7
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	208a      	movs	r0, #138	@ 0x8a
 8009ba8:	f000 fbbc 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20000315 	.word	0x20000315

08009bb8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0
    return PacketType;
 8009bbc:	4b02      	ldr	r3, [pc, #8]	@ (8009bc8 <SUBGRF_GetPacketType+0x10>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bc80      	pop	{r7}
 8009bc6:	4770      	bx	lr
 8009bc8:	20000315 	.word	0x20000315

08009bcc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	71fb      	strb	r3, [r7, #7]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	71bb      	strb	r3, [r7, #6]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d149      	bne.n	8009c78 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009be4:	2000      	movs	r0, #0
 8009be6:	f000 feab 	bl	800a940 <RBI_GetRFOMaxPowerConfig>
 8009bea:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009bec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	da01      	bge.n	8009bfa <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b0e      	cmp	r3, #14
 8009bfe:	d10e      	bne.n	8009c1e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009c00:	2301      	movs	r3, #1
 8009c02:	2201      	movs	r2, #1
 8009c04:	2100      	movs	r1, #0
 8009c06:	2004      	movs	r0, #4
 8009c08:	f7ff fef6 	bl	80099f8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c0c:	79ba      	ldrb	r2, [r7, #6]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	330e      	adds	r3, #14
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	71bb      	strb	r3, [r7, #6]
 8009c1c:	e01f      	b.n	8009c5e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b0a      	cmp	r3, #10
 8009c22:	d10e      	bne.n	8009c42 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009c24:	2301      	movs	r3, #1
 8009c26:	2201      	movs	r2, #1
 8009c28:	2100      	movs	r1, #0
 8009c2a:	2001      	movs	r0, #1
 8009c2c:	f7ff fee4 	bl	80099f8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009c30:	79ba      	ldrb	r2, [r7, #6]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	330d      	adds	r3, #13
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	71bb      	strb	r3, [r7, #6]
 8009c40:	e00d      	b.n	8009c5e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009c42:	2301      	movs	r3, #1
 8009c44:	2201      	movs	r2, #1
 8009c46:	2100      	movs	r1, #0
 8009c48:	2007      	movs	r0, #7
 8009c4a:	f7ff fed5 	bl	80099f8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c4e:	79ba      	ldrb	r2, [r7, #6]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	330e      	adds	r3, #14
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009c5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c62:	f113 0f11 	cmn.w	r3, #17
 8009c66:	da01      	bge.n	8009c6c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009c68:	23ef      	movs	r3, #239	@ 0xef
 8009c6a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009c6c:	2118      	movs	r1, #24
 8009c6e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009c72:	f000 fa8d 	bl	800a190 <SUBGRF_WriteRegister>
 8009c76:	e067      	b.n	8009d48 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009c78:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009c7c:	f000 faaa 	bl	800a1d4 <SUBGRF_ReadRegister>
 8009c80:	4603      	mov	r3, r0
 8009c82:	f043 031e 	orr.w	r3, r3, #30
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009c8e:	f000 fa7f 	bl	800a190 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009c92:	2001      	movs	r0, #1
 8009c94:	f000 fe54 	bl	800a940 <RBI_GetRFOMaxPowerConfig>
 8009c98:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009c9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	da01      	bge.n	8009ca8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b14      	cmp	r3, #20
 8009cac:	d10e      	bne.n	8009ccc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009cae:	2301      	movs	r3, #1
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2105      	movs	r1, #5
 8009cb4:	2003      	movs	r0, #3
 8009cb6:	f7ff fe9f 	bl	80099f8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009cba:	79ba      	ldrb	r2, [r7, #6]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	3316      	adds	r3, #22
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	71bb      	strb	r3, [r7, #6]
 8009cca:	e031      	b.n	8009d30 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b11      	cmp	r3, #17
 8009cd0:	d10e      	bne.n	8009cf0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2103      	movs	r1, #3
 8009cd8:	2002      	movs	r0, #2
 8009cda:	f7ff fe8d 	bl	80099f8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009cde:	79ba      	ldrb	r2, [r7, #6]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	3316      	adds	r3, #22
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	71bb      	strb	r3, [r7, #6]
 8009cee:	e01f      	b.n	8009d30 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b0e      	cmp	r3, #14
 8009cf4:	d10e      	bne.n	8009d14 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	2102      	movs	r1, #2
 8009cfc:	2002      	movs	r0, #2
 8009cfe:	f7ff fe7b 	bl	80099f8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009d02:	79ba      	ldrb	r2, [r7, #6]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	330e      	adds	r3, #14
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	71bb      	strb	r3, [r7, #6]
 8009d12:	e00d      	b.n	8009d30 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009d14:	2301      	movs	r3, #1
 8009d16:	2200      	movs	r2, #0
 8009d18:	2107      	movs	r1, #7
 8009d1a:	2004      	movs	r0, #4
 8009d1c:	f7ff fe6c 	bl	80099f8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009d20:	79ba      	ldrb	r2, [r7, #6]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	3316      	adds	r3, #22
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009d34:	f113 0f09 	cmn.w	r3, #9
 8009d38:	da01      	bge.n	8009d3e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009d3a:	23f7      	movs	r3, #247	@ 0xf7
 8009d3c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009d3e:	2138      	movs	r1, #56	@ 0x38
 8009d40:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009d44:	f000 fa24 	bl	800a190 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009d48:	79bb      	ldrb	r3, [r7, #6]
 8009d4a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009d4c:	797b      	ldrb	r3, [r7, #5]
 8009d4e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	2202      	movs	r2, #2
 8009d56:	4619      	mov	r1, r3
 8009d58:	208e      	movs	r0, #142	@ 0x8e
 8009d5a:	f000 fae3 	bl	800a324 <SUBGRF_WriteCommand>
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009d68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d6c:	b086      	sub	sp, #24
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	781a      	ldrb	r2, [r3, #0]
 8009d84:	4b5c      	ldr	r3, [pc, #368]	@ (8009ef8 <SUBGRF_SetModulationParams+0x190>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d004      	beq.n	8009d96 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff fef5 	bl	8009b80 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	f200 80a5 	bhi.w	8009eea <SUBGRF_SetModulationParams+0x182>
 8009da0:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <SUBGRF_SetModulationParams+0x40>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009e79 	.word	0x08009e79
 8009db0:	08009e3b 	.word	0x08009e3b
 8009db4:	08009ea7 	.word	0x08009ea7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009db8:	2308      	movs	r3, #8
 8009dba:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8009efc <SUBGRF_SetModulationParams+0x194>)
 8009dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	0c1b      	lsrs	r3, r3, #16
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	7b1b      	ldrb	r3, [r3, #12]
 8009de2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	7b5b      	ldrb	r3, [r3, #13]
 8009de8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	2200      	movs	r2, #0
 8009df0:	461c      	mov	r4, r3
 8009df2:	4615      	mov	r5, r2
 8009df4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009df8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009dfc:	4a40      	ldr	r2, [pc, #256]	@ (8009f00 <SUBGRF_SetModulationParams+0x198>)
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 f9bf 	bl	8000188 <__aeabi_uldivmod>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4613      	mov	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	0c1b      	lsrs	r3, r3, #16
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	0a1b      	lsrs	r3, r3, #8
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009e28:	7cfb      	ldrb	r3, [r7, #19]
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	f107 0308 	add.w	r3, r7, #8
 8009e30:	4619      	mov	r1, r3
 8009e32:	208b      	movs	r0, #139	@ 0x8b
 8009e34:	f000 fa76 	bl	800a324 <SUBGRF_WriteCommand>
        break;
 8009e38:	e058      	b.n	8009eec <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009e3a:	2304      	movs	r3, #4
 8009e3c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	4a2e      	ldr	r2, [pc, #184]	@ (8009efc <SUBGRF_SetModulationParams+0x194>)
 8009e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e48:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	0c1b      	lsrs	r3, r3, #16
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	0a1b      	lsrs	r3, r3, #8
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7d1b      	ldrb	r3, [r3, #20]
 8009e64:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009e66:	7cfb      	ldrb	r3, [r7, #19]
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	4619      	mov	r1, r3
 8009e70:	208b      	movs	r0, #139	@ 0x8b
 8009e72:	f000 fa57 	bl	800a324 <SUBGRF_WriteCommand>
        break;
 8009e76:	e039      	b.n	8009eec <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8009e78:	2304      	movs	r3, #4
 8009e7a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	7e1b      	ldrb	r3, [r3, #24]
 8009e80:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	7e5b      	ldrb	r3, [r3, #25]
 8009e86:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7e9b      	ldrb	r3, [r3, #26]
 8009e8c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7edb      	ldrb	r3, [r3, #27]
 8009e92:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009e94:	7cfb      	ldrb	r3, [r7, #19]
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	f107 0308 	add.w	r3, r7, #8
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	208b      	movs	r0, #139	@ 0x8b
 8009ea0:	f000 fa40 	bl	800a324 <SUBGRF_WriteCommand>

        break;
 8009ea4:	e022      	b.n	8009eec <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009ea6:	2305      	movs	r3, #5
 8009ea8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	4a13      	ldr	r2, [pc, #76]	@ (8009efc <SUBGRF_SetModulationParams+0x194>)
 8009eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	0c1b      	lsrs	r3, r3, #16
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	0a1b      	lsrs	r3, r3, #8
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7b1b      	ldrb	r3, [r3, #12]
 8009ed0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7b5b      	ldrb	r3, [r3, #13]
 8009ed6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009ed8:	7cfb      	ldrb	r3, [r7, #19]
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	f107 0308 	add.w	r3, r7, #8
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	208b      	movs	r0, #139	@ 0x8b
 8009ee4:	f000 fa1e 	bl	800a324 <SUBGRF_WriteCommand>
        break;
 8009ee8:	e000      	b.n	8009eec <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009eea:	bf00      	nop
    }
}
 8009eec:	bf00      	nop
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000315 	.word	0x20000315
 8009efc:	3d090000 	.word	0x3d090000
 8009f00:	01e84800 	.word	0x01e84800

08009f04 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009f10:	f107 030c 	add.w	r3, r7, #12
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	605a      	str	r2, [r3, #4]
 8009f1a:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	781a      	ldrb	r2, [r3, #0]
 8009f20:	4b44      	ldr	r3, [pc, #272]	@ (800a034 <SUBGRF_SetPacketParams+0x130>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d004      	beq.n	8009f32 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7ff fe27 	bl	8009b80 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d878      	bhi.n	800a02c <SUBGRF_SetPacketParams+0x128>
 8009f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <SUBGRF_SetPacketParams+0x3c>)
 8009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f40:	08009f51 	.word	0x08009f51
 8009f44:	08009fe1 	.word	0x08009fe1
 8009f48:	08009fd5 	.word	0x08009fd5
 8009f4c:	08009f51 	.word	0x08009f51
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7a5b      	ldrb	r3, [r3, #9]
 8009f54:	2bf1      	cmp	r3, #241	@ 0xf1
 8009f56:	d10a      	bne.n	8009f6e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009f58:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009f5c:	f7ff faa6 	bl	80094ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009f60:	f248 0005 	movw	r0, #32773	@ 0x8005
 8009f64:	f7ff fac2 	bl	80094ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	75bb      	strb	r3, [r7, #22]
 8009f6c:	e011      	b.n	8009f92 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	7a5b      	ldrb	r3, [r3, #9]
 8009f72:	2bf2      	cmp	r3, #242	@ 0xf2
 8009f74:	d10a      	bne.n	8009f8c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009f76:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8009f7a:	f7ff fa97 	bl	80094ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009f7e:	f241 0021 	movw	r0, #4129	@ 0x1021
 8009f82:	f7ff fab3 	bl	80094ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009f86:	2306      	movs	r3, #6
 8009f88:	75bb      	strb	r3, [r7, #22]
 8009f8a:	e002      	b.n	8009f92 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	7a5b      	ldrb	r3, [r3, #9]
 8009f90:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009f92:	2309      	movs	r3, #9
 8009f94:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	885b      	ldrh	r3, [r3, #2]
 8009f9a:	0a1b      	lsrs	r3, r3, #8
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	885b      	ldrh	r3, [r3, #2]
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	791b      	ldrb	r3, [r3, #4]
 8009fae:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	795b      	ldrb	r3, [r3, #5]
 8009fb4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	799b      	ldrb	r3, [r3, #6]
 8009fba:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	79db      	ldrb	r3, [r3, #7]
 8009fc0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7a1b      	ldrb	r3, [r3, #8]
 8009fc6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009fc8:	7dbb      	ldrb	r3, [r7, #22]
 8009fca:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7a9b      	ldrb	r3, [r3, #10]
 8009fd0:	753b      	strb	r3, [r7, #20]
        break;
 8009fd2:	e022      	b.n	800a01a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7b1b      	ldrb	r3, [r3, #12]
 8009fdc:	733b      	strb	r3, [r7, #12]
        break;
 8009fde:	e01c      	b.n	800a01a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009fe0:	2306      	movs	r3, #6
 8009fe2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	89db      	ldrh	r3, [r3, #14]
 8009fe8:	0a1b      	lsrs	r3, r3, #8
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	89db      	ldrh	r3, [r3, #14]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	7c1a      	ldrb	r2, [r3, #16]
 8009ffc:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <SUBGRF_SetPacketParams+0x134>)
 8009ffe:	4611      	mov	r1, r2
 800a000:	7019      	strb	r1, [r3, #0]
 800a002:	4613      	mov	r3, r2
 800a004:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7c5b      	ldrb	r3, [r3, #17]
 800a00a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7c9b      	ldrb	r3, [r3, #18]
 800a010:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	7cdb      	ldrb	r3, [r3, #19]
 800a016:	747b      	strb	r3, [r7, #17]
        break;
 800a018:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	f107 030c 	add.w	r3, r7, #12
 800a022:	4619      	mov	r1, r3
 800a024:	208c      	movs	r0, #140	@ 0x8c
 800a026:	f000 f97d 	bl	800a324 <SUBGRF_WriteCommand>
 800a02a:	e000      	b.n	800a02e <SUBGRF_SetPacketParams+0x12a>
        return;
 800a02c:	bf00      	nop
}
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20000315 	.word	0x20000315
 800a038:	20000316 	.word	0x20000316

0800a03c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	460a      	mov	r2, r1
 800a046:	71fb      	strb	r3, [r7, #7]
 800a048:	4613      	mov	r3, r2
 800a04a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a050:	79bb      	ldrb	r3, [r7, #6]
 800a052:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a054:	f107 030c 	add.w	r3, r7, #12
 800a058:	2202      	movs	r2, #2
 800a05a:	4619      	mov	r1, r3
 800a05c:	208f      	movs	r0, #143	@ 0x8f
 800a05e:	f000 f961 	bl	800a324 <SUBGRF_WriteCommand>
}
 800a062:	bf00      	nop
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a070:	2300      	movs	r3, #0
 800a072:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a074:	1d3b      	adds	r3, r7, #4
 800a076:	2201      	movs	r2, #1
 800a078:	4619      	mov	r1, r3
 800a07a:	2015      	movs	r0, #21
 800a07c:	f000 f974 	bl	800a368 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a080:	793b      	ldrb	r3, [r7, #4]
 800a082:	425b      	negs	r3, r3
 800a084:	105b      	asrs	r3, r3, #1
 800a086:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a088:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a09e:	f107 030c 	add.w	r3, r7, #12
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	2013      	movs	r0, #19
 800a0a8:	f000 f95e 	bl	800a368 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a0ac:	f7ff fd84 	bl	8009bb8 <SUBGRF_GetPacketType>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d10d      	bne.n	800a0d2 <SUBGRF_GetRxBufferStatus+0x3e>
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e8 <SUBGRF_GetRxBufferStatus+0x54>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d108      	bne.n	800a0d2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a0c0:	f240 7002 	movw	r0, #1794	@ 0x702
 800a0c4:	f000 f886 	bl	800a1d4 <SUBGRF_ReadRegister>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	701a      	strb	r2, [r3, #0]
 800a0d0:	e002      	b.n	800a0d8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a0d2:	7b3a      	ldrb	r2, [r7, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a0d8:	7b7a      	ldrb	r2, [r7, #13]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	701a      	strb	r2, [r3, #0]
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000316 	.word	0x20000316

0800a0ec <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a0f4:	f107 030c 	add.w	r3, r7, #12
 800a0f8:	2203      	movs	r2, #3
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	2014      	movs	r0, #20
 800a0fe:	f000 f933 	bl	800a368 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a102:	f7ff fd59 	bl	8009bb8 <SUBGRF_GetPacketType>
 800a106:	4603      	mov	r3, r0
 800a108:	461a      	mov	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <SUBGRF_GetPacketStatus+0x30>
 800a116:	2b01      	cmp	r3, #1
 800a118:	d013      	beq.n	800a142 <SUBGRF_GetPacketStatus+0x56>
 800a11a:	e02a      	b.n	800a172 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a11c:	7b3a      	ldrb	r2, [r7, #12]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a122:	7b7b      	ldrb	r3, [r7, #13]
 800a124:	425b      	negs	r3, r3
 800a126:	105b      	asrs	r3, r3, #1
 800a128:	b25a      	sxtb	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	425b      	negs	r3, r3
 800a132:	105b      	asrs	r3, r3, #1
 800a134:	b25a      	sxtb	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	609a      	str	r2, [r3, #8]
            break;
 800a140:	e020      	b.n	800a184 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a142:	7b3b      	ldrb	r3, [r7, #12]
 800a144:	425b      	negs	r3, r3
 800a146:	105b      	asrs	r3, r3, #1
 800a148:	b25a      	sxtb	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a14e:	7b7b      	ldrb	r3, [r7, #13]
 800a150:	b25b      	sxtb	r3, r3
 800a152:	3302      	adds	r3, #2
 800a154:	109b      	asrs	r3, r3, #2
 800a156:	b25a      	sxtb	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	425b      	negs	r3, r3
 800a160:	105b      	asrs	r3, r3, #1
 800a162:	b25a      	sxtb	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a168:	4b08      	ldr	r3, [pc, #32]	@ (800a18c <SUBGRF_GetPacketStatus+0xa0>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	611a      	str	r2, [r3, #16]
            break;
 800a170:	e008      	b.n	800a184 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a172:	2214      	movs	r2, #20
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fcb5 	bl	800aae6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	220f      	movs	r2, #15
 800a180:	701a      	strb	r2, [r3, #0]
            break;
 800a182:	bf00      	nop
    }
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000318 	.word	0x20000318

0800a190 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	460a      	mov	r2, r1
 800a19a:	80fb      	strh	r3, [r7, #6]
 800a19c:	4613      	mov	r3, r2
 800a19e:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1aa:	b672      	cpsid	i
}
 800a1ac:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a1ae:	1d7a      	adds	r2, r7, #5
 800a1b0:	88f9      	ldrh	r1, [r7, #6]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4806      	ldr	r0, [pc, #24]	@ (800a1d0 <SUBGRF_WriteRegister+0x40>)
 800a1b6:	f7fa faed 	bl	8004794 <HAL_SUBGHZ_WriteRegisters>
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f383 8810 	msr	PRIMASK, r3
}
 800a1c4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a1c6:	bf00      	nop
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000070 	.word	0x20000070

0800a1d4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1de:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 800a1e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1e8:	b672      	cpsid	i
}
 800a1ea:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a1ec:	f107 020b 	add.w	r2, r7, #11
 800a1f0:	88f9      	ldrh	r1, [r7, #6]
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4806      	ldr	r0, [pc, #24]	@ (800a210 <SUBGRF_ReadRegister+0x3c>)
 800a1f6:	f7fa fb2c 	bl	8004852 <HAL_SUBGHZ_ReadRegisters>
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f383 8810 	msr	PRIMASK, r3
}
 800a204:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 800a206:	7afb      	ldrb	r3, [r7, #11]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20000070 	.word	0x20000070

0800a214 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	80fb      	strh	r3, [r7, #6]
 800a220:	4613      	mov	r3, r2
 800a222:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a224:	f3ef 8310 	mrs	r3, PRIMASK
 800a228:	60fb      	str	r3, [r7, #12]
  return(result);
 800a22a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a22c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a22e:	b672      	cpsid	i
}
 800a230:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a232:	88bb      	ldrh	r3, [r7, #4]
 800a234:	88f9      	ldrh	r1, [r7, #6]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	4806      	ldr	r0, [pc, #24]	@ (800a254 <SUBGRF_WriteRegisters+0x40>)
 800a23a:	f7fa faab 	bl	8004794 <HAL_SUBGHZ_WriteRegisters>
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f383 8810 	msr	PRIMASK, r3
}
 800a248:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a24a:	bf00      	nop
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000070 	.word	0x20000070

0800a258 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	80fb      	strh	r3, [r7, #6]
 800a264:	4613      	mov	r3, r2
 800a266:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a268:	f3ef 8310 	mrs	r3, PRIMASK
 800a26c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a26e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a272:	b672      	cpsid	i
}
 800a274:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a276:	88bb      	ldrh	r3, [r7, #4]
 800a278:	88f9      	ldrh	r1, [r7, #6]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4806      	ldr	r0, [pc, #24]	@ (800a298 <SUBGRF_ReadRegisters+0x40>)
 800a27e:	f7fa fae8 	bl	8004852 <HAL_SUBGHZ_ReadRegisters>
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f383 8810 	msr	PRIMASK, r3
}
 800a28c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a28e:	bf00      	nop
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000070 	.word	0x20000070

0800a29c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	71fb      	strb	r3, [r7, #7]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a2b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a2b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2b6:	b672      	cpsid	i
}
 800a2b8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a2ba:	79bb      	ldrb	r3, [r7, #6]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	79f9      	ldrb	r1, [r7, #7]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	4806      	ldr	r0, [pc, #24]	@ (800a2dc <SUBGRF_WriteBuffer+0x40>)
 800a2c4:	f7fa fbd9 	bl	8004a7a <HAL_SUBGHZ_WriteBuffer>
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f383 8810 	msr	PRIMASK, r3
}
 800a2d2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a2d4:	bf00      	nop
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20000070 	.word	0x20000070

0800a2e0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	6039      	str	r1, [r7, #0]
 800a2ea:	71fb      	strb	r3, [r7, #7]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a2f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2fa:	b672      	cpsid	i
}
 800a2fc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a2fe:	79bb      	ldrb	r3, [r7, #6]
 800a300:	b29b      	uxth	r3, r3
 800a302:	79f9      	ldrb	r1, [r7, #7]
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	4806      	ldr	r0, [pc, #24]	@ (800a320 <SUBGRF_ReadBuffer+0x40>)
 800a308:	f7fa fc0a 	bl	8004b20 <HAL_SUBGHZ_ReadBuffer>
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f383 8810 	msr	PRIMASK, r3
}
 800a316:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a318:	bf00      	nop
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000070 	.word	0x20000070

0800a324 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	6039      	str	r1, [r7, #0]
 800a32e:	71fb      	strb	r3, [r7, #7]
 800a330:	4613      	mov	r3, r2
 800a332:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a334:	f3ef 8310 	mrs	r3, PRIMASK
 800a338:	60fb      	str	r3, [r7, #12]
  return(result);
 800a33a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a33c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a33e:	b672      	cpsid	i
}
 800a340:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a342:	88bb      	ldrh	r3, [r7, #4]
 800a344:	79f9      	ldrb	r1, [r7, #7]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4806      	ldr	r0, [pc, #24]	@ (800a364 <SUBGRF_WriteCommand+0x40>)
 800a34a:	f7fa fae3 	bl	8004914 <HAL_SUBGHZ_ExecSetCmd>
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f383 8810 	msr	PRIMASK, r3
}
 800a358:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a35a:	bf00      	nop
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000070 	.word	0x20000070

0800a368 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
 800a374:	4613      	mov	r3, r2
 800a376:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a378:	f3ef 8310 	mrs	r3, PRIMASK
 800a37c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a37e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a380:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a382:	b672      	cpsid	i
}
 800a384:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a386:	88bb      	ldrh	r3, [r7, #4]
 800a388:	79f9      	ldrb	r1, [r7, #7]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	4806      	ldr	r0, [pc, #24]	@ (800a3a8 <SUBGRF_ReadCommand+0x40>)
 800a38e:	f7fa fb20 	bl	80049d2 <HAL_SUBGHZ_ExecGetCmd>
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f383 8810 	msr	PRIMASK, r3
}
 800a39c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a39e:	bf00      	nop
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20000070 	.word	0x20000070

0800a3ac <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	460a      	mov	r2, r1
 800a3b6:	71fb      	strb	r3, [r7, #7]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a3c0:	79bb      	ldrb	r3, [r7, #6]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d10d      	bne.n	800a3e2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d104      	bne.n	800a3d6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a3d0:	2004      	movs	r0, #4
 800a3d2:	f000 f8ef 	bl	800a5b4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d107      	bne.n	800a3ec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	73fb      	strb	r3, [r7, #15]
 800a3e0:	e004      	b.n	800a3ec <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a3e2:	79bb      	ldrb	r3, [r7, #6]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fa83 	bl	800a8fa <RBI_ConfigRFSwitch>
}
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a40a:	f000 fa84 	bl	800a916 <RBI_GetTxConfig>
 800a40e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	2b02      	cmp	r3, #2
 800a414:	d016      	beq.n	800a444 <SUBGRF_SetRfTxPower+0x48>
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	dc16      	bgt.n	800a44a <SUBGRF_SetRfTxPower+0x4e>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <SUBGRF_SetRfTxPower+0x2e>
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d00a      	beq.n	800a43e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a428:	e00f      	b.n	800a44a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a42e:	2b0f      	cmp	r3, #15
 800a430:	dd02      	ble.n	800a438 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a432:	2302      	movs	r3, #2
 800a434:	73fb      	strb	r3, [r7, #15]
            break;
 800a436:	e009      	b.n	800a44c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a438:	2301      	movs	r3, #1
 800a43a:	73fb      	strb	r3, [r7, #15]
            break;
 800a43c:	e006      	b.n	800a44c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a43e:	2301      	movs	r3, #1
 800a440:	73fb      	strb	r3, [r7, #15]
            break;
 800a442:	e003      	b.n	800a44c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a444:	2302      	movs	r3, #2
 800a446:	73fb      	strb	r3, [r7, #15]
            break;
 800a448:	e000      	b.n	800a44c <SUBGRF_SetRfTxPower+0x50>
            break;
 800a44a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a44c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	2202      	movs	r2, #2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fbb9 	bl	8009bcc <SUBGRF_SetTxParams>

    return paSelect;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a468:	2301      	movs	r3, #1
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr
	...

0800a474 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a47c:	4b03      	ldr	r3, [pc, #12]	@ (800a48c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2001      	movs	r0, #1
 800a482:	4798      	blx	r3
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20000320 	.word	0x20000320

0800a490 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a498:	4b03      	ldr	r3, [pc, #12]	@ (800a4a8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2002      	movs	r0, #2
 800a49e:	4798      	blx	r3
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20000320 	.word	0x20000320

0800a4ac <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a4b4:	4b03      	ldr	r3, [pc, #12]	@ (800a4c4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2040      	movs	r0, #64	@ 0x40
 800a4ba:	4798      	blx	r3
}
 800a4bc:	bf00      	nop
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20000320 	.word	0x20000320

0800a4c8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d005      	beq.n	800a4ea <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a4de:	e00a      	b.n	800a4f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a4e0:	4b07      	ldr	r3, [pc, #28]	@ (800a500 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2080      	movs	r0, #128	@ 0x80
 800a4e6:	4798      	blx	r3
            break;
 800a4e8:	e005      	b.n	800a4f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a4ea:	4b05      	ldr	r3, [pc, #20]	@ (800a500 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a4f2:	4798      	blx	r3
            break;
 800a4f4:	bf00      	nop
    }
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000320 	.word	0x20000320

0800a504 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a50c:	4b04      	ldr	r3, [pc, #16]	@ (800a520 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a514:	4798      	blx	r3
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20000320 	.word	0x20000320

0800a524 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a52c:	4b03      	ldr	r3, [pc, #12]	@ (800a53c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2020      	movs	r0, #32
 800a532:	4798      	blx	r3
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20000320 	.word	0x20000320

0800a540 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a548:	4b03      	ldr	r3, [pc, #12]	@ (800a558 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2004      	movs	r0, #4
 800a54e:	4798      	blx	r3
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20000320 	.word	0x20000320

0800a55c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a564:	4b03      	ldr	r3, [pc, #12]	@ (800a574 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2008      	movs	r0, #8
 800a56a:	4798      	blx	r3
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20000320 	.word	0x20000320

0800a578 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a580:	4b03      	ldr	r3, [pc, #12]	@ (800a590 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2010      	movs	r0, #16
 800a586:	4798      	blx	r3
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000320 	.word	0x20000320

0800a594 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a59c:	4b04      	ldr	r3, [pc, #16]	@ (800a5b0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a5a4:	4798      	blx	r3
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000320 	.word	0x20000320

0800a5b4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a5be:	f000 f9b8 	bl	800a932 <RBI_IsDCDC>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d112      	bne.n	800a5ee <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a5c8:	f640 1023 	movw	r0, #2339	@ 0x923
 800a5cc:	f7ff fe02 	bl	800a1d4 <SUBGRF_ReadRegister>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
 800a5d6:	f023 0306 	bic.w	r3, r3, #6
 800a5da:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a5dc:	7bfa      	ldrb	r2, [r7, #15]
 800a5de:	79fb      	ldrb	r3, [r7, #7]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	f640 1023 	movw	r0, #2339	@ 0x923
 800a5ea:	f7ff fdd1 	bl	800a190 <SUBGRF_WriteRegister>
  }
}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a606:	231f      	movs	r3, #31
 800a608:	e017      	b.n	800a63a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
 800a60e:	e00f      	b.n	800a630 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	4a0c      	ldr	r2, [pc, #48]	@ (800a644 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d205      	bcs.n	800a62a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
 800a620:	4a08      	ldr	r2, [pc, #32]	@ (800a644 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	4413      	add	r3, r2
 800a626:	791b      	ldrb	r3, [r3, #4]
 800a628:	e007      	b.n	800a63a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	3301      	adds	r3, #1
 800a62e:	73fb      	strb	r3, [r7, #15]
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b15      	cmp	r3, #21
 800a634:	d9ec      	bls.n	800a610 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a636:	bf00      	nop
 800a638:	e7fd      	b.n	800a636 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	bc80      	pop	{r7}
 800a642:	4770      	bx	lr
 800a644:	0800c0c0 	.word	0x0800c0c0

0800a648 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08a      	sub	sp, #40	@ 0x28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a652:	4b35      	ldr	r3, [pc, #212]	@ (800a728 <SUBGRF_GetCFO+0xe0>)
 800a654:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a656:	f640 0007 	movw	r0, #2055	@ 0x807
 800a65a:	f7ff fdbb 	bl	800a1d4 <SUBGRF_ReadRegister>
 800a65e:	4603      	mov	r3, r0
 800a660:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a662:	7ffb      	ldrb	r3, [r7, #31]
 800a664:	08db      	lsrs	r3, r3, #3
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	3328      	adds	r3, #40	@ 0x28
 800a66e:	443b      	add	r3, r7
 800a670:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a674:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a676:	7ffb      	ldrb	r3, [r7, #31]
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a67e:	7fba      	ldrb	r2, [r7, #30]
 800a680:	7f7b      	ldrb	r3, [r7, #29]
 800a682:	3301      	adds	r3, #1
 800a684:	fa02 f303 	lsl.w	r3, r2, r3
 800a688:	461a      	mov	r2, r3
 800a68a:	4b28      	ldr	r3, [pc, #160]	@ (800a72c <SUBGRF_GetCFO+0xe4>)
 800a68c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a690:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ac:	2b07      	cmp	r3, #7
 800a6ae:	d802      	bhi.n	800a6b6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800a6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	fb02 f303 	mul.w	r3, r2, r3
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d802      	bhi.n	800a6ca <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a6c4:	2304      	movs	r3, #4
 800a6c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a6ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	fb02 f303 	mul.w	r3, r2, r3
 800a6d4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a6d6:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800a6da:	f7ff fd7b 	bl	800a1d4 <SUBGRF_ReadRegister>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a6e6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a6e8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800a6ec:	f7ff fd72 	bl	800a1d4 <SUBGRF_ReadRegister>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a70a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a70e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	095b      	lsrs	r3, r3, #5
 800a714:	6a3a      	ldr	r2, [r7, #32]
 800a716:	fb02 f303 	mul.w	r3, r2, r3
 800a71a:	11da      	asrs	r2, r3, #7
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	601a      	str	r2, [r3, #0]
}
 800a720:	bf00      	nop
 800a722:	3728      	adds	r7, #40	@ 0x28
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	0c0a0804 	.word	0x0c0a0804
 800a72c:	01e84800 	.word	0x01e84800

0800a730 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	4603      	mov	r3, r0
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a742:	f04f 33ff 	mov.w	r3, #4294967295
 800a746:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a748:	697b      	ldr	r3, [r7, #20]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	bc80      	pop	{r7}
 800a752:	4770      	bx	lr

0800a754 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a76c:	697b      	ldr	r3, [r7, #20]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	bc80      	pop	{r7}
 800a776:	4770      	bx	lr

0800a778 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a784:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr

0800a792 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a792:	b480      	push	{r7}
 800a794:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a796:	bf00      	nop
 800a798:	46bd      	mov	sp, r7
 800a79a:	bc80      	pop	{r7}
 800a79c:	4770      	bx	lr

0800a79e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a79e:	b480      	push	{r7}
 800a7a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a7a2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bc80      	pop	{r7}
 800a7aa:	4770      	bx	lr

0800a7ac <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a7b0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bc80      	pop	{r7}
 800a7b8:	4770      	bx	lr

0800a7ba <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b083      	sub	sp, #12
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bc80      	pop	{r7}
 800a7cc:	4770      	bx	lr

0800a7ce <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b087      	sub	sp, #28
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	607a      	str	r2, [r7, #4]
 800a7da:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a7e2:	697b      	ldr	r3, [r7, #20]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	371c      	adds	r7, #28
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr

0800a7ee <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bc80      	pop	{r7}
 800a7fc:	4770      	bx	lr

0800a7fe <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a7fe:	b480      	push	{r7}
 800a800:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a802:	bf00      	nop
 800a804:	46bd      	mov	sp, r7
 800a806:	bc80      	pop	{r7}
 800a808:	4770      	bx	lr

0800a80a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a80a:	b480      	push	{r7}
 800a80c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a80e:	bf00      	nop
 800a810:	46bd      	mov	sp, r7
 800a812:	bc80      	pop	{r7}
 800a814:	4770      	bx	lr

0800a816 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	4603      	mov	r3, r0
 800a81e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr

0800a82a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a82e:	f7f6 f8ff 	bl	8000a30 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a832:	f000 f80b 	bl	800a84c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a836:	bf00      	nop
 800a838:	bd80      	pop	{r7, pc}

0800a83a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a83e:	f04f 30ff 	mov.w	r0, #4294967295
 800a842:	f000 fc43 	bl	800b0cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a846:	bf00      	nop
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a850:	4b0a      	ldr	r3, [pc, #40]	@ (800a87c <SubghzApp_Init+0x30>)
 800a852:	4a0b      	ldr	r2, [pc, #44]	@ (800a880 <SubghzApp_Init+0x34>)
 800a854:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a856:	4b09      	ldr	r3, [pc, #36]	@ (800a87c <SubghzApp_Init+0x30>)
 800a858:	4a0a      	ldr	r2, [pc, #40]	@ (800a884 <SubghzApp_Init+0x38>)
 800a85a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a85c:	4b07      	ldr	r3, [pc, #28]	@ (800a87c <SubghzApp_Init+0x30>)
 800a85e:	4a0a      	ldr	r2, [pc, #40]	@ (800a888 <SubghzApp_Init+0x3c>)
 800a860:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a862:	4b06      	ldr	r3, [pc, #24]	@ (800a87c <SubghzApp_Init+0x30>)
 800a864:	4a09      	ldr	r2, [pc, #36]	@ (800a88c <SubghzApp_Init+0x40>)
 800a866:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a868:	4b04      	ldr	r3, [pc, #16]	@ (800a87c <SubghzApp_Init+0x30>)
 800a86a:	4a09      	ldr	r2, [pc, #36]	@ (800a890 <SubghzApp_Init+0x44>)
 800a86c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a86e:	4b09      	ldr	r3, [pc, #36]	@ (800a894 <SubghzApp_Init+0x48>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4802      	ldr	r0, [pc, #8]	@ (800a87c <SubghzApp_Init+0x30>)
 800a874:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800a876:	bf00      	nop
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20000324 	.word	0x20000324
 800a880:	0800a899 	.word	0x0800a899
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a8c9 	.word	0x0800a8c9
 800a88c:	0800a8d5 	.word	0x0800a8d5
 800a890:	0800a8e1 	.word	0x0800a8e1
 800a894:	0800c030 	.word	0x0800c030

0800a898 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800a89c:	bf00      	nop
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	817b      	strh	r3, [r7, #10]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	813b      	strh	r3, [r7, #8]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr

0800a8c8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800a8cc:	bf00      	nop
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bc80      	pop	{r7}
 800a8d2:	4770      	bx	lr

0800a8d4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800a8d8:	bf00      	nop
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bc80      	pop	{r7}
 800a8de:	4770      	bx	lr

0800a8e0 <OnRxError>:

static void OnRxError(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr

0800a8ec <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a8f0:	f7f6 fe4e 	bl	8001590 <BSP_RADIO_Init>
 800a8f4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	4603      	mov	r3, r0
 800a902:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a904:	79fb      	ldrb	r3, [r7, #7]
 800a906:	4618      	mov	r0, r3
 800a908:	f7f6 fe80 	bl	800160c <BSP_RADIO_ConfigRFSwitch>
 800a90c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a91a:	f7f6 fed3 	bl	80016c4 <BSP_RADIO_GetTxConfig>
 800a91e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a920:	4618      	mov	r0, r3
 800a922:	bd80      	pop	{r7, pc}

0800a924 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a928:	f7f6 fed3 	bl	80016d2 <BSP_RADIO_IsTCXO>
 800a92c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a92e:	4618      	mov	r0, r3
 800a930:	bd80      	pop	{r7, pc}

0800a932 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a936:	f7f6 fed3 	bl	80016e0 <BSP_RADIO_IsDCDC>
 800a93a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7f6 fece 	bl	80016ee <BSP_RADIO_GetRFOMaxPowerConfig>
 800a952:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a960:	4b04      	ldr	r3, [pc, #16]	@ (800a974 <UTIL_LPM_Init+0x18>)
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a966:	4b04      	ldr	r3, [pc, #16]	@ (800a978 <UTIL_LPM_Init+0x1c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a96c:	bf00      	nop
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr
 800a974:	20000340 	.word	0x20000340
 800a978:	20000344 	.word	0x20000344

0800a97c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a988:	f3ef 8310 	mrs	r3, PRIMASK
 800a98c:	613b      	str	r3, [r7, #16]
  return(result);
 800a98e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a992:	b672      	cpsid	i
}
 800a994:	bf00      	nop
  
  switch( state )
 800a996:	78fb      	ldrb	r3, [r7, #3]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d008      	beq.n	800a9ae <UTIL_LPM_SetStopMode+0x32>
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d10e      	bne.n	800a9be <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a9a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d8 <UTIL_LPM_SetStopMode+0x5c>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	4a0b      	ldr	r2, [pc, #44]	@ (800a9d8 <UTIL_LPM_SetStopMode+0x5c>)
 800a9aa:	6013      	str	r3, [r2, #0]
      break;
 800a9ac:	e008      	b.n	800a9c0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	43da      	mvns	r2, r3
 800a9b2:	4b09      	ldr	r3, [pc, #36]	@ (800a9d8 <UTIL_LPM_SetStopMode+0x5c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	4a07      	ldr	r2, [pc, #28]	@ (800a9d8 <UTIL_LPM_SetStopMode+0x5c>)
 800a9ba:	6013      	str	r3, [r2, #0]
      break;
 800a9bc:	e000      	b.n	800a9c0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a9be:	bf00      	nop
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f383 8810 	msr	PRIMASK, r3
}
 800a9ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a9cc:	bf00      	nop
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	20000340 	.word	0x20000340

0800a9dc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ec:	613b      	str	r3, [r7, #16]
  return(result);
 800a9ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a9f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9f2:	b672      	cpsid	i
}
 800a9f4:	bf00      	nop
  
  switch(state)
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d008      	beq.n	800aa0e <UTIL_LPM_SetOffMode+0x32>
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d10e      	bne.n	800aa1e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800aa00:	4b0d      	ldr	r3, [pc, #52]	@ (800aa38 <UTIL_LPM_SetOffMode+0x5c>)
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	4a0b      	ldr	r2, [pc, #44]	@ (800aa38 <UTIL_LPM_SetOffMode+0x5c>)
 800aa0a:	6013      	str	r3, [r2, #0]
      break;
 800aa0c:	e008      	b.n	800aa20 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	43da      	mvns	r2, r3
 800aa12:	4b09      	ldr	r3, [pc, #36]	@ (800aa38 <UTIL_LPM_SetOffMode+0x5c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4013      	ands	r3, r2
 800aa18:	4a07      	ldr	r2, [pc, #28]	@ (800aa38 <UTIL_LPM_SetOffMode+0x5c>)
 800aa1a:	6013      	str	r3, [r2, #0]
      break;
 800aa1c:	e000      	b.n	800aa20 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800aa1e:	bf00      	nop
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f383 8810 	msr	PRIMASK, r3
}
 800aa2a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800aa2c:	bf00      	nop
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	20000344 	.word	0x20000344

0800aa3c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa42:	f3ef 8310 	mrs	r3, PRIMASK
 800aa46:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa48:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800aa4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa4c:	b672      	cpsid	i
}
 800aa4e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800aa50:	4b12      	ldr	r3, [pc, #72]	@ (800aa9c <UTIL_LPM_EnterLowPower+0x60>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d006      	beq.n	800aa66 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800aa58:	4b11      	ldr	r3, [pc, #68]	@ (800aaa0 <UTIL_LPM_EnterLowPower+0x64>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800aa5e:	4b10      	ldr	r3, [pc, #64]	@ (800aaa0 <UTIL_LPM_EnterLowPower+0x64>)
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	4798      	blx	r3
 800aa64:	e010      	b.n	800aa88 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800aa66:	4b0f      	ldr	r3, [pc, #60]	@ (800aaa4 <UTIL_LPM_EnterLowPower+0x68>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d006      	beq.n	800aa7c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa0 <UTIL_LPM_EnterLowPower+0x64>)
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800aa74:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa0 <UTIL_LPM_EnterLowPower+0x64>)
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	4798      	blx	r3
 800aa7a:	e005      	b.n	800aa88 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800aa7c:	4b08      	ldr	r3, [pc, #32]	@ (800aaa0 <UTIL_LPM_EnterLowPower+0x64>)
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800aa82:	4b07      	ldr	r3, [pc, #28]	@ (800aaa0 <UTIL_LPM_EnterLowPower+0x64>)
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	4798      	blx	r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f383 8810 	msr	PRIMASK, r3
}
 800aa92:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800aa94:	bf00      	nop
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20000340 	.word	0x20000340
 800aaa0:	0800bf00 	.word	0x0800bf00
 800aaa4:	20000344 	.word	0x20000344

0800aaa8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	4613      	mov	r3, r2
 800aab4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	613b      	str	r3, [r7, #16]

  while( size-- )
 800aabe:	e007      	b.n	800aad0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	1c53      	adds	r3, r2, #1
 800aac4:	613b      	str	r3, [r7, #16]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	1c59      	adds	r1, r3, #1
 800aaca:	6179      	str	r1, [r7, #20]
 800aacc:	7812      	ldrb	r2, [r2, #0]
 800aace:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	1e5a      	subs	r2, r3, #1
 800aad4:	80fa      	strh	r2, [r7, #6]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f2      	bne.n	800aac0 <UTIL_MEM_cpy_8+0x18>
    }
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	371c      	adds	r7, #28
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bc80      	pop	{r7}
 800aae4:	4770      	bx	lr

0800aae6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	70fb      	strb	r3, [r7, #3]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800aafa:	e004      	b.n	800ab06 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	60fa      	str	r2, [r7, #12]
 800ab02:	78fa      	ldrb	r2, [r7, #3]
 800ab04:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ab06:	883b      	ldrh	r3, [r7, #0]
 800ab08:	1e5a      	subs	r2, r3, #1
 800ab0a:	803a      	strh	r2, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1f5      	bne.n	800aafc <UTIL_MEM_set_8+0x16>
  }
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bc80      	pop	{r7}
 800ab1a:	4770      	bx	lr

0800ab1c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	b480      	push	{r7}
 800ab20:	b087      	sub	sp, #28
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	1d38      	adds	r0, r7, #4
 800ab28:	e880 0006 	stmia.w	r0, {r1, r2}
 800ab2c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800ab2e:	2300      	movs	r3, #0
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	2300      	movs	r3, #0
 800ab34:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	4413      	add	r3, r2
 800ab3c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ab3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	b21b      	sxth	r3, r3
 800ab50:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800ab52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ab56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ab5a:	db0a      	blt.n	800ab72 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800ab62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	b21b      	sxth	r3, r3
 800ab70:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	461a      	mov	r2, r3
 800ab76:	f107 0310 	add.w	r3, r7, #16
 800ab7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab7e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bc80      	pop	{r7}
 800ab8a:	b002      	add	sp, #8
 800ab8c:	4770      	bx	lr
	...

0800ab90 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	@ 0x28
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61bb      	str	r3, [r7, #24]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800aba0:	2300      	movs	r3, #0
 800aba2:	613b      	str	r3, [r7, #16]
 800aba4:	2300      	movs	r3, #0
 800aba6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800aba8:	4b14      	ldr	r3, [pc, #80]	@ (800abfc <SysTimeGet+0x6c>)
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f107 0218 	add.w	r2, r7, #24
 800abb0:	3204      	adds	r2, #4
 800abb2:	4610      	mov	r0, r2
 800abb4:	4798      	blx	r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800abba:	4b10      	ldr	r3, [pc, #64]	@ (800abfc <SysTimeGet+0x6c>)
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	4798      	blx	r3
 800abc0:	4603      	mov	r3, r0
 800abc2:	b21b      	sxth	r3, r3
 800abc4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800abc6:	4b0d      	ldr	r3, [pc, #52]	@ (800abfc <SysTimeGet+0x6c>)
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800abd0:	f107 0010 	add.w	r0, r7, #16
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	f107 0208 	add.w	r2, r7, #8
 800abde:	ca06      	ldmia	r2, {r1, r2}
 800abe0:	f7ff ff9c 	bl	800ab1c <SysTimeAdd>

  return sysTime;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f107 0310 	add.w	r3, r7, #16
 800abec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abf0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	3720      	adds	r7, #32
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	0800bfe4 	.word	0x0800bfe4

0800ac00 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  int i = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800ac0c:	e00e      	b.n	800ac2c <ee_skip_atoi+0x2c>
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	4618      	mov	r0, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	1c59      	adds	r1, r3, #1
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6011      	str	r1, [r2, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	4403      	add	r3, r0
 800ac28:	3b30      	subs	r3, #48	@ 0x30
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b2f      	cmp	r3, #47	@ 0x2f
 800ac34:	d904      	bls.n	800ac40 <ee_skip_atoi+0x40>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b39      	cmp	r3, #57	@ 0x39
 800ac3e:	d9e6      	bls.n	800ac0e <ee_skip_atoi+0xe>
  return i;
 800ac40:	68fb      	ldr	r3, [r7, #12]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bc80      	pop	{r7}
 800ac4a:	4770      	bx	lr

0800ac4c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b099      	sub	sp, #100	@ 0x64
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800ac5a:	4b71      	ldr	r3, [pc, #452]	@ (800ae20 <ee_number+0x1d4>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800ac60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <ee_number+0x24>
 800ac6a:	4b6e      	ldr	r3, [pc, #440]	@ (800ae24 <ee_number+0x1d8>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	dd02      	ble.n	800ac7c <ee_number+0x30>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b24      	cmp	r3, #36	@ 0x24
 800ac7a:	dd01      	ble.n	800ac80 <ee_number+0x34>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e0ca      	b.n	800ae16 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800ac80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <ee_number+0x42>
 800ac8a:	2330      	movs	r3, #48	@ 0x30
 800ac8c:	e000      	b.n	800ac90 <ee_number+0x44>
 800ac8e:	2320      	movs	r3, #32
 800ac90:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800ac9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac9c:	f003 0302 	and.w	r3, r3, #2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <ee_number+0x70>
  {
    if (num < 0)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da08      	bge.n	800acbc <ee_number+0x70>
    {
      sign = '-';
 800acaa:	232d      	movs	r3, #45	@ 0x2d
 800acac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	425b      	negs	r3, r3
 800acb4:	607b      	str	r3, [r7, #4]
      size--;
 800acb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acb8:	3b01      	subs	r3, #1
 800acba:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d11e      	bne.n	800ad04 <ee_number+0xb8>
    tmp[i++] = '0';
 800acc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	657a      	str	r2, [r7, #84]	@ 0x54
 800accc:	3360      	adds	r3, #96	@ 0x60
 800acce:	443b      	add	r3, r7
 800acd0:	2230      	movs	r2, #48	@ 0x30
 800acd2:	f803 2c50 	strb.w	r2, [r3, #-80]
 800acd6:	e018      	b.n	800ad0a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ace0:	fb01 f202 	mul.w	r2, r1, r2
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ace8:	441a      	add	r2, r3
 800acea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acec:	1c59      	adds	r1, r3, #1
 800acee:	6579      	str	r1, [r7, #84]	@ 0x54
 800acf0:	7812      	ldrb	r2, [r2, #0]
 800acf2:	3360      	adds	r3, #96	@ 0x60
 800acf4:	443b      	add	r3, r7
 800acf6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad02:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e6      	bne.n	800acd8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800ad0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	dd01      	ble.n	800ad16 <ee_number+0xca>
 800ad12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800ad16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800ad1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d112      	bne.n	800ad4e <ee_number+0x102>
 800ad28:	e00c      	b.n	800ad44 <ee_number+0xf8>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	60fa      	str	r2, [r7, #12]
 800ad30:	2220      	movs	r2, #32
 800ad32:	701a      	strb	r2, [r3, #0]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	3b01      	subs	r3, #1
 800ad38:	60bb      	str	r3, [r7, #8]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <ee_number+0xf8>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	e068      	b.n	800ae16 <ee_number+0x1ca>
 800ad44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad46:	1e5a      	subs	r2, r3, #1
 800ad48:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dced      	bgt.n	800ad2a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800ad4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d01b      	beq.n	800ad8e <ee_number+0x142>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	60fa      	str	r2, [r7, #12]
 800ad5c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800ad60:	701a      	strb	r2, [r3, #0]
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60bb      	str	r3, [r7, #8]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10f      	bne.n	800ad8e <ee_number+0x142>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	e051      	b.n	800ae16 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	60fa      	str	r2, [r7, #12]
 800ad78:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	60bb      	str	r3, [r7, #8]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <ee_number+0x142>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	e043      	b.n	800ae16 <ee_number+0x1ca>
 800ad8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad90:	1e5a      	subs	r2, r3, #1
 800ad92:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dcec      	bgt.n	800ad72 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800ad98:	e00c      	b.n	800adb4 <ee_number+0x168>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	1c5a      	adds	r2, r3, #1
 800ad9e:	60fa      	str	r2, [r7, #12]
 800ada0:	2230      	movs	r2, #48	@ 0x30
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	60bb      	str	r3, [r7, #8]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <ee_number+0x168>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	e030      	b.n	800ae16 <ee_number+0x1ca>
 800adb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adb6:	1e5a      	subs	r2, r3, #1
 800adb8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800adba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adbc:	429a      	cmp	r2, r3
 800adbe:	dbec      	blt.n	800ad9a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800adc0:	e010      	b.n	800ade4 <ee_number+0x198>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	1c5a      	adds	r2, r3, #1
 800adc6:	60fa      	str	r2, [r7, #12]
 800adc8:	f107 0110 	add.w	r1, r7, #16
 800adcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adce:	440a      	add	r2, r1
 800add0:	7812      	ldrb	r2, [r2, #0]
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	3b01      	subs	r3, #1
 800add8:	60bb      	str	r3, [r7, #8]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <ee_number+0x198>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	e018      	b.n	800ae16 <ee_number+0x1ca>
 800ade4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ade6:	1e5a      	subs	r2, r3, #1
 800ade8:	657a      	str	r2, [r7, #84]	@ 0x54
 800adea:	2b00      	cmp	r3, #0
 800adec:	dce9      	bgt.n	800adc2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800adee:	e00c      	b.n	800ae0a <ee_number+0x1be>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	60fa      	str	r2, [r7, #12]
 800adf6:	2220      	movs	r2, #32
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	60bb      	str	r3, [r7, #8]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <ee_number+0x1be>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	e005      	b.n	800ae16 <ee_number+0x1ca>
 800ae0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dced      	bgt.n	800adf0 <ee_number+0x1a4>

  return str;
 800ae14:	68fb      	ldr	r3, [r7, #12]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3764      	adds	r7, #100	@ 0x64
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc80      	pop	{r7}
 800ae1e:	4770      	bx	lr
 800ae20:	2000000c 	.word	0x2000000c
 800ae24:	20000010 	.word	0x20000010

0800ae28 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b092      	sub	sp, #72	@ 0x48
 800ae2c:	af04      	add	r7, sp, #16
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dc01      	bgt.n	800ae40 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e13e      	b.n	800b0be <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae44:	e128      	b.n	800b098 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800ae46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	1ad2      	subs	r2, r2, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	429a      	cmp	r2, r3
 800ae52:	f280 812e 	bge.w	800b0b2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	2b25      	cmp	r3, #37	@ 0x25
 800ae5c:	d006      	beq.n	800ae6c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae62:	1c59      	adds	r1, r3, #1
 800ae64:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ae66:	7812      	ldrb	r2, [r2, #0]
 800ae68:	701a      	strb	r2, [r3, #0]
      continue;
 800ae6a:	e112      	b.n	800b092 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3301      	adds	r3, #1
 800ae74:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b30      	cmp	r3, #48	@ 0x30
 800ae7c:	d103      	bne.n	800ae86 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	f043 0301 	orr.w	r3, r3, #1
 800ae84:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800ae86:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae92:	d908      	bls.n	800aea6 <tiny_vsnprintf_like+0x7e>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b39      	cmp	r3, #57	@ 0x39
 800ae9a:	d804      	bhi.n	800aea6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800ae9c:	1d3b      	adds	r3, r7, #4
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff feae 	bl	800ac00 <ee_skip_atoi>
 800aea4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800aea6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeaa:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800aeb2:	230a      	movs	r3, #10
 800aeb4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	3b58      	subs	r3, #88	@ 0x58
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	f200 8094 	bhi.w	800afea <tiny_vsnprintf_like+0x1c2>
 800aec2:	a201      	add	r2, pc, #4	@ (adr r2, 800aec8 <tiny_vsnprintf_like+0xa0>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800afd3 	.word	0x0800afd3
 800aecc:	0800afeb 	.word	0x0800afeb
 800aed0:	0800afeb 	.word	0x0800afeb
 800aed4:	0800afeb 	.word	0x0800afeb
 800aed8:	0800afeb 	.word	0x0800afeb
 800aedc:	0800afeb 	.word	0x0800afeb
 800aee0:	0800afeb 	.word	0x0800afeb
 800aee4:	0800afeb 	.word	0x0800afeb
 800aee8:	0800afeb 	.word	0x0800afeb
 800aeec:	0800afeb 	.word	0x0800afeb
 800aef0:	0800afeb 	.word	0x0800afeb
 800aef4:	0800af57 	.word	0x0800af57
 800aef8:	0800afe1 	.word	0x0800afe1
 800aefc:	0800afeb 	.word	0x0800afeb
 800af00:	0800afeb 	.word	0x0800afeb
 800af04:	0800afeb 	.word	0x0800afeb
 800af08:	0800afeb 	.word	0x0800afeb
 800af0c:	0800afe1 	.word	0x0800afe1
 800af10:	0800afeb 	.word	0x0800afeb
 800af14:	0800afeb 	.word	0x0800afeb
 800af18:	0800afeb 	.word	0x0800afeb
 800af1c:	0800afeb 	.word	0x0800afeb
 800af20:	0800afeb 	.word	0x0800afeb
 800af24:	0800afeb 	.word	0x0800afeb
 800af28:	0800afeb 	.word	0x0800afeb
 800af2c:	0800afeb 	.word	0x0800afeb
 800af30:	0800afeb 	.word	0x0800afeb
 800af34:	0800af77 	.word	0x0800af77
 800af38:	0800afeb 	.word	0x0800afeb
 800af3c:	0800b037 	.word	0x0800b037
 800af40:	0800afeb 	.word	0x0800afeb
 800af44:	0800afeb 	.word	0x0800afeb
 800af48:	0800afdb 	.word	0x0800afdb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800af4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af52:	2220      	movs	r2, #32
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	3b01      	subs	r3, #1
 800af5a:	61fb      	str	r3, [r7, #28]
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	dcf4      	bgt.n	800af4c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	1d1a      	adds	r2, r3, #4
 800af66:	603a      	str	r2, [r7, #0]
 800af68:	6819      	ldr	r1, [r3, #0]
 800af6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af70:	b2ca      	uxtb	r2, r1
 800af72:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800af74:	e08d      	b.n	800b092 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	1d1a      	adds	r2, r3, #4
 800af7a:	603a      	str	r2, [r7, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <tiny_vsnprintf_like+0x162>
 800af86:	4b50      	ldr	r3, [pc, #320]	@ (800b0c8 <tiny_vsnprintf_like+0x2a0>)
 800af88:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800af8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af8c:	f7f5 f8f4 	bl	8000178 <strlen>
 800af90:	4603      	mov	r3, r0
 800af92:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800af94:	e004      	b.n	800afa0 <tiny_vsnprintf_like+0x178>
 800af96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af9c:	2220      	movs	r2, #32
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	1e5a      	subs	r2, r3, #1
 800afa4:	61fa      	str	r2, [r7, #28]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	dbf4      	blt.n	800af96 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800afac:	2300      	movs	r3, #0
 800afae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afb0:	e00a      	b.n	800afc8 <tiny_vsnprintf_like+0x1a0>
 800afb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb4:	1c53      	adds	r3, r2, #1
 800afb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800afb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afba:	1c59      	adds	r1, r3, #1
 800afbc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800afbe:	7812      	ldrb	r2, [r2, #0]
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc4:	3301      	adds	r3, #1
 800afc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	429a      	cmp	r2, r3
 800afce:	dbf0      	blt.n	800afb2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800afd0:	e05f      	b.n	800b092 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800afda:	2310      	movs	r3, #16
 800afdc:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800afde:	e02b      	b.n	800b038 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	f043 0302 	orr.w	r3, r3, #2
 800afe6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800afe8:	e025      	b.n	800b036 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b25      	cmp	r3, #37	@ 0x25
 800aff0:	d004      	beq.n	800affc <tiny_vsnprintf_like+0x1d4>
 800aff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aff8:	2225      	movs	r2, #37	@ 0x25
 800affa:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800affc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1ad2      	subs	r2, r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	3b01      	subs	r3, #1
 800b006:	429a      	cmp	r2, r3
 800b008:	da16      	bge.n	800b038 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d006      	beq.n	800b020 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b016:	1c59      	adds	r1, r3, #1
 800b018:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b01a:	7812      	ldrb	r2, [r2, #0]
 800b01c:	701a      	strb	r2, [r3, #0]
 800b01e:	e002      	b.n	800b026 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3b01      	subs	r3, #1
 800b024:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	1ad2      	subs	r2, r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3b01      	subs	r3, #1
 800b030:	429a      	cmp	r2, r3
 800b032:	db2d      	blt.n	800b090 <tiny_vsnprintf_like+0x268>
 800b034:	e000      	b.n	800b038 <tiny_vsnprintf_like+0x210>
        break;
 800b036:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2b6c      	cmp	r3, #108	@ 0x6c
 800b03c:	d105      	bne.n	800b04a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	603a      	str	r2, [r7, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	637b      	str	r3, [r7, #52]	@ 0x34
 800b048:	e00f      	b.n	800b06a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	f003 0302 	and.w	r3, r3, #2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d005      	beq.n	800b060 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	1d1a      	adds	r2, r3, #4
 800b058:	603a      	str	r2, [r7, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b05e:	e004      	b.n	800b06a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	1d1a      	adds	r2, r3, #4
 800b064:	603a      	str	r2, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	1e5a      	subs	r2, r3, #1
 800b06e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	1acb      	subs	r3, r1, r3
 800b074:	1ad1      	subs	r1, r2, r3
 800b076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	9302      	str	r3, [sp, #8]
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b088:	f7ff fde0 	bl	800ac4c <ee_number>
 800b08c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b08e:	e000      	b.n	800b092 <tiny_vsnprintf_like+0x26a>
        continue;
 800b090:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3301      	adds	r3, #1
 800b096:	607b      	str	r3, [r7, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f47f aed2 	bne.w	800ae46 <tiny_vsnprintf_like+0x1e>
 800b0a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	1ad2      	subs	r2, r2, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	f6bf aeca 	bge.w	800ae46 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b0b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	1ad3      	subs	r3, r2, r3
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3738      	adds	r7, #56	@ 0x38
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800bef8 	.word	0x0800bef8

0800b0cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b090      	sub	sp, #64	@ 0x40
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b0d4:	4b73      	ldr	r3, [pc, #460]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800b0da:	4b72      	ldr	r3, [pc, #456]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	4a70      	ldr	r2, [pc, #448]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b0e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b0e6:	4b70      	ldr	r3, [pc, #448]	@ (800b2a8 <UTIL_SEQ_Run+0x1dc>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b0ec:	4b6f      	ldr	r3, [pc, #444]	@ (800b2ac <UTIL_SEQ_Run+0x1e0>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b0f2:	4b6f      	ldr	r3, [pc, #444]	@ (800b2b0 <UTIL_SEQ_Run+0x1e4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800b0f8:	4b6e      	ldr	r3, [pc, #440]	@ (800b2b4 <UTIL_SEQ_Run+0x1e8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b0fe:	e08d      	b.n	800b21c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b104:	e002      	b.n	800b10c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b108:	3301      	adds	r3, #1
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b10c:	4a6a      	ldr	r2, [pc, #424]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b110:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	401a      	ands	r2, r3
 800b118:	4b62      	ldr	r3, [pc, #392]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4013      	ands	r3, r2
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0f1      	beq.n	800b106 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b122:	4a65      	ldr	r2, [pc, #404]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b126:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12c:	401a      	ands	r2, r3
 800b12e:	4b5d      	ldr	r3, [pc, #372]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4013      	ands	r3, r2
 800b134:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b136:	4a60      	ldr	r2, [pc, #384]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13a:	00db      	lsls	r3, r3, #3
 800b13c:	4413      	add	r3, r2
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b142:	4013      	ands	r3, r2
 800b144:	2b00      	cmp	r3, #0
 800b146:	d106      	bne.n	800b156 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b148:	4a5b      	ldr	r2, [pc, #364]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b14c:	00db      	lsls	r3, r3, #3
 800b14e:	4413      	add	r3, r2
 800b150:	f04f 32ff 	mov.w	r2, #4294967295
 800b154:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b156:	4a58      	ldr	r2, [pc, #352]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	4413      	add	r3, r2
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b162:	4013      	ands	r3, r2
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f8b9 	bl	800b2dc <SEQ_BitPosition>
 800b16a:	4603      	mov	r3, r0
 800b16c:	461a      	mov	r2, r3
 800b16e:	4b53      	ldr	r3, [pc, #332]	@ (800b2bc <UTIL_SEQ_Run+0x1f0>)
 800b170:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b172:	4a51      	ldr	r2, [pc, #324]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	4413      	add	r3, r2
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	4b4f      	ldr	r3, [pc, #316]	@ (800b2bc <UTIL_SEQ_Run+0x1f0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2101      	movs	r1, #1
 800b182:	fa01 f303 	lsl.w	r3, r1, r3
 800b186:	43db      	mvns	r3, r3
 800b188:	401a      	ands	r2, r3
 800b18a:	494b      	ldr	r1, [pc, #300]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	440b      	add	r3, r1
 800b192:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b194:	f3ef 8310 	mrs	r3, PRIMASK
 800b198:	61bb      	str	r3, [r7, #24]
  return(result);
 800b19a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b19c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b19e:	b672      	cpsid	i
}
 800b1a0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b1a2:	4b46      	ldr	r3, [pc, #280]	@ (800b2bc <UTIL_SEQ_Run+0x1f0>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ac:	43da      	mvns	r2, r3
 800b1ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b2a8 <UTIL_SEQ_Run+0x1dc>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b2a8 <UTIL_SEQ_Run+0x1dc>)
 800b1b6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1bc:	e013      	b.n	800b1e6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b1be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	4a3d      	ldr	r2, [pc, #244]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b1c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b1c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b2bc <UTIL_SEQ_Run+0x1f0>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d2:	43da      	mvns	r2, r3
 800b1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	400a      	ands	r2, r1
 800b1da:	4937      	ldr	r1, [pc, #220]	@ (800b2b8 <UTIL_SEQ_Run+0x1ec>)
 800b1dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1e8      	bne.n	800b1be <UTIL_SEQ_Run+0xf2>
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f383 8810 	msr	PRIMASK, r3
}
 800b1f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b1f8:	4b30      	ldr	r3, [pc, #192]	@ (800b2bc <UTIL_SEQ_Run+0x1f0>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a30      	ldr	r2, [pc, #192]	@ (800b2c0 <UTIL_SEQ_Run+0x1f4>)
 800b1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b202:	4798      	blx	r3

    local_taskset = TaskSet;
 800b204:	4b28      	ldr	r3, [pc, #160]	@ (800b2a8 <UTIL_SEQ_Run+0x1dc>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800b20a:	4b28      	ldr	r3, [pc, #160]	@ (800b2ac <UTIL_SEQ_Run+0x1e0>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800b210:	4b27      	ldr	r3, [pc, #156]	@ (800b2b0 <UTIL_SEQ_Run+0x1e4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800b216:	4b27      	ldr	r3, [pc, #156]	@ (800b2b4 <UTIL_SEQ_Run+0x1e8>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b21c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	401a      	ands	r2, r3
 800b222:	4b20      	ldr	r3, [pc, #128]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4013      	ands	r3, r2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d005      	beq.n	800b238 <UTIL_SEQ_Run+0x16c>
 800b22c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b230:	4013      	ands	r3, r2
 800b232:	2b00      	cmp	r3, #0
 800b234:	f43f af64 	beq.w	800b100 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b238:	4b20      	ldr	r3, [pc, #128]	@ (800b2bc <UTIL_SEQ_Run+0x1f0>)
 800b23a:	f04f 32ff 	mov.w	r2, #4294967295
 800b23e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b240:	f000 f840 	bl	800b2c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b244:	f3ef 8310 	mrs	r3, PRIMASK
 800b248:	613b      	str	r3, [r7, #16]
  return(result);
 800b24a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b24c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b24e:	b672      	cpsid	i
}
 800b250:	bf00      	nop
  local_taskset = TaskSet;
 800b252:	4b15      	ldr	r3, [pc, #84]	@ (800b2a8 <UTIL_SEQ_Run+0x1dc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b258:	4b14      	ldr	r3, [pc, #80]	@ (800b2ac <UTIL_SEQ_Run+0x1e0>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b25e:	4b14      	ldr	r3, [pc, #80]	@ (800b2b0 <UTIL_SEQ_Run+0x1e4>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b268:	401a      	ands	r2, r3
 800b26a:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4013      	ands	r3, r2
 800b270:	2b00      	cmp	r3, #0
 800b272:	d107      	bne.n	800b284 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b274:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b4 <UTIL_SEQ_Run+0x1e8>)
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b280:	f7f5 fbf6 	bl	8000a70 <UTIL_SEQ_Idle>
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f383 8810 	msr	PRIMASK, r3
}
 800b28e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b290:	f000 f81e 	bl	800b2d0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b294:	4a03      	ldr	r2, [pc, #12]	@ (800b2a4 <UTIL_SEQ_Run+0x1d8>)
 800b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b298:	6013      	str	r3, [r2, #0]

  return;
 800b29a:	bf00      	nop
}
 800b29c:	3740      	adds	r7, #64	@ 0x40
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000018 	.word	0x20000018
 800b2a8:	20000348 	.word	0x20000348
 800b2ac:	2000034c 	.word	0x2000034c
 800b2b0:	20000014 	.word	0x20000014
 800b2b4:	20000350 	.word	0x20000350
 800b2b8:	2000035c 	.word	0x2000035c
 800b2bc:	20000354 	.word	0x20000354
 800b2c0:	20000358 	.word	0x20000358

0800b2c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b2c8:	bf00      	nop
}
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bc80      	pop	{r7}
 800b2ce:	4770      	bx	lr

0800b2d0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b2d4:	bf00      	nop
}
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bc80      	pop	{r7}
 800b2da:	4770      	bx	lr

0800b2dc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2f2:	d204      	bcs.n	800b2fe <SEQ_BitPosition+0x22>
 800b2f4:	2310      	movs	r3, #16
 800b2f6:	73fb      	strb	r3, [r7, #15]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	041b      	lsls	r3, r3, #16
 800b2fc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b304:	d205      	bcs.n	800b312 <SEQ_BitPosition+0x36>
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	3308      	adds	r3, #8
 800b30a:	73fb      	strb	r3, [r7, #15]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	021b      	lsls	r3, r3, #8
 800b310:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b318:	d205      	bcs.n	800b326 <SEQ_BitPosition+0x4a>
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	3304      	adds	r3, #4
 800b31e:	73fb      	strb	r3, [r7, #15]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	0f1b      	lsrs	r3, r3, #28
 800b32a:	4a07      	ldr	r2, [pc, #28]	@ (800b348 <SEQ_BitPosition+0x6c>)
 800b32c:	5cd2      	ldrb	r2, [r2, r3]
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	4413      	add	r3, r2
 800b332:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	f1c3 031f 	rsb	r3, r3, #31
 800b33a:	b2db      	uxtb	r3, r3
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	bc80      	pop	{r7}
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	0800c170 	.word	0x0800c170

0800b34c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b350:	4b04      	ldr	r3, [pc, #16]	@ (800b364 <UTIL_TIMER_Init+0x18>)
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b356:	4b04      	ldr	r3, [pc, #16]	@ (800b368 <UTIL_TIMER_Init+0x1c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4798      	blx	r3
 800b35c:	4603      	mov	r3, r0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	20000364 	.word	0x20000364
 800b368:	0800bfb8 	.word	0x0800bfb8

0800b36c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	4613      	mov	r3, r2
 800b37a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d023      	beq.n	800b3ca <UTIL_TIMER_Create+0x5e>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d020      	beq.n	800b3ca <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b38e:	4b11      	ldr	r3, [pc, #68]	@ (800b3d4 <UTIL_TIMER_Create+0x68>)
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	68b8      	ldr	r0, [r7, #8]
 800b394:	4798      	blx	r3
 800b396:	4602      	mov	r2, r0
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	69ba      	ldr	r2, [r7, #24]
 800b3b8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	79fa      	ldrb	r2, [r7, #7]
 800b3be:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e000      	b.n	800b3cc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b3ca:	2301      	movs	r3, #1
  }
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	0800bfb8 	.word	0x0800bfb8

0800b3d8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b08a      	sub	sp, #40	@ 0x28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d056      	beq.n	800b49a <UTIL_TIMER_Start+0xc2>
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f9a9 	bl	800b744 <TimerExists>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	f083 0301 	eor.w	r3, r3, #1
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d04d      	beq.n	800b49a <UTIL_TIMER_Start+0xc2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	7a5b      	ldrb	r3, [r3, #9]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d149      	bne.n	800b49a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b406:	f3ef 8310 	mrs	r3, PRIMASK
 800b40a:	613b      	str	r3, [r7, #16]
  return(result);
 800b40c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b40e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b410:	b672      	cpsid	i
}
 800b412:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b41a:	4b24      	ldr	r3, [pc, #144]	@ (800b4ac <UTIL_TIMER_Start+0xd4>)
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	4798      	blx	r3
 800b420:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b422:	6a3a      	ldr	r2, [r7, #32]
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	429a      	cmp	r2, r3
 800b428:	d201      	bcs.n	800b42e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a3a      	ldr	r2, [r7, #32]
 800b432:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b446:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b0 <UTIL_TIMER_Start+0xd8>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b44e:	4b17      	ldr	r3, [pc, #92]	@ (800b4ac <UTIL_TIMER_Start+0xd4>)
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f9eb 	bl	800b830 <TimerInsertNewHeadTimer>
 800b45a:	e017      	b.n	800b48c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b45c:	4b13      	ldr	r3, [pc, #76]	@ (800b4ac <UTIL_TIMER_Start+0xd4>)
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	4798      	blx	r3
 800b462:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	441a      	add	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	4b0e      	ldr	r3, [pc, #56]	@ (800b4b0 <UTIL_TIMER_Start+0xd8>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d203      	bcs.n	800b486 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f9d6 	bl	800b830 <TimerInsertNewHeadTimer>
 800b484:	e002      	b.n	800b48c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f9a2 	bl	800b7d0 <TimerInsertTimer>
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f383 8810 	msr	PRIMASK, r3
}
 800b496:	bf00      	nop
  {
 800b498:	e002      	b.n	800b4a0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800b4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3728      	adds	r7, #40	@ 0x28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	0800bfb8 	.word	0x0800bfb8
 800b4b0:	20000364 	.word	0x20000364

0800b4b4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d05b      	beq.n	800b57e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b4ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4d0:	b672      	cpsid	i
}
 800b4d2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b4d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b4da:	4b2c      	ldr	r3, [pc, #176]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b4e6:	4b29      	ldr	r3, [pc, #164]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d041      	beq.n	800b572 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b4f4:	4b25      	ldr	r3, [pc, #148]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d134      	bne.n	800b568 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b4fe:	4b23      	ldr	r3, [pc, #140]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2200      	movs	r2, #0
 800b504:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b506:	4b21      	ldr	r3, [pc, #132]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b510:	4b1e      	ldr	r3, [pc, #120]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	4a1d      	ldr	r2, [pc, #116]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b518:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b51a:	4b1c      	ldr	r3, [pc, #112]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 f92c 	bl	800b77c <TimerSetTimeout>
 800b524:	e023      	b.n	800b56e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b526:	4b1a      	ldr	r3, [pc, #104]	@ (800b590 <UTIL_TIMER_Stop+0xdc>)
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	4798      	blx	r3
            TimerListHead = NULL;
 800b52c:	4b17      	ldr	r3, [pc, #92]	@ (800b58c <UTIL_TIMER_Stop+0xd8>)
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e01c      	b.n	800b56e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d110      	bne.n	800b55e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d006      	beq.n	800b552 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b550:	e00d      	b.n	800b56e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	615a      	str	r2, [r3, #20]
            break;
 800b55c:	e007      	b.n	800b56e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1e2      	bne.n	800b534 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	77fb      	strb	r3, [r7, #31]
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f383 8810 	msr	PRIMASK, r3
}
 800b57c:	e001      	b.n	800b582 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b57e:	2301      	movs	r3, #1
 800b580:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b582:	7ffb      	ldrb	r3, [r7, #31]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3720      	adds	r7, #32
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	20000364 	.word	0x20000364
 800b590:	0800bfb8 	.word	0x0800bfb8

0800b594 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	73fb      	strb	r3, [r7, #15]
 800b5ac:	e014      	b.n	800b5d8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e4 <UTIL_TIMER_SetPeriod+0x50>)
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b2:	6838      	ldr	r0, [r7, #0]
 800b5b4:	4798      	blx	r3
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f8c1 	bl	800b744 <TimerExists>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d007      	beq.n	800b5d8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff ff73 	bl	800b4b4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff ff02 	bl	800b3d8 <UTIL_TIMER_Start>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	0800bfb8 	.word	0x0800bfb8

0800b5e8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b5e8:	b590      	push	{r4, r7, lr}
 800b5ea:	b089      	sub	sp, #36	@ 0x24
 800b5ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b5f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5f4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b5f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5f8:	b672      	cpsid	i
}
 800b5fa:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b5fc:	4b38      	ldr	r3, [pc, #224]	@ (800b6e0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	4798      	blx	r3
 800b602:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b604:	4b36      	ldr	r3, [pc, #216]	@ (800b6e0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	4798      	blx	r3
 800b60a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b614:	4b33      	ldr	r3, [pc, #204]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d037      	beq.n	800b68c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b61c:	4b31      	ldr	r3, [pc, #196]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d206      	bcs.n	800b63a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	1ad2      	subs	r2, r2, r3
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	e002      	b.n	800b640 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1ea      	bne.n	800b622 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b64c:	e01e      	b.n	800b68c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b64e:	4b25      	ldr	r3, [pc, #148]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b654:	4b23      	ldr	r3, [pc, #140]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	4a22      	ldr	r2, [pc, #136]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b65c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	2200      	movs	r2, #0
 800b662:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	2200      	movs	r2, #0
 800b668:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	6912      	ldr	r2, [r2, #16]
 800b672:	4610      	mov	r0, r2
 800b674:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	7adb      	ldrb	r3, [r3, #11]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d106      	bne.n	800b68c <UTIL_TIMER_IRQ_Handler+0xa4>
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	7a9b      	ldrb	r3, [r3, #10]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d102      	bne.n	800b68c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b686:	69f8      	ldr	r0, [r7, #28]
 800b688:	f7ff fea6 	bl	800b3d8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b68c:	4b15      	ldr	r3, [pc, #84]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00d      	beq.n	800b6b0 <UTIL_TIMER_IRQ_Handler+0xc8>
 800b694:	4b13      	ldr	r3, [pc, #76]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0d7      	beq.n	800b64e <UTIL_TIMER_IRQ_Handler+0x66>
 800b69e:	4b11      	ldr	r3, [pc, #68]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681c      	ldr	r4, [r3, #0]
 800b6a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	4798      	blx	r3
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	429c      	cmp	r4, r3
 800b6ae:	d3ce      	bcc.n	800b64e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d009      	beq.n	800b6cc <UTIL_TIMER_IRQ_Handler+0xe4>
 800b6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	7a1b      	ldrb	r3, [r3, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d104      	bne.n	800b6cc <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b6c2:	4b08      	ldr	r3, [pc, #32]	@ (800b6e4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 f858 	bl	800b77c <TimerSetTimeout>
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f383 8810 	msr	PRIMASK, r3
}
 800b6d6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800b6d8:	bf00      	nop
 800b6da:	3724      	adds	r7, #36	@ 0x24
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd90      	pop	{r4, r7, pc}
 800b6e0:	0800bfb8 	.word	0x0800bfb8
 800b6e4:	20000364 	.word	0x20000364

0800b6e8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b6ee:	4b06      	ldr	r3, [pc, #24]	@ (800b708 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	4798      	blx	r3
 800b6f4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b6f6:	4b04      	ldr	r3, [pc, #16]	@ (800b708 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	4798      	blx	r3
 800b6fe:	4603      	mov	r3, r0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	0800bfb8 	.word	0x0800bfb8

0800b70c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b714:	4b0a      	ldr	r3, [pc, #40]	@ (800b740 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	4798      	blx	r3
 800b71a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b71c:	4b08      	ldr	r3, [pc, #32]	@ (800b740 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	4798      	blx	r3
 800b724:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b726:	4b06      	ldr	r3, [pc, #24]	@ (800b740 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72a:	68f9      	ldr	r1, [r7, #12]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	1a8a      	subs	r2, r1, r2
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
 800b734:	4603      	mov	r3, r0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	0800bfb8 	.word	0x0800bfb8

0800b744 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b74c:	4b0a      	ldr	r3, [pc, #40]	@ (800b778 <TimerExists+0x34>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b752:	e008      	b.n	800b766 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d101      	bne.n	800b760 <TimerExists+0x1c>
    {
      return true;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e006      	b.n	800b76e <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	695b      	ldr	r3, [r3, #20]
 800b764:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1f3      	bne.n	800b754 <TimerExists+0x10>
  }
  return false;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr
 800b778:	20000364 	.word	0x20000364

0800b77c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b77c:	b590      	push	{r4, r7, lr}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b784:	4b11      	ldr	r3, [pc, #68]	@ (800b7cc <TimerSetTimeout+0x50>)
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	4798      	blx	r3
 800b78a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681c      	ldr	r4, [r3, #0]
 800b796:	4b0d      	ldr	r3, [pc, #52]	@ (800b7cc <TimerSetTimeout+0x50>)
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	4798      	blx	r3
 800b79c:	4602      	mov	r2, r0
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	429c      	cmp	r4, r3
 800b7a4:	d207      	bcs.n	800b7b6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b7a6:	4b09      	ldr	r3, [pc, #36]	@ (800b7cc <TimerSetTimeout+0x50>)
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	4798      	blx	r3
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	441a      	add	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b7b6:	4b05      	ldr	r3, [pc, #20]	@ (800b7cc <TimerSetTimeout+0x50>)
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	6812      	ldr	r2, [r2, #0]
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4798      	blx	r3
}
 800b7c2:	bf00      	nop
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd90      	pop	{r4, r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	0800bfb8 	.word	0x0800bfb8

0800b7d0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b7d8:	4b14      	ldr	r3, [pc, #80]	@ (800b82c <TimerInsertTimer+0x5c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b7de:	4b13      	ldr	r3, [pc, #76]	@ (800b82c <TimerInsertTimer+0x5c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b7e6:	e012      	b.n	800b80e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d905      	bls.n	800b800 <TimerInsertTimer+0x30>
    {
        cur = next;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	60bb      	str	r3, [r7, #8]
 800b7fe:	e006      	b.n	800b80e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	615a      	str	r2, [r3, #20]
        return;
 800b80c:	e009      	b.n	800b822 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1e8      	bne.n	800b7e8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	615a      	str	r2, [r3, #20]
}
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	bc80      	pop	{r7}
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	20000364 	.word	0x20000364

0800b830 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b838:	4b0b      	ldr	r3, [pc, #44]	@ (800b868 <TimerInsertNewHeadTimer+0x38>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b850:	4a05      	ldr	r2, [pc, #20]	@ (800b868 <TimerInsertNewHeadTimer+0x38>)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b856:	4b04      	ldr	r3, [pc, #16]	@ (800b868 <TimerInsertNewHeadTimer+0x38>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff ff8e 	bl	800b77c <TimerSetTimeout>
}
 800b860:	bf00      	nop
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20000364 	.word	0x20000364

0800b86c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800b870:	2218      	movs	r2, #24
 800b872:	2100      	movs	r1, #0
 800b874:	4807      	ldr	r0, [pc, #28]	@ (800b894 <UTIL_ADV_TRACE_Init+0x28>)
 800b876:	f7ff f936 	bl	800aae6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800b87a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b87e:	2100      	movs	r1, #0
 800b880:	4805      	ldr	r0, [pc, #20]	@ (800b898 <UTIL_ADV_TRACE_Init+0x2c>)
 800b882:	f7ff f930 	bl	800aae6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800b886:	4b05      	ldr	r3, [pc, #20]	@ (800b89c <UTIL_ADV_TRACE_Init+0x30>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4805      	ldr	r0, [pc, #20]	@ (800b8a0 <UTIL_ADV_TRACE_Init+0x34>)
 800b88c:	4798      	blx	r3
 800b88e:	4603      	mov	r3, r0
}
 800b890:	4618      	mov	r0, r3
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20000368 	.word	0x20000368
 800b898:	20000380 	.word	0x20000380
 800b89c:	0800bff8 	.word	0x0800bff8
 800b8a0:	0800bae9 	.word	0x0800bae9

0800b8a4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800b8a4:	b408      	push	{r3}
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b08d      	sub	sp, #52	@ 0x34
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800b8ba:	4b37      	ldr	r3, [pc, #220]	@ (800b998 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b8bc:	7a1b      	ldrb	r3, [r3, #8]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d902      	bls.n	800b8cc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800b8c6:	f06f 0304 	mvn.w	r3, #4
 800b8ca:	e05e      	b.n	800b98a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800b8cc:	4b32      	ldr	r3, [pc, #200]	@ (800b998 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b8ce:	68da      	ldr	r2, [r3, #12]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d002      	beq.n	800b8e0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800b8da:	f06f 0305 	mvn.w	r3, #5
 800b8de:	e054      	b.n	800b98a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800b8e0:	4b2d      	ldr	r3, [pc, #180]	@ (800b998 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00a      	beq.n	800b8fe <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d007      	beq.n	800b8fe <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800b8ee:	4b2a      	ldr	r3, [pc, #168]	@ (800b998 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f107 0116 	add.w	r1, r7, #22
 800b8f6:	f107 0218 	add.w	r2, r7, #24
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800b8fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b902:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b906:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b90c:	4823      	ldr	r0, [pc, #140]	@ (800b99c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b90e:	f7ff fa8b 	bl	800ae28 <tiny_vsnprintf_like>
 800b912:	4603      	mov	r3, r0
 800b914:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800b916:	f000 f9f1 	bl	800bcfc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800b91a:	8afa      	ldrh	r2, [r7, #22]
 800b91c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b91e:	4413      	add	r3, r2
 800b920:	b29b      	uxth	r3, r3
 800b922:	f107 0214 	add.w	r2, r7, #20
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 f969 	bl	800bc00 <TRACE_AllocateBufer>
 800b92e:	4603      	mov	r3, r0
 800b930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b934:	d025      	beq.n	800b982 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800b936:	2300      	movs	r3, #0
 800b938:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b93a:	e00e      	b.n	800b95a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800b93c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b93e:	8aba      	ldrh	r2, [r7, #20]
 800b940:	3330      	adds	r3, #48	@ 0x30
 800b942:	443b      	add	r3, r7
 800b944:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800b948:	4b15      	ldr	r3, [pc, #84]	@ (800b9a0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b94a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800b94c:	8abb      	ldrh	r3, [r7, #20]
 800b94e:	3301      	adds	r3, #1
 800b950:	b29b      	uxth	r3, r3
 800b952:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800b954:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b956:	3301      	adds	r3, #1
 800b958:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b95a:	8afb      	ldrh	r3, [r7, #22]
 800b95c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b95e:	429a      	cmp	r2, r3
 800b960:	d3ec      	bcc.n	800b93c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b962:	8abb      	ldrh	r3, [r7, #20]
 800b964:	461a      	mov	r2, r3
 800b966:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b968:	18d0      	adds	r0, r2, r3
 800b96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b96e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b972:	f7ff fa59 	bl	800ae28 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800b976:	f000 f9df 	bl	800bd38 <TRACE_UnLock>

    return TRACE_Send();
 800b97a:	f000 f831 	bl	800b9e0 <TRACE_Send>
 800b97e:	4603      	mov	r3, r0
 800b980:	e003      	b.n	800b98a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800b982:	f000 f9d9 	bl	800bd38 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800b986:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3734      	adds	r7, #52	@ 0x34
 800b98e:	46bd      	mov	sp, r7
 800b990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b994:	b001      	add	sp, #4
 800b996:	4770      	bx	lr
 800b998:	20000368 	.word	0x20000368
 800b99c:	20000580 	.word	0x20000580
 800b9a0:	20000380 	.word	0x20000380

0800b9a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800b9ac:	4a03      	ldr	r2, [pc, #12]	@ (800b9bc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6053      	str	r3, [r2, #4]
}
 800b9b2:	bf00      	nop
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bc80      	pop	{r7}
 800b9ba:	4770      	bx	lr
 800b9bc:	20000368 	.word	0x20000368

0800b9c0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800b9ca:	4a04      	ldr	r2, [pc, #16]	@ (800b9dc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	7213      	strb	r3, [r2, #8]
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bc80      	pop	{r7}
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	20000368 	.word	0x20000368

0800b9e0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b9f2:	613b      	str	r3, [r7, #16]
  return(result);
 800b9f4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b9f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9f8:	b672      	cpsid	i
}
 800b9fa:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800b9fc:	f000 f9ba 	bl	800bd74 <TRACE_IsLocked>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d15d      	bne.n	800bac2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800ba06:	f000 f979 	bl	800bcfc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800ba0a:	4b34      	ldr	r3, [pc, #208]	@ (800badc <TRACE_Send+0xfc>)
 800ba0c:	8a1a      	ldrh	r2, [r3, #16]
 800ba0e:	4b33      	ldr	r3, [pc, #204]	@ (800badc <TRACE_Send+0xfc>)
 800ba10:	8a5b      	ldrh	r3, [r3, #18]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d04d      	beq.n	800bab2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ba16:	4b31      	ldr	r3, [pc, #196]	@ (800badc <TRACE_Send+0xfc>)
 800ba18:	789b      	ldrb	r3, [r3, #2]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d117      	bne.n	800ba4e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800ba1e:	4b2f      	ldr	r3, [pc, #188]	@ (800badc <TRACE_Send+0xfc>)
 800ba20:	881a      	ldrh	r2, [r3, #0]
 800ba22:	4b2e      	ldr	r3, [pc, #184]	@ (800badc <TRACE_Send+0xfc>)
 800ba24:	8a1b      	ldrh	r3, [r3, #16]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	4b2c      	ldr	r3, [pc, #176]	@ (800badc <TRACE_Send+0xfc>)
 800ba2c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ba2e:	4b2b      	ldr	r3, [pc, #172]	@ (800badc <TRACE_Send+0xfc>)
 800ba30:	2202      	movs	r2, #2
 800ba32:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ba34:	4b29      	ldr	r3, [pc, #164]	@ (800badc <TRACE_Send+0xfc>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800ba3a:	4b28      	ldr	r3, [pc, #160]	@ (800badc <TRACE_Send+0xfc>)
 800ba3c:	8a9b      	ldrh	r3, [r3, #20]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d105      	bne.n	800ba4e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ba42:	4b26      	ldr	r3, [pc, #152]	@ (800badc <TRACE_Send+0xfc>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ba48:	4b24      	ldr	r3, [pc, #144]	@ (800badc <TRACE_Send+0xfc>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ba4e:	4b23      	ldr	r3, [pc, #140]	@ (800badc <TRACE_Send+0xfc>)
 800ba50:	789b      	ldrb	r3, [r3, #2]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d115      	bne.n	800ba82 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ba56:	4b21      	ldr	r3, [pc, #132]	@ (800badc <TRACE_Send+0xfc>)
 800ba58:	8a5a      	ldrh	r2, [r3, #18]
 800ba5a:	4b20      	ldr	r3, [pc, #128]	@ (800badc <TRACE_Send+0xfc>)
 800ba5c:	8a1b      	ldrh	r3, [r3, #16]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d908      	bls.n	800ba74 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ba62:	4b1e      	ldr	r3, [pc, #120]	@ (800badc <TRACE_Send+0xfc>)
 800ba64:	8a5a      	ldrh	r2, [r3, #18]
 800ba66:	4b1d      	ldr	r3, [pc, #116]	@ (800badc <TRACE_Send+0xfc>)
 800ba68:	8a1b      	ldrh	r3, [r3, #16]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	4b1b      	ldr	r3, [pc, #108]	@ (800badc <TRACE_Send+0xfc>)
 800ba70:	829a      	strh	r2, [r3, #20]
 800ba72:	e006      	b.n	800ba82 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ba74:	4b19      	ldr	r3, [pc, #100]	@ (800badc <TRACE_Send+0xfc>)
 800ba76:	8a1b      	ldrh	r3, [r3, #16]
 800ba78:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	4b17      	ldr	r3, [pc, #92]	@ (800badc <TRACE_Send+0xfc>)
 800ba80:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ba82:	4b16      	ldr	r3, [pc, #88]	@ (800badc <TRACE_Send+0xfc>)
 800ba84:	8a1b      	ldrh	r3, [r3, #16]
 800ba86:	461a      	mov	r2, r3
 800ba88:	4b15      	ldr	r3, [pc, #84]	@ (800bae0 <TRACE_Send+0x100>)
 800ba8a:	4413      	add	r3, r2
 800ba8c:	61bb      	str	r3, [r7, #24]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f383 8810 	msr	PRIMASK, r3
}
 800ba98:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800ba9a:	f7f5 f80f 	bl	8000abc <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ba9e:	4b11      	ldr	r3, [pc, #68]	@ (800bae4 <TRACE_Send+0x104>)
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	4a0e      	ldr	r2, [pc, #56]	@ (800badc <TRACE_Send+0xfc>)
 800baa4:	8a92      	ldrh	r2, [r2, #20]
 800baa6:	4611      	mov	r1, r2
 800baa8:	69b8      	ldr	r0, [r7, #24]
 800baaa:	4798      	blx	r3
 800baac:	4603      	mov	r3, r0
 800baae:	77fb      	strb	r3, [r7, #31]
 800bab0:	e00d      	b.n	800bace <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800bab2:	f000 f941 	bl	800bd38 <TRACE_UnLock>
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f383 8810 	msr	PRIMASK, r3
}
 800bac0:	e005      	b.n	800bace <TRACE_Send+0xee>
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f383 8810 	msr	PRIMASK, r3
}
 800bacc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800bace:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3720      	adds	r7, #32
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	20000368 	.word	0x20000368
 800bae0:	20000380 	.word	0x20000380
 800bae4:	0800bff8 	.word	0x0800bff8

0800bae8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800baf0:	2300      	movs	r3, #0
 800baf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baf4:	f3ef 8310 	mrs	r3, PRIMASK
 800baf8:	617b      	str	r3, [r7, #20]
  return(result);
 800bafa:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bafc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bafe:	b672      	cpsid	i
}
 800bb00:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800bb02:	4b3c      	ldr	r3, [pc, #240]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb04:	789b      	ldrb	r3, [r3, #2]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d106      	bne.n	800bb18 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bb0a:	4b3a      	ldr	r3, [pc, #232]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bb10:	4b38      	ldr	r3, [pc, #224]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	821a      	strh	r2, [r3, #16]
 800bb16:	e00a      	b.n	800bb2e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bb18:	4b36      	ldr	r3, [pc, #216]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb1a:	8a1a      	ldrh	r2, [r3, #16]
 800bb1c:	4b35      	ldr	r3, [pc, #212]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb1e:	8a9b      	ldrh	r3, [r3, #20]
 800bb20:	4413      	add	r3, r2
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	4b32      	ldr	r3, [pc, #200]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb2c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800bb2e:	4b31      	ldr	r3, [pc, #196]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb30:	8a1a      	ldrh	r2, [r3, #16]
 800bb32:	4b30      	ldr	r3, [pc, #192]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb34:	8a5b      	ldrh	r3, [r3, #18]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d04d      	beq.n	800bbd6 <TRACE_TxCpltCallback+0xee>
 800bb3a:	4b2e      	ldr	r3, [pc, #184]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb3c:	8adb      	ldrh	r3, [r3, #22]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d149      	bne.n	800bbd6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bb42:	4b2c      	ldr	r3, [pc, #176]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb44:	789b      	ldrb	r3, [r3, #2]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d117      	bne.n	800bb7a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800bb4a:	4b2a      	ldr	r3, [pc, #168]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb4c:	881a      	ldrh	r2, [r3, #0]
 800bb4e:	4b29      	ldr	r3, [pc, #164]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb50:	8a1b      	ldrh	r3, [r3, #16]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	4b27      	ldr	r3, [pc, #156]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb58:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bb5a:	4b26      	ldr	r3, [pc, #152]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bb60:	4b24      	ldr	r3, [pc, #144]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bb66:	4b23      	ldr	r3, [pc, #140]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb68:	8a9b      	ldrh	r3, [r3, #20]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d105      	bne.n	800bb7a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bb6e:	4b21      	ldr	r3, [pc, #132]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb70:	2200      	movs	r2, #0
 800bb72:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bb74:	4b1f      	ldr	r3, [pc, #124]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bb7a:	4b1e      	ldr	r3, [pc, #120]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb7c:	789b      	ldrb	r3, [r3, #2]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d115      	bne.n	800bbae <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bb82:	4b1c      	ldr	r3, [pc, #112]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb84:	8a5a      	ldrh	r2, [r3, #18]
 800bb86:	4b1b      	ldr	r3, [pc, #108]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb88:	8a1b      	ldrh	r3, [r3, #16]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d908      	bls.n	800bba0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bb8e:	4b19      	ldr	r3, [pc, #100]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb90:	8a5a      	ldrh	r2, [r3, #18]
 800bb92:	4b18      	ldr	r3, [pc, #96]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb94:	8a1b      	ldrh	r3, [r3, #16]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	4b16      	ldr	r3, [pc, #88]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bb9c:	829a      	strh	r2, [r3, #20]
 800bb9e:	e006      	b.n	800bbae <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bba0:	4b14      	ldr	r3, [pc, #80]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bba2:	8a1b      	ldrh	r3, [r3, #16]
 800bba4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	4b12      	ldr	r3, [pc, #72]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bbac:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bbae:	4b11      	ldr	r3, [pc, #68]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bbb0:	8a1b      	ldrh	r3, [r3, #16]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4b10      	ldr	r3, [pc, #64]	@ (800bbf8 <TRACE_TxCpltCallback+0x110>)
 800bbb6:	4413      	add	r3, r2
 800bbb8:	61fb      	str	r3, [r7, #28]
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f383 8810 	msr	PRIMASK, r3
}
 800bbc4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbfc <TRACE_TxCpltCallback+0x114>)
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	4a0a      	ldr	r2, [pc, #40]	@ (800bbf4 <TRACE_TxCpltCallback+0x10c>)
 800bbcc:	8a92      	ldrh	r2, [r2, #20]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	69f8      	ldr	r0, [r7, #28]
 800bbd2:	4798      	blx	r3
 800bbd4:	e00a      	b.n	800bbec <TRACE_TxCpltCallback+0x104>
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f383 8810 	msr	PRIMASK, r3
}
 800bbe0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800bbe2:	f7f4 ff73 	bl	8000acc <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800bbe6:	f000 f8a7 	bl	800bd38 <TRACE_UnLock>
  }
}
 800bbea:	bf00      	nop
 800bbec:	bf00      	nop
 800bbee:	3720      	adds	r7, #32
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20000368 	.word	0x20000368
 800bbf8:	20000380 	.word	0x20000380
 800bbfc:	0800bff8 	.word	0x0800bff8

0800bc00 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	6039      	str	r1, [r7, #0]
 800bc0a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800bc0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bc10:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc12:	f3ef 8310 	mrs	r3, PRIMASK
 800bc16:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc18:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bc1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc1c:	b672      	cpsid	i
}
 800bc1e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800bc20:	4b35      	ldr	r3, [pc, #212]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc22:	8a5a      	ldrh	r2, [r3, #18]
 800bc24:	4b34      	ldr	r3, [pc, #208]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc26:	8a1b      	ldrh	r3, [r3, #16]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d11b      	bne.n	800bc64 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bc2c:	4b32      	ldr	r3, [pc, #200]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc2e:	8a5b      	ldrh	r3, [r3, #18]
 800bc30:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bc34:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800bc36:	88fa      	ldrh	r2, [r7, #6]
 800bc38:	8afb      	ldrh	r3, [r7, #22]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d33a      	bcc.n	800bcb4 <TRACE_AllocateBufer+0xb4>
 800bc3e:	4b2e      	ldr	r3, [pc, #184]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc40:	8a1b      	ldrh	r3, [r3, #16]
 800bc42:	88fa      	ldrh	r2, [r7, #6]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d235      	bcs.n	800bcb4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bc48:	4b2b      	ldr	r3, [pc, #172]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bc4e:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc50:	8a5a      	ldrh	r2, [r3, #18]
 800bc52:	4b29      	ldr	r3, [pc, #164]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc54:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bc56:	4b28      	ldr	r3, [pc, #160]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc58:	8a1b      	ldrh	r3, [r3, #16]
 800bc5a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bc5c:	4b26      	ldr	r3, [pc, #152]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	825a      	strh	r2, [r3, #18]
 800bc62:	e027      	b.n	800bcb4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bc64:	4b24      	ldr	r3, [pc, #144]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc66:	8a5a      	ldrh	r2, [r3, #18]
 800bc68:	4b23      	ldr	r3, [pc, #140]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc6a:	8a1b      	ldrh	r3, [r3, #16]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d91b      	bls.n	800bca8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bc70:	4b21      	ldr	r3, [pc, #132]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc72:	8a5b      	ldrh	r3, [r3, #18]
 800bc74:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bc78:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800bc7a:	88fa      	ldrh	r2, [r7, #6]
 800bc7c:	8afb      	ldrh	r3, [r7, #22]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d318      	bcc.n	800bcb4 <TRACE_AllocateBufer+0xb4>
 800bc82:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc84:	8a1b      	ldrh	r3, [r3, #16]
 800bc86:	88fa      	ldrh	r2, [r7, #6]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d213      	bcs.n	800bcb4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bc8c:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc8e:	2201      	movs	r2, #1
 800bc90:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bc92:	4b19      	ldr	r3, [pc, #100]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc94:	8a5a      	ldrh	r2, [r3, #18]
 800bc96:	4b18      	ldr	r3, [pc, #96]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc98:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bc9a:	4b17      	ldr	r3, [pc, #92]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bc9c:	8a1b      	ldrh	r3, [r3, #16]
 800bc9e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bca0:	4b15      	ldr	r3, [pc, #84]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	825a      	strh	r2, [r3, #18]
 800bca6:	e005      	b.n	800bcb4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800bca8:	4b13      	ldr	r3, [pc, #76]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bcaa:	8a1a      	ldrh	r2, [r3, #16]
 800bcac:	4b12      	ldr	r3, [pc, #72]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bcae:	8a5b      	ldrh	r3, [r3, #18]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800bcb4:	8afa      	ldrh	r2, [r7, #22]
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d90f      	bls.n	800bcdc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800bcbc:	4b0e      	ldr	r3, [pc, #56]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bcbe:	8a5a      	ldrh	r2, [r3, #18]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bcc4:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bcc6:	8a5a      	ldrh	r2, [r3, #18]
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	4413      	add	r3, r2
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	4b08      	ldr	r3, [pc, #32]	@ (800bcf8 <TRACE_AllocateBufer+0xf8>)
 800bcd6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	82bb      	strh	r3, [r7, #20]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	f383 8810 	msr	PRIMASK, r3
}
 800bce6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800bce8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	371c      	adds	r7, #28
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bc80      	pop	{r7}
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	20000368 	.word	0x20000368

0800bcfc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd02:	f3ef 8310 	mrs	r3, PRIMASK
 800bd06:	607b      	str	r3, [r7, #4]
  return(result);
 800bd08:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bd0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd0c:	b672      	cpsid	i
}
 800bd0e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800bd10:	4b08      	ldr	r3, [pc, #32]	@ (800bd34 <TRACE_Lock+0x38>)
 800bd12:	8adb      	ldrh	r3, [r3, #22]
 800bd14:	3301      	adds	r3, #1
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	4b06      	ldr	r3, [pc, #24]	@ (800bd34 <TRACE_Lock+0x38>)
 800bd1a:	82da      	strh	r2, [r3, #22]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f383 8810 	msr	PRIMASK, r3
}
 800bd26:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bd28:	bf00      	nop
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bc80      	pop	{r7}
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	20000368 	.word	0x20000368

0800bd38 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd3e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd42:	607b      	str	r3, [r7, #4]
  return(result);
 800bd44:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bd46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd48:	b672      	cpsid	i
}
 800bd4a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800bd4c:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <TRACE_UnLock+0x38>)
 800bd4e:	8adb      	ldrh	r3, [r3, #22]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	4b06      	ldr	r3, [pc, #24]	@ (800bd70 <TRACE_UnLock+0x38>)
 800bd56:	82da      	strh	r2, [r3, #22]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f383 8810 	msr	PRIMASK, r3
}
 800bd62:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bd64:	bf00      	nop
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bc80      	pop	{r7}
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	20000368 	.word	0x20000368

0800bd74 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800bd74:	b480      	push	{r7}
 800bd76:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800bd78:	4b05      	ldr	r3, [pc, #20]	@ (800bd90 <TRACE_IsLocked+0x1c>)
 800bd7a:	8adb      	ldrh	r3, [r3, #22]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bf14      	ite	ne
 800bd80:	2301      	movne	r3, #1
 800bd82:	2300      	moveq	r3, #0
 800bd84:	b2db      	uxtb	r3, r3
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bc80      	pop	{r7}
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	20000368 	.word	0x20000368

0800bd94 <memset>:
 800bd94:	4402      	add	r2, r0
 800bd96:	4603      	mov	r3, r0
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d100      	bne.n	800bd9e <memset+0xa>
 800bd9c:	4770      	bx	lr
 800bd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800bda2:	e7f9      	b.n	800bd98 <memset+0x4>

0800bda4 <__libc_init_array>:
 800bda4:	b570      	push	{r4, r5, r6, lr}
 800bda6:	4d0d      	ldr	r5, [pc, #52]	@ (800bddc <__libc_init_array+0x38>)
 800bda8:	4c0d      	ldr	r4, [pc, #52]	@ (800bde0 <__libc_init_array+0x3c>)
 800bdaa:	1b64      	subs	r4, r4, r5
 800bdac:	10a4      	asrs	r4, r4, #2
 800bdae:	2600      	movs	r6, #0
 800bdb0:	42a6      	cmp	r6, r4
 800bdb2:	d109      	bne.n	800bdc8 <__libc_init_array+0x24>
 800bdb4:	4d0b      	ldr	r5, [pc, #44]	@ (800bde4 <__libc_init_array+0x40>)
 800bdb6:	4c0c      	ldr	r4, [pc, #48]	@ (800bde8 <__libc_init_array+0x44>)
 800bdb8:	f000 f818 	bl	800bdec <_init>
 800bdbc:	1b64      	subs	r4, r4, r5
 800bdbe:	10a4      	asrs	r4, r4, #2
 800bdc0:	2600      	movs	r6, #0
 800bdc2:	42a6      	cmp	r6, r4
 800bdc4:	d105      	bne.n	800bdd2 <__libc_init_array+0x2e>
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}
 800bdc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdcc:	4798      	blx	r3
 800bdce:	3601      	adds	r6, #1
 800bdd0:	e7ee      	b.n	800bdb0 <__libc_init_array+0xc>
 800bdd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdd6:	4798      	blx	r3
 800bdd8:	3601      	adds	r6, #1
 800bdda:	e7f2      	b.n	800bdc2 <__libc_init_array+0x1e>
 800bddc:	0800c188 	.word	0x0800c188
 800bde0:	0800c188 	.word	0x0800c188
 800bde4:	0800c188 	.word	0x0800c188
 800bde8:	0800c18c 	.word	0x0800c18c

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
