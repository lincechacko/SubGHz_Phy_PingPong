
SubGHz_Phy_PingPong_STM32WLE5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1f8  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800c330  0800c330  0000d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c868  0800c868  0000e01c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c868  0800c868  0000d868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c870  0800c870  0000e01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c870  0800c870  0000d870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c874  0800c874  0000d874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800c878  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  2000001c  0800c894  0000e01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200008a4  0800c894  0000e8a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000e01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ba0  00000000  00000000  0000e046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b46  00000000  00000000  0002fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  00035730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001753  00000000  00000000  00037640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f77  00000000  00000000  00038d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022af4  00000000  00000000  0005bd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3d50  00000000  00000000  0007e7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014254e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e28  00000000  00000000  00142594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014a3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c318 	.word	0x0800c318

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800c318 	.word	0x0800c318

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b988 	b.w	80004b0 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	468e      	mov	lr, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4617      	mov	r7, r2
 80001cc:	d962      	bls.n	8000294 <__udivmoddi4+0xdc>
 80001ce:	fab2 f682 	clz	r6, r2
 80001d2:	b14e      	cbz	r6, 80001e8 <__udivmoddi4+0x30>
 80001d4:	f1c6 0320 	rsb	r3, r6, #32
 80001d8:	fa01 f806 	lsl.w	r8, r1, r6
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	40b7      	lsls	r7, r6
 80001e2:	ea43 0808 	orr.w	r8, r3, r8
 80001e6:	40b4      	lsls	r4, r6
 80001e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ec:	fa1f fc87 	uxth.w	ip, r7
 80001f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001f4:	0c23      	lsrs	r3, r4, #16
 80001f6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000202:	429a      	cmp	r2, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f101 30ff 	add.w	r0, r1, #4294967295
 800020c:	f080 80ea 	bcs.w	80003e4 <__udivmoddi4+0x22c>
 8000210:	429a      	cmp	r2, r3
 8000212:	f240 80e7 	bls.w	80003e4 <__udivmoddi4+0x22c>
 8000216:	3902      	subs	r1, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a9a      	subs	r2, r3, r2
 800021c:	b2a3      	uxth	r3, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800022a:	fb00 fc0c 	mul.w	ip, r0, ip
 800022e:	459c      	cmp	ip, r3
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	18fb      	adds	r3, r7, r3
 8000234:	f100 32ff 	add.w	r2, r0, #4294967295
 8000238:	f080 80d6 	bcs.w	80003e8 <__udivmoddi4+0x230>
 800023c:	459c      	cmp	ip, r3
 800023e:	f240 80d3 	bls.w	80003e8 <__udivmoddi4+0x230>
 8000242:	443b      	add	r3, r7
 8000244:	3802      	subs	r0, #2
 8000246:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024a:	eba3 030c 	sub.w	r3, r3, ip
 800024e:	2100      	movs	r1, #0
 8000250:	b11d      	cbz	r5, 800025a <__udivmoddi4+0xa2>
 8000252:	40f3      	lsrs	r3, r6
 8000254:	2200      	movs	r2, #0
 8000256:	e9c5 3200 	strd	r3, r2, [r5]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d905      	bls.n	800026e <__udivmoddi4+0xb6>
 8000262:	b10d      	cbz	r5, 8000268 <__udivmoddi4+0xb0>
 8000264:	e9c5 0100 	strd	r0, r1, [r5]
 8000268:	2100      	movs	r1, #0
 800026a:	4608      	mov	r0, r1
 800026c:	e7f5      	b.n	800025a <__udivmoddi4+0xa2>
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d146      	bne.n	8000304 <__udivmoddi4+0x14c>
 8000276:	4573      	cmp	r3, lr
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xc8>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 8105 	bhi.w	800048a <__udivmoddi4+0x2d2>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb6e 0203 	sbc.w	r2, lr, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4690      	mov	r8, r2
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e5      	beq.n	800025a <__udivmoddi4+0xa2>
 800028e:	e9c5 4800 	strd	r4, r8, [r5]
 8000292:	e7e2      	b.n	800025a <__udivmoddi4+0xa2>
 8000294:	2a00      	cmp	r2, #0
 8000296:	f000 8090 	beq.w	80003ba <__udivmoddi4+0x202>
 800029a:	fab2 f682 	clz	r6, r2
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f040 80a4 	bne.w	80003ec <__udivmoddi4+0x234>
 80002a4:	1a8a      	subs	r2, r1, r2
 80002a6:	0c03      	lsrs	r3, r0, #16
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	b280      	uxth	r0, r0
 80002ae:	b2bc      	uxth	r4, r7
 80002b0:	2101      	movs	r1, #1
 80002b2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002b6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002be:	fb04 f20c 	mul.w	r2, r4, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d907      	bls.n	80002d6 <__udivmoddi4+0x11e>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x11c>
 80002ce:	429a      	cmp	r2, r3
 80002d0:	f200 80e0 	bhi.w	8000494 <__udivmoddi4+0x2dc>
 80002d4:	46c4      	mov	ip, r8
 80002d6:	1a9b      	subs	r3, r3, r2
 80002d8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002dc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002e4:	fb02 f404 	mul.w	r4, r2, r4
 80002e8:	429c      	cmp	r4, r3
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x144>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f102 30ff 	add.w	r0, r2, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x142>
 80002f4:	429c      	cmp	r4, r3
 80002f6:	f200 80ca 	bhi.w	800048e <__udivmoddi4+0x2d6>
 80002fa:	4602      	mov	r2, r0
 80002fc:	1b1b      	subs	r3, r3, r4
 80002fe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000302:	e7a5      	b.n	8000250 <__udivmoddi4+0x98>
 8000304:	f1c1 0620 	rsb	r6, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 f706 	lsr.w	r7, r2, r6
 800030e:	431f      	orrs	r7, r3
 8000310:	fa0e f401 	lsl.w	r4, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fa2e fe06 	lsr.w	lr, lr, r6
 800031c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	fa1f fc87 	uxth.w	ip, r7
 800032a:	fbbe f0f9 	udiv	r0, lr, r9
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	fb09 ee10 	mls	lr, r9, r0, lr
 8000334:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000338:	fb00 fe0c 	mul.w	lr, r0, ip
 800033c:	45a6      	cmp	lr, r4
 800033e:	fa02 f201 	lsl.w	r2, r2, r1
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x1a0>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 3aff 	add.w	sl, r0, #4294967295
 800034a:	f080 809c 	bcs.w	8000486 <__udivmoddi4+0x2ce>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f240 8099 	bls.w	8000486 <__udivmoddi4+0x2ce>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	fa1f fe83 	uxth.w	lr, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800036c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000370:	45a4      	cmp	ip, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1ce>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f103 3eff 	add.w	lr, r3, #4294967295
 800037a:	f080 8082 	bcs.w	8000482 <__udivmoddi4+0x2ca>
 800037e:	45a4      	cmp	ip, r4
 8000380:	d97f      	bls.n	8000482 <__udivmoddi4+0x2ca>
 8000382:	3b02      	subs	r3, #2
 8000384:	443c      	add	r4, r7
 8000386:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800038a:	eba4 040c 	sub.w	r4, r4, ip
 800038e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000392:	4564      	cmp	r4, ip
 8000394:	4673      	mov	r3, lr
 8000396:	46e1      	mov	r9, ip
 8000398:	d362      	bcc.n	8000460 <__udivmoddi4+0x2a8>
 800039a:	d05f      	beq.n	800045c <__udivmoddi4+0x2a4>
 800039c:	b15d      	cbz	r5, 80003b6 <__udivmoddi4+0x1fe>
 800039e:	ebb8 0203 	subs.w	r2, r8, r3
 80003a2:	eb64 0409 	sbc.w	r4, r4, r9
 80003a6:	fa04 f606 	lsl.w	r6, r4, r6
 80003aa:	fa22 f301 	lsr.w	r3, r2, r1
 80003ae:	431e      	orrs	r6, r3
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	e9c5 6400 	strd	r6, r4, [r5]
 80003b6:	2100      	movs	r1, #0
 80003b8:	e74f      	b.n	800025a <__udivmoddi4+0xa2>
 80003ba:	fbb1 fcf2 	udiv	ip, r1, r2
 80003be:	0c01      	lsrs	r1, r0, #16
 80003c0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ca:	463b      	mov	r3, r7
 80003cc:	4638      	mov	r0, r7
 80003ce:	463c      	mov	r4, r7
 80003d0:	46b8      	mov	r8, r7
 80003d2:	46be      	mov	lr, r7
 80003d4:	2620      	movs	r6, #32
 80003d6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003da:	eba2 0208 	sub.w	r2, r2, r8
 80003de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003e2:	e766      	b.n	80002b2 <__udivmoddi4+0xfa>
 80003e4:	4601      	mov	r1, r0
 80003e6:	e718      	b.n	800021a <__udivmoddi4+0x62>
 80003e8:	4610      	mov	r0, r2
 80003ea:	e72c      	b.n	8000246 <__udivmoddi4+0x8e>
 80003ec:	f1c6 0220 	rsb	r2, r6, #32
 80003f0:	fa2e f302 	lsr.w	r3, lr, r2
 80003f4:	40b7      	lsls	r7, r6
 80003f6:	40b1      	lsls	r1, r6
 80003f8:	fa20 f202 	lsr.w	r2, r0, r2
 80003fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000400:	430a      	orrs	r2, r1
 8000402:	fbb3 f8fe 	udiv	r8, r3, lr
 8000406:	b2bc      	uxth	r4, r7
 8000408:	fb0e 3318 	mls	r3, lr, r8, r3
 800040c:	0c11      	lsrs	r1, r2, #16
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb08 f904 	mul.w	r9, r8, r4
 8000416:	40b0      	lsls	r0, r6
 8000418:	4589      	cmp	r9, r1
 800041a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800041e:	b280      	uxth	r0, r0
 8000420:	d93e      	bls.n	80004a0 <__udivmoddi4+0x2e8>
 8000422:	1879      	adds	r1, r7, r1
 8000424:	f108 3cff 	add.w	ip, r8, #4294967295
 8000428:	d201      	bcs.n	800042e <__udivmoddi4+0x276>
 800042a:	4589      	cmp	r9, r1
 800042c:	d81f      	bhi.n	800046e <__udivmoddi4+0x2b6>
 800042e:	eba1 0109 	sub.w	r1, r1, r9
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fb09 f804 	mul.w	r8, r9, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	b292      	uxth	r2, r2
 8000440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000444:	4542      	cmp	r2, r8
 8000446:	d229      	bcs.n	800049c <__udivmoddi4+0x2e4>
 8000448:	18ba      	adds	r2, r7, r2
 800044a:	f109 31ff 	add.w	r1, r9, #4294967295
 800044e:	d2c4      	bcs.n	80003da <__udivmoddi4+0x222>
 8000450:	4542      	cmp	r2, r8
 8000452:	d2c2      	bcs.n	80003da <__udivmoddi4+0x222>
 8000454:	f1a9 0102 	sub.w	r1, r9, #2
 8000458:	443a      	add	r2, r7
 800045a:	e7be      	b.n	80003da <__udivmoddi4+0x222>
 800045c:	45f0      	cmp	r8, lr
 800045e:	d29d      	bcs.n	800039c <__udivmoddi4+0x1e4>
 8000460:	ebbe 0302 	subs.w	r3, lr, r2
 8000464:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000468:	3801      	subs	r0, #1
 800046a:	46e1      	mov	r9, ip
 800046c:	e796      	b.n	800039c <__udivmoddi4+0x1e4>
 800046e:	eba7 0909 	sub.w	r9, r7, r9
 8000472:	4449      	add	r1, r9
 8000474:	f1a8 0c02 	sub.w	ip, r8, #2
 8000478:	fbb1 f9fe 	udiv	r9, r1, lr
 800047c:	fb09 f804 	mul.w	r8, r9, r4
 8000480:	e7db      	b.n	800043a <__udivmoddi4+0x282>
 8000482:	4673      	mov	r3, lr
 8000484:	e77f      	b.n	8000386 <__udivmoddi4+0x1ce>
 8000486:	4650      	mov	r0, sl
 8000488:	e766      	b.n	8000358 <__udivmoddi4+0x1a0>
 800048a:	4608      	mov	r0, r1
 800048c:	e6fd      	b.n	800028a <__udivmoddi4+0xd2>
 800048e:	443b      	add	r3, r7
 8000490:	3a02      	subs	r2, #2
 8000492:	e733      	b.n	80002fc <__udivmoddi4+0x144>
 8000494:	f1ac 0c02 	sub.w	ip, ip, #2
 8000498:	443b      	add	r3, r7
 800049a:	e71c      	b.n	80002d6 <__udivmoddi4+0x11e>
 800049c:	4649      	mov	r1, r9
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x222>
 80004a0:	eba1 0109 	sub.w	r1, r1, r9
 80004a4:	46c4      	mov	ip, r8
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	e7c4      	b.n	800043a <__udivmoddi4+0x282>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d8:	68fb      	ldr	r3, [r7, #12]
}
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004e8:	2004      	movs	r0, #4
 80004ea:	f7ff ffe3 	bl	80004b4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	2001      	movs	r0, #1
 80004f0:	f7ff ffe0 	bl	80004b4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	200f      	movs	r0, #15
 80004fa:	f001 f98e 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004fe:	200f      	movs	r0, #15
 8000500:	f001 f9a5 	bl	800184e <HAL_NVIC_EnableIRQ>

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000524:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4013      	ands	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052c:	68fb      	ldr	r3, [r7, #12]
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	2002      	movs	r0, #2
 800054e:	f7ff ffdb 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2004      	movs	r0, #4
 8000554:	f7ff ffd8 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ffd5 	bl	8000508 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 8000564:	481d      	ldr	r0, [pc, #116]	@ (80005dc <MX_GPIO_Init+0xa4>)
 8000566:	f001 ffd5 	bl	8002514 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800056a:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 800056e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4619      	mov	r1, r3
 8000580:	4816      	ldr	r0, [pc, #88]	@ (80005dc <MX_GPIO_Init+0xa4>)
 8000582:	f001 fd99 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000586:	2303      	movs	r3, #3
 8000588:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800058e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000590:	2301      	movs	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f001 fd8c 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80005a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80005a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	@ (80005dc <MX_GPIO_Init+0xa4>)
 80005b8:	f001 fd7e 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80005bc:	2340      	movs	r3, #64	@ 0x40
 80005be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <MX_GPIO_Init+0xa8>)
 80005d0:	f001 fd72 	bl	80020b8 <HAL_GPIO_Init>

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	48000400 	.word	0x48000400
 80005e0:	48000800 	.word	0x48000800

080005e4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005f4:	f023 0218 	bic.w	r2, r3, #24
 80005f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4313      	orrs	r3, r2
 8000600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 ffdb 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f807 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f7ff ff8d 	bl	8000538 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 800061e:	f00a f84e 	bl	800a6be <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000622:	f00a f854 	bl	800a6ce <MX_SubGHz_Phy_Process>
 8000626:	e7fc      	b.n	8000622 <main+0x14>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09a      	sub	sp, #104	@ 0x68
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2248      	movs	r2, #72	@ 0x48
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00b fe22 	bl	800c280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
 800064a:	615a      	str	r2, [r3, #20]
 800064c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064e:	f001 ff91 	bl	8002574 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ffc6 	bl	80005e4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <SystemClock_Config+0xac>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000660:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <SystemClock_Config+0xac>)
 8000662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <SystemClock_Config+0xac>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000674:	2324      	movs	r3, #36	@ 0x24
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000678:	2381      	movs	r3, #129	@ 0x81
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000680:	2300      	movs	r3, #0
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000684:	23b0      	movs	r3, #176	@ 0xb0
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fae3 	bl	8002c5c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800069c:	f000 f81c 	bl	80006d8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006a0:	234f      	movs	r3, #79	@ 0x4f
 80006a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fe4f 	bl	8003360 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006c8:	f000 f806 	bl	80006d8 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3768      	adds	r7, #104	@ 0x68
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58000400 	.word	0x58000400

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800070c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000710:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000712:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800071c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000720:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000728:	68fb      	ldr	r3, [r7, #12]
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	@ 0x30
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	222c      	movs	r2, #44	@ 0x2c
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f00b fd9d 	bl	800c280 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000746:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000748:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <MX_RTC_Init+0xa0>)
 800074a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800074e:	221f      	movs	r2, #31
 8000750:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_RTC_Init+0x9c>)
 8000774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000778:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800077a:	4815      	ldr	r0, [pc, #84]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800077c:	f003 faca 	bl	8003d14 <HAL_RTC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000786:	f7ff ffa7 	bl	80006d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800078a:	4811      	ldr	r0, [pc, #68]	@ (80007d0 <MX_RTC_Init+0x9c>)
 800078c:	f003 fdc0 	bl	8004310 <HAL_RTCEx_SetSSRU_IT>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000796:	f7ff ff9f 	bl	80006d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80007a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007aa:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80007ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_RTC_Init+0x9c>)
 80007ba:	f003 fb2d 	bl	8003e18 <HAL_RTC_SetAlarm_IT>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80007c4:	f7ff ff88 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3730      	adds	r7, #48	@ 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000038 	.word	0x20000038
 80007d4:	40002800 	.word	0x40002800

080007d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	@ 0x40
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2238      	movs	r2, #56	@ 0x38
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00b fd49 	bl	800c280 <memset>
  if(rtcHandle->Instance==RTC)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a16      	ldr	r2, [pc, #88]	@ (800084c <HAL_RTC_MspInit+0x74>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d125      	bne.n	8000844 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f969 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000814:	f7ff ff60 	bl	80006d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000818:	f7ff ff64 	bl	80006e4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800081c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000820:	f7ff ff70 	bl	8000704 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2002      	movs	r0, #2
 800082a:	f000 fff6 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800082e:	2002      	movs	r0, #2
 8000830:	f001 f80d 	bl	800184e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	202a      	movs	r0, #42	@ 0x2a
 800083a:	f000 ffee 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800083e:	202a      	movs	r0, #42	@ 0x2a
 8000840:	f001 f805 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000844:	bf00      	nop
 8000846:	3740      	adds	r7, #64	@ 0x40
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40002800 	.word	0x40002800

08000850 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000856:	2201      	movs	r2, #1
 8000858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	58000400 	.word	0x58000400

08000868 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000884:	f000 fec2 	bl	800160c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000888:	f7ff ffe2 	bl	8000850 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800088c:	2001      	movs	r0, #1
 800088e:	f001 ff03 	bl	8002698 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800089a:	f000 fec5 	bl	8001628 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800089e:	f000 fdeb 	bl	8001478 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80008aa:	f000 feaf 	bl	800160c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008ae:	2101      	movs	r1, #1
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fe6d 	bl	8002590 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80008be:	f000 feb3 	bl	8001628 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2005      	movs	r0, #5
 80008d0:	f000 ffa3 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008d4:	2005      	movs	r0, #5
 80008d6:	f000 ffba 	bl	800184e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}

080008de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e2:	bf00      	nop
 80008e4:	e7fd      	b.n	80008e2 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	bf00      	nop
 80008ec:	e7fd      	b.n	80008ea <HardFault_Handler+0x4>

080008ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	bf00      	nop
 80008fc:	e7fd      	b.n	80008fa <BusFault_Handler+0x4>

080008fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000902:	bf00      	nop
 8000904:	e7fd      	b.n	8000902 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800093e:	f003 fd23 	bl	8004388 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000038 	.word	0x20000038

0800094c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <DMA1_Channel5_IRQHandler+0x10>)
 800095e:	f001 fa0d 	bl	8001d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000118 	.word	0x20000118

0800096c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <USART2_IRQHandler+0x10>)
 8000972:	f004 fb63 	bl	800503c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000084 	.word	0x20000084

08000980 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <RTC_Alarm_IRQHandler+0x10>)
 8000986:	f003 fbaf 	bl	80040e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000038 	.word	0x20000038

08000994 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <SUBGHZ_Radio_IRQHandler+0x10>)
 800099a:	f004 f863 	bl	8004a64 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000070 	.word	0x20000070

080009a8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80009b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80009b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4313      	orrs	r3, r2
 80009be:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80009c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009cc:	68fb      	ldr	r3, [r7, #12]
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_SUBGHZ_Init+0x20>)
 80009de:	2208      	movs	r2, #8
 80009e0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_SUBGHZ_Init+0x20>)
 80009e4:	f003 fdbc 	bl	8004560 <HAL_SUBGHZ_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80009ee:	f7ff fe73 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000070 	.word	0x20000070

080009fc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ffcf 	bl	80009a8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2032      	movs	r0, #50	@ 0x32
 8000a10:	f000 ff03 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000a14:	2032      	movs	r0, #50	@ 0x32
 8000a16:	f000 ff1a 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000a34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	608b      	str	r3, [r1, #8]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff ffe8 	bl	8000a22 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000a52:	f00a fef1 	bl	800b838 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <SystemApp_Init+0x38>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a5c:	f000 f8a2 	bl	8000ba4 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a60:	f00b f97a 	bl	800bd58 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a64:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <SystemApp_Init+0x3c>)
 8000a66:	f00b fa13 	bl	800be90 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f00b fa1e 	bl	800beac <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a70:	f00a f99c 	bl	800adac <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a74:	2101      	movs	r1, #1
 8000a76:	2001      	movs	r0, #1
 8000a78:	f00a f9d8 	bl	800ae2c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000007c 	.word	0x2000007c
 8000a84:	08000a95 	.word	0x08000a95

08000a88 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a8c:	f00a f9fe 	bl	800ae8c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00a fa9c 	bl	800afe0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aae:	9200      	str	r2, [sp, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <TimestampNow+0x3c>)
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f81d 	bl	8000af4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fb5c 	bl	8000178 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	0800c330 	.word	0x0800c330

08000ad4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2002      	movs	r0, #2
 8000adc:	f00a f976 	bl	800adcc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2002      	movs	r0, #2
 8000aec:	f00a f96e 	bl	800adcc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000af4:	b40c      	push	{r2, r3}
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f00a fbb3 	bl	800b278 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b1c:	b002      	add	sp, #8
 8000b1e:	4770      	bx	lr

08000b20 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_GetTick+0x24>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000b46:	f000 f92d 	bl	8000da4 <TIMER_IF_GetTimerValue>
 8000b4a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000007c 	.word	0x2000007c

08000b5c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f9a3 	bl	8000eb2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <LL_AHB2_GRP1_EnableClock>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b98:	68fb      	ldr	r3, [r7, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000baa:	f000 fd4b 	bl	8001644 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000bae:	f000 fd4f 	bl	8001650 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000bb2:	f000 fd53 	bl	800165c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f7ff ffcf 	bl	8000b74 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff ffcc 	bl	8000b74 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <DBG_Init+0x78>)
 8000be8:	f001 fa66 	bl	80020b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <DBG_Init+0x78>)
 8000bf8:	f001 fa5e 	bl	80020b8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <DBG_Init+0x78>)
 8000c04:	f001 fc86 	bl	8002514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <DBG_Init+0x78>)
 8000c10:	f001 fc80 	bl	8002514 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	48000400 	.word	0x48000400

08000c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
	...

08000c44 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <TIMER_IF_Init+0x5c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	f083 0301 	eor.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01b      	beq.n	8000c94 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <TIMER_IF_Init+0x60>)
 8000c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c62:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000c64:	f7ff fd66 	bl	8000734 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000c68:	f000 f856 	bl	8000d18 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <TIMER_IF_Init+0x60>)
 8000c72:	f003 f9dd 	bl	8004030 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <TIMER_IF_Init+0x60>)
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000c7e:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <TIMER_IF_Init+0x60>)
 8000c80:	f003 fb14 	bl	80042ac <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 f9d3 	bl	8001030 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000c8a:	f000 f85f 	bl	8000d4c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <TIMER_IF_Init+0x5c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000007d 	.word	0x2000007d
 8000ca4:	20000038 	.word	0x20000038

08000ca8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	222c      	movs	r2, #44	@ 0x2c
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00b fade 	bl	800c280 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000cc4:	f000 f828 	bl	8000d18 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <TIMER_IF_StartTimer+0x68>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000ce0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ce4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ce6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <TIMER_IF_StartTimer+0x6c>)
 8000cf6:	f003 f88f 	bl	8003e18 <HAL_RTC_SetAlarm_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000d00:	f7ff fcea 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000d04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3738      	adds	r7, #56	@ 0x38
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000080 	.word	0x20000080
 8000d14:	20000038 	.word	0x20000038

08000d18 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <TIMER_IF_StopTimer+0x2c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000d28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2c:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <TIMER_IF_StopTimer+0x30>)
 8000d2e:	f003 f97f 	bl	8004030 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <TIMER_IF_StopTimer+0x30>)
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40002800 	.word	0x40002800
 8000d48:	20000038 	.word	0x20000038

08000d4c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000d50:	f000 f98e 	bl	8001070 <GetTimerTicks>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <TIMER_IF_SetTimerContext+0x18>)
 8000d58:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d5a:	4b02      	ldr	r3, [pc, #8]	@ (8000d64 <TIMER_IF_SetTimerContext+0x18>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000080 	.word	0x20000080

08000d68 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	@ (8000d78 <TIMER_IF_GetTimerContext+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000080 	.word	0x20000080

08000d7c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d86:	f000 f973 	bl	8001070 <GetTimerTicks>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000080 	.word	0x20000080

08000da4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <TIMER_IF_GetTimerValue+0x24>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000db6:	f000 f95b 	bl	8001070 <GetTimerTicks>
 8000dba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000007d 	.word	0x2000007d

08000dcc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000dda:	687b      	ldr	r3, [r7, #4]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000de6:	b5b0      	push	{r4, r5, r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000dee:	2100      	movs	r1, #0
 8000df0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	2000      	movs	r0, #0
 8000df6:	460a      	mov	r2, r1
 8000df8:	4603      	mov	r3, r0
 8000dfa:	0d95      	lsrs	r5, r2, #22
 8000dfc:	0294      	lsls	r4, r2, #10
 8000dfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	4620      	mov	r0, r4
 8000e08:	4629      	mov	r1, r5
 8000e0a:	f7ff f9bd 	bl	8000188 <__aeabi_uldivmod>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4613      	mov	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bdb0      	pop	{r4, r5, r7, pc}

08000e20 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000e20:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	2000      	movs	r0, #0
 8000e32:	460c      	mov	r4, r1
 8000e34:	4605      	mov	r5, r0
 8000e36:	4620      	mov	r0, r4
 8000e38:	4629      	mov	r1, r5
 8000e3a:	f04f 0a00 	mov.w	sl, #0
 8000e3e:	f04f 0b00 	mov.w	fp, #0
 8000e42:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000e46:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000e4a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000e4e:	4650      	mov	r0, sl
 8000e50:	4659      	mov	r1, fp
 8000e52:	1b02      	subs	r2, r0, r4
 8000e54:	eb61 0305 	sbc.w	r3, r1, r5
 8000e58:	f04f 0000 	mov.w	r0, #0
 8000e5c:	f04f 0100 	mov.w	r1, #0
 8000e60:	0099      	lsls	r1, r3, #2
 8000e62:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e66:	0090      	lsls	r0, r2, #2
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	eb12 0804 	adds.w	r8, r2, r4
 8000e70:	eb43 0905 	adc.w	r9, r3, r5
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e88:	4690      	mov	r8, r2
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	4649      	mov	r1, r9
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	0a82      	lsrs	r2, r0, #10
 8000e9a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000e9e:	0a8b      	lsrs	r3, r1, #10
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000eb0:	4770      	bx	lr

08000eb2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff93 	bl	8000de6 <TIMER_IF_Convert_ms2Tick>
 8000ec0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000ec2:	f000 f8d5 	bl	8001070 <GetTimerTicks>
 8000ec6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000ec8:	e000      	b.n	8000ecc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000eca:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000ecc:	f000 f8d0 	bl	8001070 <GetTimerTicks>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f6      	bhi.n	8000eca <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000eee:	f00a fdf1 	bl	800bad4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000f02:	f000 f8a5 	bl	8001050 <TIMER_IF_BkUp_Read_MSBticks>
 8000f06:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f88f 	bl	8001030 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000f1a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f1e:	b08c      	sub	sp, #48	@ 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000f28:	f000 f8a2 	bl	8001070 <GetTimerTicks>
 8000f2c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000f2e:	f000 f88f 	bl	8001050 <TIMER_IF_BkUp_Read_MSBticks>
 8000f32:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f36:	2200      	movs	r2, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	60fa      	str	r2, [r7, #12]
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	000b      	movs	r3, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	4605      	mov	r5, r0
 8000f52:	eb12 0804 	adds.w	r8, r2, r4
 8000f56:	eb43 0905 	adc.w	r9, r3, r5
 8000f5a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	0a82      	lsrs	r2, r0, #10
 8000f6c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000f70:	0a8b      	lsrs	r3, r1, #10
 8000f72:	4613      	mov	r3, r2
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000f84:	f04f 0b00 	mov.w	fp, #0
 8000f88:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff46 	bl	8000e20 <TIMER_IF_Convert_Tick2ms>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3730      	adds	r7, #48	@ 0x30
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000fa8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000fb6:	f003 fa0b 	bl	80043d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000038 	.word	0x20000038

08000fc8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8000fd6:	f003 f9fb 	bl	80043d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000038 	.word	0x20000038

08000fe8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8000ff6:	f003 fa03 	bl	8004400 <HAL_RTCEx_BKUPRead>
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000038 	.word	0x20000038

0800100c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001016:	2101      	movs	r1, #1
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800101a:	f003 f9f1 	bl	8004400 <HAL_RTCEx_BKUPRead>
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000038 	.word	0x20000038

08001030 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	2102      	movs	r1, #2
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800103e:	f003 f9c7 	bl	80043d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000038 	.word	0x20000038

08001050 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001056:	2102      	movs	r1, #2
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800105a:	f003 f9d1 	bl	8004400 <HAL_RTCEx_BKUPRead>
 800105e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001060:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000038 	.word	0x20000038

08001070 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001076:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <GetTimerTicks+0x34>)
 8001078:	f7ff fdd8 	bl	8000c2c <LL_RTC_TIME_GetSubSecond>
 800107c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800107e:	e003      	b.n	8001088 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001080:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <GetTimerTicks+0x34>)
 8001082:	f7ff fdd3 	bl	8000c2c <LL_RTC_TIME_GetSubSecond>
 8001086:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001088:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <GetTimerTicks+0x34>)
 800108a:	f7ff fdcf 	bl	8000c2c <LL_RTC_TIME_GetSubSecond>
 800108e:	4602      	mov	r2, r0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4293      	cmp	r3, r2
 8001094:	d1f4      	bne.n	8001080 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40002800 	.word	0x40002800

080010a8 <LL_AHB2_GRP1_EnableClock>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010cc:	68fb      	ldr	r3, [r7, #12]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <LL_APB1_GRP1_EnableClock>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <LL_APB1_GRP1_DisableClock>:
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001114:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	43db      	mvns	r3, r3
 800111a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800111e:	4013      	ands	r3, r2
 8001120:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001132:	4a23      	ldr	r2, [pc, #140]	@ (80011c0 <MX_USART2_UART_Init+0x94>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001174:	4811      	ldr	r0, [pc, #68]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001176:	f003 fe44 	bl	8004e02 <HAL_UART_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001180:	f7ff faaa 	bl	80006d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 8001188:	f005 ff6d 	bl	8007066 <HAL_UARTEx_SetTxFifoThreshold>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001192:	f7ff faa1 	bl	80006d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4808      	ldr	r0, [pc, #32]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 800119a:	f005 ffa2 	bl	80070e2 <HAL_UARTEx_SetRxFifoThreshold>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f7ff fa98 	bl	80006d8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_USART2_UART_Init+0x90>)
 80011aa:	f005 ff21 	bl	8006ff0 <HAL_UARTEx_EnableFifoMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f7ff fa90 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000084 	.word	0x20000084
 80011c0:	40004400 	.word	0x40004400

080011c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b096      	sub	sp, #88	@ 0x58
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2238      	movs	r2, #56	@ 0x38
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00b f84b 	bl	800c280 <memset>
  if(uartHandle->Instance==USART2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a33      	ldr	r2, [pc, #204]	@ (80012bc <HAL_UART_MspInit+0xf8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d15f      	bne.n	80012b4 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80011f8:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <HAL_UART_MspInit+0xfc>)
 80011fa:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fc6d 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800120c:	f7ff fa64 	bl	80006d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001210:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001214:	f7ff ff60 	bl	80010d8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff45 	bl	80010a8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800121e:	230c      	movs	r3, #12
 8001220:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122e:	2307      	movs	r3, #7
 8001230:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f000 ff3c 	bl	80020b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001240:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001242:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <HAL_UART_MspInit+0x104>)
 8001244:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001248:	2214      	movs	r2, #20
 800124a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124c:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 800124e:	2210      	movs	r2, #16
 8001250:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 800125a:	2280      	movs	r2, #128	@ 0x80
 800125c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001276:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 8001278:	f000 fb06 	bl	8001888 <HAL_DMA_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001282:	f7ff fa29 	bl	80006d8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001286:	2110      	movs	r1, #16
 8001288:	480e      	ldr	r0, [pc, #56]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 800128a:	f000 fe3d 	bl	8001f08 <HAL_DMA_ConfigChannelAttributes>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001294:	f7ff fa20 	bl	80006d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 800129c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800129e:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <HAL_UART_MspInit+0x100>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	2025      	movs	r0, #37	@ 0x25
 80012aa:	f000 fab6 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ae:	2025      	movs	r0, #37	@ 0x25
 80012b0:	f000 facd 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3758      	adds	r7, #88	@ 0x58
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40004400 	.word	0x40004400
 80012c0:	000c0004 	.word	0x000c0004
 80012c4:	20000118 	.word	0x20000118
 80012c8:	40020058 	.word	0x40020058

080012cc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <HAL_UART_MspDeInit+0x3c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d110      	bne.n	8001300 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80012de:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80012e2:	f7ff ff11 	bl	8001108 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80012e6:	210c      	movs	r1, #12
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ec:	f001 f844 	bl	8002378 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fb6f 	bl	80019d8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80012fa:	2025      	movs	r0, #37	@ 0x25
 80012fc:	f000 fab5 	bl	800186a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40004400 	.word	0x40004400

0800130c <LL_APB1_GRP1_ForceReset>:
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800131a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4313      	orrs	r3, r2
 8001322:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <LL_APB1_GRP1_ReleaseReset>:
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	43db      	mvns	r3, r3
 8001340:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001344:	4013      	ands	r3, r2
 8001346:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
	...

08001354 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <LL_EXTI_EnableIT_0_31+0x24>)
 800135e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001362:	4905      	ldr	r1, [pc, #20]	@ (8001378 <LL_EXTI_EnableIT_0_31+0x24>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4313      	orrs	r3, r2
 8001368:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	58000800 	.word	0x58000800

0800137c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001384:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <vcom_Init+0x28>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800138a:	f7ff f8ab 	bl	80004e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800138e:	f7ff fecd 	bl	800112c <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001392:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001396:	f7ff ffdd 	bl	8001354 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800139a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000017c 	.word	0x2000017c

080013a8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80013ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80013b0:	f7ff ffac 	bl	800130c <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 80013b4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80013b8:	f7ff ffb9 	bl	800132e <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <vcom_DeInit+0x28>)
 80013be:	f7ff ff85 	bl	80012cc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 fa51 	bl	800186a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80013c8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000084 	.word	0x20000084

080013d4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	461a      	mov	r2, r3
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <vcom_Trace_DMA+0x24>)
 80013e8:	f003 fda8 	bl	8004f3c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80013ec:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000084 	.word	0x20000084

080013fc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001404:	4a19      	ldr	r2, [pc, #100]	@ (800146c <vcom_ReceiveInit+0x70>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800140a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800140e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001418:	4815      	ldr	r0, [pc, #84]	@ (8001470 <vcom_ReceiveInit+0x74>)
 800141a:	f005 fd5c 	bl	8006ed6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800141e:	bf00      	nop
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <vcom_ReceiveInit+0x74>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142e:	d0f7      	beq.n	8001420 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001430:	bf00      	nop
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <vcom_ReceiveInit+0x74>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001440:	d1f7      	bne.n	8001432 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <vcom_ReceiveInit+0x74>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <vcom_ReceiveInit+0x74>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001450:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001452:	4807      	ldr	r0, [pc, #28]	@ (8001470 <vcom_ReceiveInit+0x74>)
 8001454:	f005 fd9a 	bl	8006f8c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	4906      	ldr	r1, [pc, #24]	@ (8001474 <vcom_ReceiveInit+0x78>)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <vcom_ReceiveInit+0x74>)
 800145e:	f003 fd21 	bl	8004ea4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001462:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000180 	.word	0x20000180
 8001470:	20000084 	.word	0x20000084
 8001474:	20000178 	.word	0x20000178

08001478 <vcom_Resume>:

void vcom_Resume(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <vcom_Resume+0x28>)
 800147e:	f003 fcc0 	bl	8004e02 <HAL_UART_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <vcom_Resume+0x14>
  {
    Error_Handler();
 8001488:	f7ff f926 	bl	80006d8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800148c:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <vcom_Resume+0x2c>)
 800148e:	f000 f9fb 	bl	8001888 <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <vcom_Resume+0x24>
  {
    Error_Handler();
 8001498:	f7ff f91e 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000084 	.word	0x20000084
 80014a4:	20000118 	.word	0x20000118

080014a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_UART_TxCpltCallback+0x24>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d103      	bne.n	80014c2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_UART_TxCpltCallback+0x28>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2000      	movs	r0, #0
 80014c0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40004400 	.word	0x40004400
 80014d0:	2000017c 	.word	0x2000017c

080014d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <HAL_UART_RxCpltCallback+0x44>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d113      	bne.n	800150e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_UART_RxCpltCallback+0x48>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <HAL_UART_RxCpltCallback+0x30>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_UART_RxCpltCallback+0x48>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	2101      	movs	r1, #1
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <HAL_UART_RxCpltCallback+0x4c>)
 8001502:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	4906      	ldr	r1, [pc, #24]	@ (8001520 <HAL_UART_RxCpltCallback+0x4c>)
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f003 fccb 	bl	8004ea4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40004400 	.word	0x40004400
 800151c:	20000180 	.word	0x20000180
 8001520:	20000178 	.word	0x20000178

08001524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001524:	480d      	ldr	r0, [pc, #52]	@ (800155c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001526:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001528:	f7ff fb7a 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	@ (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001552:	f00a feaf 	bl	800c2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001556:	f7ff f85a 	bl	800060e <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   r0, =_estack
 800155c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001568:	0800c878 	.word	0x0800c878
  ldr r2, =_sbss
 800156c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001570:	200008a4 	.word	0x200008a4

08001574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6053      	str	r3, [r2, #4]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	e0042000 	.word	0xe0042000

08001594 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a03      	ldr	r2, [pc, #12]	@ (80015ac <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800159e:	f023 0302 	bic.w	r3, r3, #2
 80015a2:	6053      	str	r3, [r2, #4]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	e0042000 	.word	0xe0042000

080015b0 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a03      	ldr	r2, [pc, #12]	@ (80015c8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80015ba:	f023 0304 	bic.w	r3, r3, #4
 80015be:	6053      	str	r3, [r2, #4]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	e0042000 	.word	0xe0042000

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f914 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80015dc:	f002 f8a2 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a09      	ldr	r2, [pc, #36]	@ (8001608 <HAL_Init+0x3c>)
 80015e4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff fa9a 	bl	8000b20 <HAL_InitTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	e001      	b.n	80015fc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f8:	f7ff f965 	bl	80008c6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000

0800160c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <HAL_SuspendTick+0x18>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a03      	ldr	r2, [pc, #12]	@ (8001624 <HAL_SuspendTick+0x18>)
 8001616:	f023 0302 	bic.w	r3, r3, #2
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <HAL_ResumeTick+0x18>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a03      	ldr	r2, [pc, #12]	@ (8001640 <HAL_ResumeTick+0x18>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8001648:	f7ff ff96 	bl	8001578 <LL_DBGMCU_DisableDBGSleepMode>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8001654:	f7ff ff9e 	bl	8001594 <LL_DBGMCU_DisableDBGStopMode>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8001660:	f7ff ffa6 	bl	80015b0 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4906      	ldr	r1, [pc, #24]	@ (8001700 <__NVIC_EnableIRQ+0x34>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db12      	blt.n	800173c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	490a      	ldr	r1, [pc, #40]	@ (8001748 <__NVIC_DisableIRQ+0x44>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	3320      	adds	r3, #32
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001730:	f3bf 8f4f 	dsb	sy
}
 8001734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001736:	f3bf 8f6f 	isb	sy
}
 800173a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff2b 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff42 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ffb4 	bl	80017a0 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff83 	bl	800174c <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff35 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff43 	bl	8001704 <__NVIC_DisableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e08e      	b.n	80019b8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <HAL_DMA_Init+0x138>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d80f      	bhi.n	80018c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b45      	ldr	r3, [pc, #276]	@ (80019c4 <HAL_DMA_Init+0x13c>)
 80018ae:	4413      	add	r3, r2
 80018b0:	4a45      	ldr	r2, [pc, #276]	@ (80019c8 <HAL_DMA_Init+0x140>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	009a      	lsls	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a42      	ldr	r2, [pc, #264]	@ (80019cc <HAL_DMA_Init+0x144>)
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80018c4:	e00e      	b.n	80018e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b40      	ldr	r3, [pc, #256]	@ (80019d0 <HAL_DMA_Init+0x148>)
 80018ce:	4413      	add	r3, r2
 80018d0:	4a3d      	ldr	r2, [pc, #244]	@ (80019c8 <HAL_DMA_Init+0x140>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	009a      	lsls	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_DMA_Init+0x14c>)
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018fe:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fb52 	bl	8001fe0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001944:	d102      	bne.n	800194c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001954:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001958:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001962:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d010      	beq.n	800198e <HAL_DMA_Init+0x106>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d80c      	bhi.n	800198e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fb7b 	bl	8002070 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	e008      	b.n	80019a0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40020407 	.word	0x40020407
 80019c4:	bffdfff8 	.word	0xbffdfff8
 80019c8:	cccccccd 	.word	0xcccccccd
 80019cc:	40020000 	.word	0x40020000
 80019d0:	bffdfbf8 	.word	0xbffdfbf8
 80019d4:	40020400 	.word	0x40020400

080019d8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07b      	b.n	8001ae2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b3a      	ldr	r3, [pc, #232]	@ (8001aec <HAL_DMA_DeInit+0x114>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d80f      	bhi.n	8001a26 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_DMA_DeInit+0x118>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a38      	ldr	r2, [pc, #224]	@ (8001af4 <HAL_DMA_DeInit+0x11c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	009a      	lsls	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a35      	ldr	r2, [pc, #212]	@ (8001af8 <HAL_DMA_DeInit+0x120>)
 8001a22:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a24:	e00e      	b.n	8001a44 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b33      	ldr	r3, [pc, #204]	@ (8001afc <HAL_DMA_DeInit+0x124>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a30      	ldr	r2, [pc, #192]	@ (8001af4 <HAL_DMA_DeInit+0x11c>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a2f      	ldr	r2, [pc, #188]	@ (8001b00 <HAL_DMA_DeInit+0x128>)
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	f003 021c 	and.w	r2, r3, #28
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fabd 	bl	8001fe0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a76:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00f      	beq.n	8001aa0 <HAL_DMA_DeInit+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d80b      	bhi.n	8001aa0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 faf1 	bl	8002070 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a9e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020407 	.word	0x40020407
 8001af0:	bffdfff8 	.word	0xbffdfff8
 8001af4:	cccccccd 	.word	0xcccccccd
 8001af8:	40020000 	.word	0x40020000
 8001afc:	bffdfbf8 	.word	0xbffdfbf8
 8001b00:	40020400 	.word	0x40020400

08001b04 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Start_IT+0x20>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e069      	b.n	8001bf8 <HAL_DMA_Start_IT+0xf4>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d155      	bne.n	8001be4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 fa02 	bl	8001f66 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 020e 	orr.w	r2, r2, #14
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e00f      	b.n	8001b9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0204 	bic.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 020a 	orr.w	r2, r2, #10
 8001b9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e008      	b.n	8001bf6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2280      	movs	r2, #128	@ 0x80
 8001be8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e04f      	b.n	8001cb2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d008      	beq.n	8001c30 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2204      	movs	r2, #4
 8001c22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e040      	b.n	8001cb2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 020e 	bic.w	r2, r2, #14
 8001c3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c64:	f003 021c 	and.w	r2, r3, #28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d005      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e047      	b.n	8001d70 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 020e 	bic.w	r2, r2, #14
 8001cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	f003 021c 	and.w	r2, r3, #28
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
    }
  }
  return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	f003 031c 	and.w	r3, r3, #28
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d027      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x7c>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d022      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd4:	f003 021c 	and.w	r2, r3, #28
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	2104      	movs	r1, #4
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8081 	beq.w	8001ef0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001df6:	e07b      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	f003 031c 	and.w	r3, r3, #28
 8001e00:	2202      	movs	r2, #2
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d03d      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x10c>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d038      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020a 	bic.w	r2, r2, #10
 8001e32:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b2e      	ldr	r3, [pc, #184]	@ (8001efc <HAL_DMA_IRQHandler+0x180>)
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d909      	bls.n	8001e5c <HAL_DMA_IRQHandler+0xe0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4c:	f003 031c 	and.w	r3, r3, #28
 8001e50:	4a2b      	ldr	r2, [pc, #172]	@ (8001f00 <HAL_DMA_IRQHandler+0x184>)
 8001e52:	2102      	movs	r1, #2
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	6053      	str	r3, [r2, #4]
 8001e5a:	e008      	b.n	8001e6e <HAL_DMA_IRQHandler+0xf2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e60:	f003 031c 	and.w	r3, r3, #28
 8001e64:	4a27      	ldr	r2, [pc, #156]	@ (8001f04 <HAL_DMA_IRQHandler+0x188>)
 8001e66:	2102      	movs	r1, #2
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d038      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001e86:	e033      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8c:	f003 031c 	and.w	r3, r3, #28
 8001e90:	2208      	movs	r2, #8
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d02a      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x176>
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d025      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 020e 	bic.w	r2, r2, #14
 8001eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f003 021c 	and.w	r2, r3, #28
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
}
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020080 	.word	0x40020080
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020000 	.word	0x40020000

08001f08 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	72fb      	strb	r3, [r7, #11]
    return status;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	e01b      	b.n	8001f5c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	e003      	b.n	8001f52 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f50:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	601a      	str	r2, [r3, #0]

  return status;
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f7c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f94:	f003 021c 	and.w	r2, r3, #28
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d108      	bne.n	8001fc6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fc4:	e007      	b.n	8001fd6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	60da      	str	r2, [r3, #12]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d813      	bhi.n	800201c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002000:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3b08      	subs	r3, #8
 8002010:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e011      	b.n	8002040 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	009a      	lsls	r2, r3, #2
 8002024:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002026:	4413      	add	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3b08      	subs	r3, #8
 8002034:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	3307      	adds	r3, #7
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0a      	ldr	r2, [pc, #40]	@ (800206c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002044:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2201      	movs	r2, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40020407 	.word	0x40020407
 8002064:	cccccccd 	.word	0xcccccccd
 8002068:	4002081c 	.word	0x4002081c
 800206c:	40020880 	.word	0x40020880

08002070 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002080:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a08      	ldr	r2, [pc, #32]	@ (80020b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002094:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b01      	subs	r3, #1
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	1000823f 	.word	0x1000823f
 80020b4:	40020940 	.word	0x40020940

080020b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c6:	e140      	b.n	800234a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8132 	beq.w	8002344 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d005      	beq.n	80020f8 <HAL_GPIO_Init+0x40>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0201 	and.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b03      	cmp	r3, #3
 8002164:	d017      	beq.n	8002196 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d123      	bne.n	80021ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	6939      	ldr	r1, [r7, #16]
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 808c 	beq.w	8002344 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800222c:	4a4e      	ldr	r2, [pc, #312]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	2207      	movs	r2, #7
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002256:	d00d      	beq.n	8002274 <HAL_GPIO_Init+0x1bc>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a44      	ldr	r2, [pc, #272]	@ (800236c <HAL_GPIO_Init+0x2b4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <HAL_GPIO_Init+0x1b8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a43      	ldr	r2, [pc, #268]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_GPIO_Init+0x1b4>
 8002268:	2302      	movs	r3, #2
 800226a:	e004      	b.n	8002276 <HAL_GPIO_Init+0x1be>
 800226c:	2307      	movs	r3, #7
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x1be>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_GPIO_Init+0x1be>
 8002274:	2300      	movs	r3, #0
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002286:	4938      	ldr	r1, [pc, #224]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002294:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022be:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e2:	4a24      	ldr	r2, [pc, #144]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022e8:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800230e:	4a19      	ldr	r2, [pc, #100]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800231c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f aeb7 	bne.w	80020c8 <HAL_GPIO_Init+0x10>
  }
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40010000 	.word	0x40010000
 800236c:	48000400 	.word	0x48000400
 8002370:	48000800 	.word	0x48000800
 8002374:	58000800 	.word	0x58000800

08002378 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002386:	e0af      	b.n	80024e8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002388:	2201      	movs	r2, #1
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a2 	beq.w	80024e2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800239e:	4a59      	ldr	r2, [pc, #356]	@ (8002504 <HAL_GPIO_DeInit+0x18c>)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	2207      	movs	r2, #7
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_DeInit+0x6c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002508 <HAL_GPIO_DeInit+0x190>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_DeInit+0x68>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4e      	ldr	r2, [pc, #312]	@ (800250c <HAL_GPIO_DeInit+0x194>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_DeInit+0x64>
 80023d8:	2302      	movs	r3, #2
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_DeInit+0x6e>
 80023dc:	2307      	movs	r3, #7
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_DeInit+0x6e>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_DeInit+0x6e>
 80023e4:	2300      	movs	r3, #0
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d136      	bne.n	8002464 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80023f6:	4b46      	ldr	r3, [pc, #280]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 80023f8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	4943      	ldr	r1, [pc, #268]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 8002402:	4013      	ands	r3, r2
 8002404:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002408:	4b41      	ldr	r3, [pc, #260]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 800240a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	493f      	ldr	r1, [pc, #252]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 8002414:	4013      	ands	r3, r2
 8002416:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800241a:	4b3d      	ldr	r3, [pc, #244]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	493b      	ldr	r1, [pc, #236]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 8002424:	4013      	ands	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002428:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	4937      	ldr	r1, [pc, #220]	@ (8002510 <HAL_GPIO_DeInit+0x198>)
 8002432:	4013      	ands	r3, r2
 8002434:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	2207      	movs	r2, #7
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002446:	4a2f      	ldr	r2, [pc, #188]	@ (8002504 <HAL_GPIO_DeInit+0x18c>)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43da      	mvns	r2, r3
 8002456:	482b      	ldr	r0, [pc, #172]	@ (8002504 <HAL_GPIO_DeInit+0x18c>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	400a      	ands	r2, r1
 800245e:	3302      	adds	r3, #2
 8002460:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2103      	movs	r1, #3
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	08d2      	lsrs	r2, r2, #3
 8002498:	4019      	ands	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2103      	movs	r1, #3
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	2101      	movs	r1, #1
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2103      	movs	r1, #3
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	401a      	ands	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
    }

    position++;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f47f af49 	bne.w	8002388 <HAL_GPIO_DeInit+0x10>
  }
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	48000400 	.word	0x48000400
 800250c:	48000800 	.word	0x48000800
 8002510:	58000800 	.word	0x58000800

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002554:	887a      	ldrh	r2, [r7, #2]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	041a      	lsls	r2, r3, #16
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43d9      	mvns	r1, r3
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	400b      	ands	r3, r1
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002578:	4b04      	ldr	r3, [pc, #16]	@ (800258c <HAL_PWR_EnableBkUpAccess+0x18>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a03      	ldr	r2, [pc, #12]	@ (800258c <HAL_PWR_EnableBkUpAccess+0x18>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	58000400 	.word	0x58000400

08002590 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80025a2:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <HAL_PWR_EnterSLEEPMode+0x60>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ae:	d10d      	bne.n	80025cc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80025b0:	f000 f83c 	bl	800262c <HAL_PWREx_DisableLowPowerRunMode>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80025ba:	e015      	b.n	80025e8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_PWR_EnterSLEEPMode+0x60>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80025c8:	f000 f822 	bl	8002610 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80025cc:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80025d2:	f023 0304 	bic.w	r3, r3, #4
 80025d6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80025de:	bf30      	wfi
 80025e0:	e002      	b.n	80025e8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80025e2:	bf40      	sev
    __WFE();
 80025e4:	bf20      	wfe
    __WFE();
 80025e6:	bf20      	wfe
  }
}
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	58000400 	.word	0x58000400
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <HAL_PWREx_GetVoltageRange+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	58000400 	.word	0x58000400

08002610 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a03      	ldr	r2, [pc, #12]	@ (8002628 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	58000400 	.word	0x58000400

0800262c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002632:	4b16      	ldr	r3, [pc, #88]	@ (800268c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a15      	ldr	r2, [pc, #84]	@ (800268c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800263c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2232      	movs	r2, #50	@ 0x32
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	4a12      	ldr	r2, [pc, #72]	@ (8002694 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002652:	e002      	b.n	800265a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800265a:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002666:	d102      	bne.n	800266e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f2      	bne.n	8002654 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800267a:	d101      	bne.n	8002680 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e000      	b.n	8002682 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	58000400 	.word	0x58000400
 8002690:	20000000 	.word	0x20000000
 8002694:	431bde83 	.word	0x431bde83

08002698 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	4a0e      	ldr	r2, [pc, #56]	@ (80026e4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80026c4:	bf30      	wfi
 80026c6:	e002      	b.n	80026ce <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80026c8:	bf40      	sev
    __WFE();
 80026ca:	bf20      	wfe
    __WFE();
 80026cc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6113      	str	r3, [r2, #16]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	58000400 	.word	0x58000400
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <LL_PWR_IsEnabledBkUpAccess>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026fc:	d101      	bne.n	8002702 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	58000400 	.word	0x58000400

08002710 <LL_RCC_HSE_EnableTcxo>:
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800271e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <LL_RCC_HSE_DisableTcxo>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800273a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800275a:	d101      	bne.n	8002760 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <LL_RCC_HSE_Enable>:
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277c:	6013      	str	r3, [r2, #0]
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <LL_RCC_HSE_Disable>:
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800278a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <LL_RCC_HSE_IsReady>:
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027b4:	d101      	bne.n	80027ba <LL_RCC_HSE_IsReady+0x18>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_RCC_HSE_IsReady+0x1a>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_HSI_Enable>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <LL_RCC_HSI_Disable>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <LL_RCC_HSI_IsReady>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280e:	d101      	bne.n	8002814 <LL_RCC_HSI_IsReady+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_RCC_HSI_IsReady+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <LL_RCC_HSI_SetCalibTrimming>:
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <LL_RCC_LSE_IsReady>:
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d101      	bne.n	800285e <LL_RCC_LSE_IsReady+0x18>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_RCC_LSE_IsReady+0x1a>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <LL_RCC_LSI_Enable>:
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002874:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_RCC_LSI_Disable>:
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002894:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_LSI_IsReady>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d101      	bne.n	80028c0 <LL_RCC_LSI_IsReady+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_RCC_LSI_IsReady+0x1a>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <LL_RCC_MSI_Enable>:
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6013      	str	r3, [r2, #0]
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_MSI_Disable>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6013      	str	r3, [r2, #0]
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <LL_RCC_MSI_IsReady>:
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d101      	bne.n	8002918 <LL_RCC_MSI_IsReady+0x16>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_RCC_MSI_IsReady+0x18>
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b08      	cmp	r3, #8
 8002932:	d101      	bne.n	8002938 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <LL_RCC_MSI_GetRange>:
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002964:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <LL_RCC_SetSysClkSource>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <LL_RCC_GetSysClkSource>:
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_SetAHBPrescaler>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <LL_C2_RCC_SetAHBPrescaler>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a06:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_SetAHB3Prescaler>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a34:	f023 020f 	bic.w	r2, r3, #15
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_SetAPB1Prescaler>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <LL_RCC_SetAPB2Prescaler>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <LL_RCC_GetAHBPrescaler>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_GetAHB3Prescaler>:
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <LL_RCC_GetAPB1Prescaler>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <LL_RCC_GetAPB2Prescaler>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b42:	d101      	bne.n	8002b48 <LL_RCC_PLL_IsReady+0x18>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <LL_RCC_PLL_IsReady+0x1a>
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bbe:	d101      	bne.n	8002bc4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002be2:	d101      	bne.n	8002be8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c06:	d101      	bne.n	8002c0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c28:	d101      	bne.n	8002c2e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c4a:	d101      	bne.n	8002c50 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e36f      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6e:	f7ff fea6 	bl	80029be <LL_RCC_GetSysClkSource>
 8002c72:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	f7ff ff8f 	bl	8002b96 <LL_RCC_PLL_GetMainSource>
 8002c78:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80c4 	beq.w	8002e10 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x3e>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d176      	bne.n	8002d82 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d173      	bne.n	8002d82 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e353      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x68>
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc2:	e006      	b.n	8002cd2 <HAL_RCC_OscConfig+0x76>
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d222      	bcs.n	8002d1c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fd5a 	bl	8003794 <RCC_SetFlashLatencyFromMSIRange>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e331      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fe2b 	bl	8002970 <LL_RCC_MSI_SetCalibTrimming>
 8002d1a:	e021      	b.n	8002d60 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fe12 	bl	8002970 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fd1f 	bl	8003794 <RCC_SetFlashLatencyFromMSIRange>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e2f6      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d60:	f000 fce0 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4aa7      	ldr	r2, [pc, #668]	@ (8003004 <HAL_RCC_OscConfig+0x3a8>)
 8002d68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8003008 <HAL_RCC_OscConfig+0x3ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fed6 	bl	8000b20 <HAL_InitTick>
 8002d74:	4603      	mov	r3, r0
 8002d76:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d047      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	e2e5      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d8a:	f7ff fd9e 	bl	80028ca <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d8e:	f7fd fed1 	bl	8000b34 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d96:	f7fd fecd 	bl	8000b34 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e2d2      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002da8:	f7ff fdab 	bl	8002902 <LL_RCC_MSI_IsReady>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f1      	beq.n	8002d96 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dbc:	f043 0308 	orr.w	r3, r3, #8
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fdc7 	bl	8002970 <LL_RCC_MSI_SetCalibTrimming>
 8002de2:	e015      	b.n	8002e10 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de4:	f7ff fd7f 	bl	80028e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002de8:	f7fd fea4 	bl	8000b34 <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df0:	f7fd fea0 	bl	8000b34 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e2a5      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e02:	f7ff fd7e 	bl	8002902 <LL_RCC_MSI_IsReady>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f1      	bne.n	8002df0 <HAL_RCC_OscConfig+0x194>
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e0e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d058      	beq.n	8002ece <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d005      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d108      	bne.n	8002e3a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14b      	bne.n	8002ece <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e289      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e58:	d102      	bne.n	8002e60 <HAL_RCC_OscConfig+0x204>
 8002e5a:	f7ff fc86 	bl	800276a <LL_RCC_HSE_Enable>
 8002e5e:	e00d      	b.n	8002e7c <HAL_RCC_OscConfig+0x220>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002e68:	d104      	bne.n	8002e74 <HAL_RCC_OscConfig+0x218>
 8002e6a:	f7ff fc51 	bl	8002710 <LL_RCC_HSE_EnableTcxo>
 8002e6e:	f7ff fc7c 	bl	800276a <LL_RCC_HSE_Enable>
 8002e72:	e003      	b.n	8002e7c <HAL_RCC_OscConfig+0x220>
 8002e74:	f7ff fc87 	bl	8002786 <LL_RCC_HSE_Disable>
 8002e78:	f7ff fc58 	bl	800272c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fd fe56 	bl	8000b34 <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fd fe52 	bl	8000b34 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e257      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e9e:	f7ff fc80 	bl	80027a2 <LL_RCC_HSE_IsReady>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f1      	beq.n	8002e8c <HAL_RCC_OscConfig+0x230>
 8002ea8:	e011      	b.n	8002ece <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fd fe43 	bl	8000b34 <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb2:	f7fd fe3f 	bl	8000b34 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	@ 0x64
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e244      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ec4:	f7ff fc6d 	bl	80027a2 <LL_RCC_HSE_IsReady>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f1      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d046      	beq.n	8002f68 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x290>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d10e      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e22a      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fc8e 	bl	800281e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f02:	e031      	b.n	8002f68 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d019      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0c:	f7ff fc5a 	bl	80027c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fd fe10 	bl	8000b34 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7fd fe0c 	bl	8000b34 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e211      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f2a:	f7ff fc67 	bl	80027fc <LL_RCC_HSI_IsReady>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f1      	beq.n	8002f18 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fc70 	bl	800281e <LL_RCC_HSI_SetCalibTrimming>
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f40:	f7ff fc4e 	bl	80027e0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd fdf6 	bl	8000b34 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4c:	f7fd fdf2 	bl	8000b34 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1f7      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f5e:	f7ff fc4d 	bl	80027fc <LL_RCC_HSI_IsReady>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f1      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d06e      	beq.n	8003052 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d056      	beq.n	800302a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f84:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d031      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e1d0      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002fb6:	f7ff fc67 	bl	8002888 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fba:	f7fd fdbb 	bl	8000b34 <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fd fdb7 	bl	8000b34 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b11      	cmp	r3, #17
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1bc      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002fd4:	f7ff fc68 	bl	80028a8 <LL_RCC_LSI_IsReady>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f1      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe6:	f023 0210 	bic.w	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff8:	f7ff fc36 	bl	8002868 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fd fd9a 	bl	8000b34 <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003002:	e00c      	b.n	800301e <HAL_RCC_OscConfig+0x3c2>
 8003004:	20000000 	.word	0x20000000
 8003008:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fd fd92 	bl	8000b34 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b11      	cmp	r3, #17
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e197      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800301e:	f7ff fc43 	bl	80028a8 <LL_RCC_LSI_IsReady>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f1      	beq.n	800300c <HAL_RCC_OscConfig+0x3b0>
 8003028:	e013      	b.n	8003052 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302a:	f7ff fc2d 	bl	8002888 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302e:	f7fd fd81 	bl	8000b34 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003036:	f7fd fd7d 	bl	8000b34 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b11      	cmp	r3, #17
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e182      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003048:	f7ff fc2e 	bl	80028a8 <LL_RCC_LSI_IsReady>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f1      	bne.n	8003036 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80d8 	beq.w	8003210 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003060:	f7ff fb44 	bl	80026ec <LL_PWR_IsEnabledBkUpAccess>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d113      	bne.n	8003092 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800306a:	f7ff fa83 	bl	8002574 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7fd fd61 	bl	8000b34 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7fd fd5d 	bl	8000b34 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e162      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003088:	f7ff fb30 	bl	80026ec <LL_PWR_IsEnabledBkUpAccess>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f1      	beq.n	8003076 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d07b      	beq.n	8003192 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b85      	cmp	r3, #133	@ 0x85
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d109      	bne.n	80030be <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fd fd39 	bl	8000b34 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fd fd2b 	bl	8000b34 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e12e      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80030f0:	f7ff fba9 	bl	8002846 <LL_RCC_LSE_IsReady>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ef      	beq.n	80030da <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b81      	cmp	r3, #129	@ 0x81
 8003100:	d003      	beq.n	800310a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b85      	cmp	r3, #133	@ 0x85
 8003108:	d121      	bne.n	800314e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fd fd13 	bl	8000b34 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003118:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800311c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd fd05 	bl	8000b34 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e108      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ec      	beq.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800314c:	e060      	b.n	8003210 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fd fcf1 	bl	8000b34 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fd fce3 	bl	8000b34 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0e6      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ec      	bne.n	800316a <HAL_RCC_OscConfig+0x50e>
 8003190:	e03e      	b.n	8003210 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7fd fccf 	bl	8000b34 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fd fcc1 	bl	8000b34 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0c4      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ec      	bne.n	80031ae <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fd fcae 	bl	8000b34 <HAL_GetTick>
 80031d8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fd fca0 	bl	8000b34 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0a3      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003206:	f7ff fb1e 	bl	8002846 <LL_RCC_LSE_IsReady>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ef      	bne.n	80031f0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8099 	beq.w	800334c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d06c      	beq.n	80032fa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	2b02      	cmp	r3, #2
 8003226:	d14b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003228:	f7ff fc74 	bl	8002b14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fd fc82 	bl	8000b34 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fd fc7e 	bl	8000b34 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b0a      	cmp	r3, #10
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e083      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003246:	f7ff fc73 	bl	8002b30 <LL_RCC_PLL_IsReady>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f1      	bne.n	8003234 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	4b40      	ldr	r3, [pc, #256]	@ (8003358 <HAL_RCC_OscConfig+0x6fc>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003262:	4311      	orrs	r1, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003268:	0212      	lsls	r2, r2, #8
 800326a:	4311      	orrs	r1, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800327c:	430a      	orrs	r2, r1
 800327e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003282:	4313      	orrs	r3, r2
 8003284:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003286:	f7ff fc37 	bl	8002af8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003298:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fd fc4b 	bl	8000b34 <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fd fc47 	bl	8000b34 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b0a      	cmp	r3, #10
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e04c      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80032b4:	f7ff fc3c 	bl	8002b30 <LL_RCC_PLL_IsReady>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f1      	beq.n	80032a2 <HAL_RCC_OscConfig+0x646>
 80032be:	e045      	b.n	800334c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	f7ff fc28 	bl	8002b14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd fc36 	bl	8000b34 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd fc32 	bl	8000b34 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b0a      	cmp	r3, #10
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e037      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80032de:	f7ff fc27 	bl	8002b30 <LL_RCC_PLL_IsReady>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f1      	bne.n	80032cc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80032e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032f2:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_RCC_OscConfig+0x700>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
 80032f8:	e028      	b.n	800334c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e023      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	429a      	cmp	r2, r3
 800331a:	d115      	bne.n	8003348 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003326:	429a      	cmp	r2, r3
 8003328:	d10e      	bne.n	8003348 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	429a      	cmp	r2, r3
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	11c1808c 	.word	0x11c1808c
 800335c:	eefefffc 	.word	0xeefefffc

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e12c      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b98      	ldr	r3, [pc, #608]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d91b      	bls.n	80033ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b95      	ldr	r3, [pc, #596]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4993      	ldr	r1, [pc, #588]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003392:	f7fd fbcf 	bl	8000b34 <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003398:	e008      	b.n	80033ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800339a:	f7fd fbcb 	bl	8000b34 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e110      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ac:	4b8a      	ldr	r3, [pc, #552]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d1ef      	bne.n	800339a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fb02 	bl	80029d4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033d0:	f7fd fbb0 	bl	8000b34 <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033d8:	f7fd fbac 	bl	8000b34 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e0f1      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80033ea:	f7ff fbdf 	bl	8002bac <LL_RCC_IsActiveFlag_HPRE>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f1      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d016      	beq.n	800342e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff faf8 	bl	80029fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800340a:	f7fd fb93 	bl	8000b34 <HAL_GetTick>
 800340e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003412:	f7fd fb8f 	bl	8000b34 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0d4      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003424:	f7ff fbd3 	bl	8002bce <LL_RCC_IsActiveFlag_C2HPRE>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f1      	beq.n	8003412 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff faf0 	bl	8002a24 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003444:	f7fd fb76 	bl	8000b34 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800344c:	f7fd fb72 	bl	8000b34 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0b7      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800345e:	f7ff fbc8 	bl	8002bf2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f1      	beq.n	800344c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fae9 	bl	8002a50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800347e:	f7fd fb59 	bl	8000b34 <HAL_GetTick>
 8003482:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003486:	f7fd fb55 	bl	8000b34 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e09a      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003498:	f7ff fbbd 	bl	8002c16 <LL_RCC_IsActiveFlag_PPRE1>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f1      	beq.n	8003486 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fade 	bl	8002a76 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ba:	f7fd fb3b 	bl	8000b34 <HAL_GetTick>
 80034be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034c2:	f7fd fb37 	bl	8000b34 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e07c      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034d4:	f7ff fbb0 	bl	8002c38 <LL_RCC_IsActiveFlag_PPRE2>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f1      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d043      	beq.n	8003572 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80034f2:	f7ff f956 	bl	80027a2 <LL_RCC_HSE_IsReady>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11e      	bne.n	800353a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e066      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d106      	bne.n	8003516 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003508:	f7ff fb12 	bl	8002b30 <LL_RCC_PLL_IsReady>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e05b      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800351e:	f7ff f9f0 	bl	8002902 <LL_RCC_MSI_IsReady>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e050      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800352c:	f7ff f966 	bl	80027fc <LL_RCC_HSI_IsReady>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e049      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fa2a 	bl	8002998 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003544:	f7fd faf6 	bl	8000b34 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fd faf2 	bl	8000b34 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e035      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	f7ff fa2c 	bl	80029be <LL_RCC_GetSysClkSource>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	429a      	cmp	r2, r3
 8003570:	d1ec      	bne.n	800354c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003572:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d21b      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003580:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 0207 	bic.w	r2, r3, #7
 8003588:	4913      	ldr	r1, [pc, #76]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fd fad0 	bl	8000b34 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	e008      	b.n	80035aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003598:	f7fd facc 	bl	8000b34 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e011      	b.n	80035ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_RCC_ClockConfig+0x278>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d1ef      	bne.n	8003598 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035b8:	f000 f8b4 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 80035bc:	4603      	mov	r3, r0
 80035be:	4a07      	ldr	r2, [pc, #28]	@ (80035dc <HAL_RCC_ClockConfig+0x27c>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80035c2:	4b07      	ldr	r3, [pc, #28]	@ (80035e0 <HAL_RCC_ClockConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd faaa 	bl	8000b20 <HAL_InitTick>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	58004000 	.word	0x58004000
 80035dc:	20000000 	.word	0x20000000
 80035e0:	20000004 	.word	0x20000004

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f2:	f7ff f9e4 	bl	80029be <LL_RCC_GetSysClkSource>
 80035f6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f8:	f7ff facd 	bl	8002b96 <LL_RCC_PLL_GetMainSource>
 80035fc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d139      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d136      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003610:	f7ff f987 	bl	8002922 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d115      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x62>
 800361a:	f7ff f982 	bl	8002922 <LL_RCC_MSI_IsEnabledRangeSelect>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_GetSysClockFreq+0x4e>
 8003624:	f7ff f98d 	bl	8002942 <LL_RCC_MSI_GetRange>
 8003628:	4603      	mov	r3, r0
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	e005      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x5a>
 8003632:	f7ff f991 	bl	8002958 <LL_RCC_MSI_GetRangeAfterStandby>
 8003636:	4603      	mov	r3, r0
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	4a36      	ldr	r2, [pc, #216]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x134>)
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	e014      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x8c>
 8003646:	f7ff f96c 	bl	8002922 <LL_RCC_MSI_IsEnabledRangeSelect>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x7a>
 8003650:	f7ff f977 	bl	8002942 <LL_RCC_MSI_GetRange>
 8003654:	4603      	mov	r3, r0
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	e005      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x86>
 800365e:	f7ff f97b 	bl	8002958 <LL_RCC_MSI_GetRangeAfterStandby>
 8003662:	4603      	mov	r3, r0
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4a2b      	ldr	r2, [pc, #172]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x134>)
 800366c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003670:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d115      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800367c:	e012      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d102      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003684:	4b25      	ldr	r3, [pc, #148]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e00c      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003690:	f7ff f85a 	bl	8002748 <LL_RCC_HSE_IsEnabledDiv2>
 8003694:	4603      	mov	r3, r0
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800369a:	4b20      	ldr	r3, [pc, #128]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	e001      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036a2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a4:	f7ff f98b 	bl	80029be <LL_RCC_GetSysClkSource>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d12f      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036ae:	f7ff fa72 	bl	8002b96 <LL_RCC_PLL_GetMainSource>
 80036b2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0xde>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d003      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80036c0:	e00d      	b.n	80036de <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80036c2:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 80036c4:	60fb      	str	r3, [r7, #12]
        break;
 80036c6:	e00d      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036c8:	f7ff f83e 	bl	8002748 <LL_RCC_HSE_IsEnabledDiv2>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80036d2:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 80036d4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80036d6:	e005      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80036d8:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036da:	60fb      	str	r3, [r7, #12]
        break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80036e4:	f7ff fa35 	bl	8002b52 <LL_RCC_PLL_GetN>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	fb03 f402 	mul.w	r4, r3, r2
 80036f0:	f7ff fa46 	bl	8002b80 <LL_RCC_PLL_GetDivider>
 80036f4:	4603      	mov	r3, r0
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	3301      	adds	r3, #1
 80036fa:	fbb4 f4f3 	udiv	r4, r4, r3
 80036fe:	f7ff fa34 	bl	8002b6a <LL_RCC_PLL_GetR>
 8003702:	4603      	mov	r3, r0
 8003704:	0f5b      	lsrs	r3, r3, #29
 8003706:	3301      	adds	r3, #1
 8003708:	fbb4 f3f3 	udiv	r3, r4, r3
 800370c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800370e:	697b      	ldr	r3, [r7, #20]
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	0800c660 	.word	0x0800c660
 800371c:	00f42400 	.word	0x00f42400
 8003720:	01e84800 	.word	0x01e84800

08003724 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b598      	push	{r3, r4, r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003728:	f7ff ff5c 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800372c:	4604      	mov	r4, r0
 800372e:	f7ff f9b5 	bl	8002a9c <LL_RCC_GetAHBPrescaler>
 8003732:	4603      	mov	r3, r0
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4a03      	ldr	r2, [pc, #12]	@ (8003748 <HAL_RCC_GetHCLKFreq+0x24>)
 800373c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003740:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd98      	pop	{r3, r4, r7, pc}
 8003748:	0800c600 	.word	0x0800c600

0800374c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b598      	push	{r3, r4, r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003750:	f7ff ffe8 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003754:	4604      	mov	r4, r0
 8003756:	f7ff f9b9 	bl	8002acc <LL_RCC_GetAPB1Prescaler>
 800375a:	4603      	mov	r3, r0
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	4a03      	ldr	r2, [pc, #12]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003764:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd98      	pop	{r3, r4, r7, pc}
 800376c:	0800c640 	.word	0x0800c640

08003770 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b598      	push	{r3, r4, r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003774:	f7ff ffd6 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003778:	4604      	mov	r4, r0
 800377a:	f7ff f9b2 	bl	8002ae2 <LL_RCC_GetAPB2Prescaler>
 800377e:	4603      	mov	r3, r0
 8003780:	0adb      	lsrs	r3, r3, #11
 8003782:	4a03      	ldr	r2, [pc, #12]	@ (8003790 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	fa24 f303 	lsr.w	r3, r4, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd98      	pop	{r3, r4, r7, pc}
 8003790:	0800c640 	.word	0x0800c640

08003794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	4a10      	ldr	r2, [pc, #64]	@ (80037e8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80037ac:	f7ff f981 	bl	8002ab2 <LL_RCC_GetAHB3Prescaler>
 80037b0:	4603      	mov	r3, r0
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	4a0c      	ldr	r2, [pc, #48]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9c      	lsrs	r4, r3, #18
 80037d0:	f7fe ff12 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4619      	mov	r1, r3
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 f80b 	bl	80037f4 <RCC_SetFlashLatency>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}
 80037e8:	0800c660 	.word	0x0800c660
 80037ec:	0800c600 	.word	0x0800c600
 80037f0:	431bde83 	.word	0x431bde83

080037f4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	@ 0x38
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80037fe:	4a3a      	ldr	r2, [pc, #232]	@ (80038e8 <RCC_SetFlashLatency+0xf4>)
 8003800:	f107 0320 	add.w	r3, r7, #32
 8003804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003808:	6018      	str	r0, [r3, #0]
 800380a:	3304      	adds	r3, #4
 800380c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800380e:	4a37      	ldr	r2, [pc, #220]	@ (80038ec <RCC_SetFlashLatency+0xf8>)
 8003810:	f107 0318 	add.w	r3, r7, #24
 8003814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003818:	6018      	str	r0, [r3, #0]
 800381a:	3304      	adds	r3, #4
 800381c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800381e:	4a34      	ldr	r2, [pc, #208]	@ (80038f0 <RCC_SetFlashLatency+0xfc>)
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	ca07      	ldmia	r2, {r0, r1, r2}
 8003826:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003834:	d11b      	bne.n	800386e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003836:	2300      	movs	r3, #0
 8003838:	633b      	str	r3, [r7, #48]	@ 0x30
 800383a:	e014      	b.n	8003866 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	3338      	adds	r3, #56	@ 0x38
 8003842:	443b      	add	r3, r7
 8003844:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4293      	cmp	r3, r2
 800384e:	d807      	bhi.n	8003860 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3338      	adds	r3, #56	@ 0x38
 8003856:	443b      	add	r3, r7
 8003858:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800385e:	e021      	b.n	80038a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	3301      	adds	r3, #1
 8003864:	633b      	str	r3, [r7, #48]	@ 0x30
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	2b02      	cmp	r3, #2
 800386a:	d9e7      	bls.n	800383c <RCC_SetFlashLatency+0x48>
 800386c:	e01a      	b.n	80038a4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003872:	e014      	b.n	800389e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	3338      	adds	r3, #56	@ 0x38
 800387a:	443b      	add	r3, r7
 800387c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003880:	461a      	mov	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4293      	cmp	r3, r2
 8003886:	d807      	bhi.n	8003898 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3338      	adds	r3, #56	@ 0x38
 800388e:	443b      	add	r3, r7
 8003890:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003896:	e005      	b.n	80038a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	3301      	adds	r3, #1
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d9e7      	bls.n	8003874 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038a4:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <RCC_SetFlashLatency+0x100>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 0207 	bic.w	r2, r3, #7
 80038ac:	4911      	ldr	r1, [pc, #68]	@ (80038f4 <RCC_SetFlashLatency+0x100>)
 80038ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038b4:	f7fd f93e 	bl	8000b34 <HAL_GetTick>
 80038b8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ba:	e008      	b.n	80038ce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038bc:	f7fd f93a 	bl	8000b34 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e007      	b.n	80038de <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ce:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <RCC_SetFlashLatency+0x100>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1ef      	bne.n	80038bc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3738      	adds	r7, #56	@ 0x38
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	0800c33c 	.word	0x0800c33c
 80038ec:	0800c344 	.word	0x0800c344
 80038f0:	0800c34c 	.word	0x0800c34c
 80038f4:	58004000 	.word	0x58004000

080038f8 <LL_RCC_LSE_IsReady>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80038fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d101      	bne.n	8003910 <LL_RCC_LSE_IsReady+0x18>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <LL_RCC_LSE_IsReady+0x1a>
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_RCC_SetUSARTClockSource>:
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003926:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	43db      	mvns	r3, r3
 8003930:	401a      	ands	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <LL_RCC_SetI2SClockSource>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800395e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <LL_RCC_SetLPUARTClockSource>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003984:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003988:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <LL_RCC_SetI2CClockSource>:
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80039b6:	43db      	mvns	r3, r3
 80039b8:	401a      	ands	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80039c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <LL_RCC_SetLPTIMClockSource>:
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <LL_RCC_SetRNGClockSource>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_SetADCClockSource>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_SetRTCClockSource>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_GetRTCClockSource>:
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_ForceBackupDomainReset>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <LL_RCC_ReleaseBackupDomainReset>:
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d058      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b00:	f7fe fd38 	bl	8002574 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b04:	f7fd f816 	bl	8000b34 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b0a:	e009      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fd f812 	bl	8000b34 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d902      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b1e:	e006      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b20:	4b7b      	ldr	r3, [pc, #492]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2c:	d1ee      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d13c      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003b34:	f7ff ffa7 	bl	8003a86 <LL_RCC_GetRTCClockSource>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d00f      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b50:	f7ff ffa5 	bl	8003a9e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b54:	f7ff ffb3 	bl	8003abe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d014      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fc ffe2 	bl	8000b34 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003b72:	e00b      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fc ffde 	bl	8000b34 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d902      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	74fb      	strb	r3, [r7, #19]
            break;
 8003b8a:	e004      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003b8c:	f7ff feb4 	bl	80038f8 <LL_RCC_LSE_IsReady>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff5b 	bl	8003a5c <LL_RCC_SetRTCClockSource>
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
 8003bac:	e001      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fea9 	bl	800391a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fe9e 	bl	800391a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fec0 	bl	8003974 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fee6 	bl	80039d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fedb 	bl	80039d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fed0 	bl	80039d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fea9 	bl	800399e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fe9e 	bl	800399e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fe93 	bl	800399e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d011      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe5e 	bl	800394a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ca6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fea5 	bl	8003a08 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d011      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fea3 	bl	8003a32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d04:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	58000400 	.word	0x58000400

08003d14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d071      	beq.n	8003e0a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc fd4c 	bl	80007d8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d48:	4b32      	ldr	r3, [pc, #200]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d051      	beq.n	8003df8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d54:	4b2f      	ldr	r3, [pc, #188]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003d56:	22ca      	movs	r2, #202	@ 0xca
 8003d58:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003d5c:	2253      	movs	r2, #83	@ 0x53
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fa11 	bl	8004188 <RTC_EnterInitMode>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d13f      	bne.n	8003df0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003d70:	4b28      	ldr	r3, [pc, #160]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	4a27      	ldr	r2, [pc, #156]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003d76:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d7e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003d80:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	4319      	orrs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	430b      	orrs	r3, r1
 8003d94:	491f      	ldr	r1, [pc, #124]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	491b      	ldr	r1, [pc, #108]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003daa:	4b1a      	ldr	r3, [pc, #104]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4915      	ldr	r1, [pc, #84]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa14 	bl	80041f0 <RTC_ExitInitMode>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a19      	ldr	r1, [r3, #32]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	4319      	orrs	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003df0:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <HAL_RTC_Init+0x100>)
 8003df2:	22ff      	movs	r2, #255	@ 0xff
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003df6:	e001      	b.n	8003dfc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40002800 	.word	0x40002800

08003e18 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_RTC_SetAlarm_IT+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0f3      	b.n	800401e <HAL_RTC_SetAlarm_IT+0x206>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003e46:	4b78      	ldr	r3, [pc, #480]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e56:	d06a      	beq.n	8003f2e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d13a      	bne.n	8003ed4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003e5e:	4b72      	ldr	r3, [pc, #456]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f9f5 	bl	800426c <RTC_ByteToBcd2>
 8003e82:	4603      	mov	r3, r0
 8003e84:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f9ee 	bl	800426c <RTC_ByteToBcd2>
 8003e90:	4603      	mov	r3, r0
 8003e92:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e94:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	789b      	ldrb	r3, [r3, #2]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f9e6 	bl	800426c <RTC_ByteToBcd2>
 8003ea0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ea2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	78db      	ldrb	r3, [r3, #3]
 8003eaa:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003eac:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f9d8 	bl	800426c <RTC_ByteToBcd2>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ec0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ec8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e02c      	b.n	8003f2e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8003edc:	d00d      	beq.n	8003efa <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ee6:	d008      	beq.n	8003efa <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f06:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f0c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	78db      	ldrb	r3, [r3, #3]
 8003f12:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f14:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f1c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f1e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f24:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f30:	22ca      	movs	r2, #202	@ 0xca
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f34:	4b3c      	ldr	r3, [pc, #240]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f36:	2253      	movs	r2, #83	@ 0x53
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f42:	d12c      	bne.n	8003f9e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003f44:	4b38      	ldr	r3, [pc, #224]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	4a37      	ldr	r2, [pc, #220]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f4e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003f50:	4b35      	ldr	r3, [pc, #212]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5c:	d107      	bne.n	8003f6e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4930      	ldr	r1, [pc, #192]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	644b      	str	r3, [r1, #68]	@ 0x44
 8003f6c:	e006      	b.n	8003f7c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003f74:	4a2c      	ldr	r2, [pc, #176]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003f90:	4b25      	ldr	r3, [pc, #148]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	4a24      	ldr	r2, [pc, #144]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f96:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8003f9a:	6193      	str	r3, [r2, #24]
 8003f9c:	e02b      	b.n	8003ff6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003f9e:	4b22      	ldr	r3, [pc, #136]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fa4:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8003fa8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003faa:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fac:	2202      	movs	r2, #2
 8003fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4919      	ldr	r1, [pc, #100]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003fc6:	e006      	b.n	8003fd6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003fc8:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003fce:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003fd6:	4a14      	ldr	r2, [pc, #80]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	f043 0202 	orr.w	r2, r3, #2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003fea:	4b0f      	ldr	r3, [pc, #60]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	4a0e      	ldr	r2, [pc, #56]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff0:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8003ff4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800402c <HAL_RTC_SetAlarm_IT+0x214>)
 8003ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800402c <HAL_RTC_SetAlarm_IT+0x214>)
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004002:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004006:	4b08      	ldr	r3, [pc, #32]	@ (8004028 <HAL_RTC_SetAlarm_IT+0x210>)
 8004008:	22ff      	movs	r2, #255	@ 0xff
 800400a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
 8004026:	bf00      	nop
 8004028:	40002800 	.word	0x40002800
 800402c:	58000800 	.word	0x58000800

08004030 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_RTC_DeactivateAlarm+0x18>
 8004044:	2302      	movs	r3, #2
 8004046:	e048      	b.n	80040da <HAL_RTC_DeactivateAlarm+0xaa>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004058:	4b22      	ldr	r3, [pc, #136]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800405a:	22ca      	movs	r2, #202	@ 0xca
 800405c:	625a      	str	r2, [r3, #36]	@ 0x24
 800405e:	4b21      	ldr	r3, [pc, #132]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004060:	2253      	movs	r2, #83	@ 0x53
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406a:	d115      	bne.n	8004098 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800406c:	4b1d      	ldr	r3, [pc, #116]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4a1c      	ldr	r2, [pc, #112]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004072:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004076:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004078:	4b1a      	ldr	r3, [pc, #104]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800407a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407c:	4a19      	ldr	r2, [pc, #100]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800407e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004082:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004088:	f023 0201 	bic.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004090:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004092:	2201      	movs	r2, #1
 8004094:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004096:	e014      	b.n	80040c2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004098:	4b12      	ldr	r3, [pc, #72]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4a11      	ldr	r2, [pc, #68]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800409e:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80040a2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80040a4:	4b0f      	ldr	r3, [pc, #60]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a8:	4a0e      	ldr	r2, [pc, #56]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ae:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	f023 0202 	bic.w	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80040bc:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040be:	2202      	movs	r2, #2
 80040c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c2:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040c4:	22ff      	movs	r2, #255	@ 0xff
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	40002800 	.word	0x40002800

080040e8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80040f0:	4b11      	ldr	r3, [pc, #68]	@ (8004138 <HAL_RTC_AlarmIRQHandler+0x50>)
 80040f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	4013      	ands	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004106:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004108:	2201      	movs	r2, #1
 800410a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fc feea 	bl	8000ee6 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <HAL_RTC_AlarmIRQHandler+0x50>)
 800411e:	2202      	movs	r2, #2
 8004120:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f94a 	bl	80043bc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40002800 	.word	0x40002800

0800413c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004144:	4b0f      	ldr	r3, [pc, #60]	@ (8004184 <HAL_RTC_WaitForSynchro+0x48>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a0e      	ldr	r2, [pc, #56]	@ (8004184 <HAL_RTC_WaitForSynchro+0x48>)
 800414a:	f023 0320 	bic.w	r3, r3, #32
 800414e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004150:	f7fc fcf0 	bl	8000b34 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004156:	e009      	b.n	800416c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004158:	f7fc fcec 	bl	8000b34 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004166:	d901      	bls.n	800416c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e006      	b.n	800417a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <HAL_RTC_WaitForSynchro+0x48>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ef      	beq.n	8004158 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40002800 	.word	0x40002800

08004188 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004194:	4b15      	ldr	r3, [pc, #84]	@ (80041ec <RTC_EnterInitMode+0x64>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d120      	bne.n	80041e2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80041a0:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <RTC_EnterInitMode+0x64>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a11      	ldr	r2, [pc, #68]	@ (80041ec <RTC_EnterInitMode+0x64>)
 80041a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041aa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80041ac:	f7fc fcc2 	bl	8000b34 <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041b2:	e00d      	b.n	80041d0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041b4:	f7fc fcbe 	bl	8000b34 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041c2:	d905      	bls.n	80041d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2203      	movs	r2, #3
 80041cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041d0:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <RTC_EnterInitMode+0x64>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <RTC_EnterInitMode+0x5a>
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d1e8      	bne.n	80041b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40002800 	.word	0x40002800

080041f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80041fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <RTC_ExitInitMode+0x78>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <RTC_ExitInitMode+0x78>)
 8004202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004206:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004208:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <RTC_ExitInitMode+0x78>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10c      	bne.n	800422e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff91 	bl	800413c <HAL_RTC_WaitForSynchro>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01e      	beq.n	800425e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2203      	movs	r2, #3
 8004224:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e017      	b.n	800425e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800422e:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <RTC_ExitInitMode+0x78>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	4a0d      	ldr	r2, [pc, #52]	@ (8004268 <RTC_ExitInitMode+0x78>)
 8004234:	f023 0320 	bic.w	r3, r3, #32
 8004238:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ff7e 	bl	800413c <HAL_RTC_WaitForSynchro>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2203      	movs	r2, #3
 800424a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <RTC_ExitInitMode+0x78>)
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	4a04      	ldr	r2, [pc, #16]	@ (8004268 <RTC_ExitInitMode+0x78>)
 8004258:	f043 0320 	orr.w	r3, r3, #32
 800425c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40002800 	.word	0x40002800

0800426c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800427e:	e005      	b.n	800428c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	3b0a      	subs	r3, #10
 800428a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800428c:	7afb      	ldrb	r3, [r7, #11]
 800428e:	2b09      	cmp	r3, #9
 8004290:	d8f6      	bhi.n	8004280 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	b2da      	uxtb	r2, r3
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	4313      	orrs	r3, r2
 800429e:	b2db      	uxtb	r3, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_RTCEx_EnableBypassShadow+0x16>
 80042be:	2302      	movs	r3, #2
 80042c0:	e01f      	b.n	8004302 <HAL_RTCEx_EnableBypassShadow+0x56>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042d2:	4b0e      	ldr	r3, [pc, #56]	@ (800430c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80042d4:	22ca      	movs	r2, #202	@ 0xca
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80042d8:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80042da:	2253      	movs	r2, #83	@ 0x53
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042de:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80042e4:	f043 0320 	orr.w	r3, r3, #32
 80042e8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ea:	4b08      	ldr	r3, [pc, #32]	@ (800430c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80042ec:	22ff      	movs	r2, #255	@ 0xff
 80042ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40002800 	.word	0x40002800

08004310 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_RTCEx_SetSSRU_IT+0x16>
 8004322:	2302      	movs	r3, #2
 8004324:	e027      	b.n	8004376 <HAL_RTCEx_SetSSRU_IT+0x66>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004336:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004338:	22ca      	movs	r2, #202	@ 0xca
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
 800433c:	4b10      	ldr	r3, [pc, #64]	@ (8004380 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800433e:	2253      	movs	r2, #83	@ 0x53
 8004340:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004342:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	4a0e      	ldr	r2, [pc, #56]	@ (8004380 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004354:	4a0b      	ldr	r2, [pc, #44]	@ (8004384 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004356:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800435a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800435e:	4b08      	ldr	r3, [pc, #32]	@ (8004380 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004360:	22ff      	movs	r2, #255	@ 0xff
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	40002800 	.word	0x40002800
 8004384:	58000800 	.word	0x58000800

08004388 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004390:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800439e:	2240      	movs	r2, #64	@ 0x40
 80043a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fda9 	bl	8000efa <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40002800 	.word	0x40002800

080043bc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80043dc:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <HAL_RTCEx_BKUPWrite+0x2c>)
 80043de:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	4000b100 	.word	0x4000b100

08004400 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800440a:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <HAL_RTCEx_BKUPRead+0x28>)
 800440c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	4000b100 	.word	0x4000b100

0800442c <LL_PWR_SetRadioBusyTrigger>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004434:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800443c:	4904      	ldr	r1, [pc, #16]	@ (8004450 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	58000400 	.word	0x58000400

08004454 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445e:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	58000400 	.word	0x58000400

08004474 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447e:	4a04      	ldr	r2, [pc, #16]	@ (8004490 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004480:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	58000400 	.word	0x58000400

08004494 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004498:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800449a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800449e:	619a      	str	r2, [r3, #24]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	58000400 	.word	0x58000400

080044ac <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d101      	bne.n	80044c0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	58000400 	.word	0x58000400

080044d0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d101      	bne.n	80044e4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58000400 	.word	0x58000400

080044f4 <LL_RCC_RF_DisableReset>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004500:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004504:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004508:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <LL_RCC_IsRFUnderReset>:
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004528:	d101      	bne.n	800452e <LL_RCC_IsRFUnderReset+0x1a>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <LL_RCC_IsRFUnderReset+0x1c>
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <LL_EXTI_EnableIT_32_63+0x24>)
 8004542:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004546:	4905      	ldr	r1, [pc, #20]	@ (800455c <LL_EXTI_EnableIT_32_63+0x24>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	58000800 	.word	0x58000800

08004560 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
    return status;
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	e052      	b.n	800461c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	799b      	ldrb	r3, [r3, #6]
 800457e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004580:	7bbb      	ldrb	r3, [r7, #14]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_SUBGHZ_Init+0x2c>
 8004586:	7bbb      	ldrb	r3, [r7, #14]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d109      	bne.n	80045a0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fa32 	bl	80009fc <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004598:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800459c:	f7ff ffcc 	bl	8004538 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80045a0:	7bbb      	ldrb	r3, [r7, #14]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d126      	bne.n	80045f4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80045ac:	f7ff ffa2 	bl	80044f4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004624 <HAL_SUBGHZ_Init+0xc4>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	0cdb      	lsrs	r3, r3, #19
 80045be:	2264      	movs	r2, #100	@ 0x64
 80045c0:	fb02 f303 	mul.w	r3, r2, r3
 80045c4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	609a      	str	r2, [r3, #8]
        break;
 80045d6:	e007      	b.n	80045e8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80045de:	f7ff ff99 	bl	8004514 <LL_RCC_IsRFUnderReset>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ee      	bne.n	80045c6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045e8:	f7ff ff34 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80045ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80045f0:	f7ff ff1c 	bl	800442c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80045f4:	f7ff ff4e 	bl	8004494 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fabc 	bl	8004b80 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	719a      	strb	r2, [r3, #6]

  return status;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000000 	.word	0x20000000

08004628 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	461a      	mov	r2, r3
 8004634:	460b      	mov	r3, r1
 8004636:	817b      	strh	r3, [r7, #10]
 8004638:	4613      	mov	r3, r2
 800463a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	799b      	ldrb	r3, [r3, #6]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d14a      	bne.n	80046dc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	795b      	ldrb	r3, [r3, #5]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800464e:	2302      	movs	r3, #2
 8004650:	e045      	b.n	80046de <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2202      	movs	r2, #2
 800465c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fb5c 	bl	8004d1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004664:	f7ff ff06 	bl	8004474 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004668:	210d      	movs	r1, #13
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 faa8 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4619      	mov	r1, r3
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 faa0 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004680:	897b      	ldrh	r3, [r7, #10]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	4619      	mov	r1, r3
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fa9a 	bl	8004bc0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800468c:	2300      	movs	r3, #0
 800468e:	82bb      	strh	r3, [r7, #20]
 8004690:	e00a      	b.n	80046a8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004692:	8abb      	ldrh	r3, [r7, #20]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fa8f 	bl	8004bc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046a2:	8abb      	ldrh	r3, [r7, #20]
 80046a4:	3301      	adds	r3, #1
 80046a6:	82bb      	strh	r3, [r7, #20]
 80046a8:	8aba      	ldrh	r2, [r7, #20]
 80046aa:	893b      	ldrh	r3, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3f0      	bcc.n	8004692 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046b0:	f7ff fed0 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fb55 	bl	8004d64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
 80046c6:	e001      	b.n	80046cc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	715a      	strb	r2, [r3, #5]

    return status;
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	e000      	b.n	80046de <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b088      	sub	sp, #32
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	461a      	mov	r2, r3
 80046f2:	460b      	mov	r3, r1
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	4613      	mov	r3, r2
 80046f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	799b      	ldrb	r3, [r3, #6]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d14a      	bne.n	800479e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	795b      	ldrb	r3, [r3, #5]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004710:	2302      	movs	r3, #2
 8004712:	e045      	b.n	80047a0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fafe 	bl	8004d1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004720:	f7ff fea8 	bl	8004474 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004724:	211d      	movs	r1, #29
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fa4a 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800472c:	897b      	ldrh	r3, [r7, #10]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	b29b      	uxth	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa42 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800473c:	897b      	ldrh	r3, [r7, #10]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4619      	mov	r1, r3
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fa3c 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004748:	2100      	movs	r1, #0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fa38 	bl	8004bc0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	82fb      	strh	r3, [r7, #22]
 8004754:	e009      	b.n	800476a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004756:	69b9      	ldr	r1, [r7, #24]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fa87 	bl	8004c6c <SUBGHZSPI_Receive>
      pData++;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3301      	adds	r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004764:	8afb      	ldrh	r3, [r7, #22]
 8004766:	3301      	adds	r3, #1
 8004768:	82fb      	strh	r3, [r7, #22]
 800476a:	8afa      	ldrh	r2, [r7, #22]
 800476c:	893b      	ldrh	r3, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d3f1      	bcc.n	8004756 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004772:	f7ff fe6f 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 faf4 	bl	8004d64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e001      	b.n	800478e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	715a      	strb	r2, [r3, #5]

    return status;
 800479a:	7ffb      	ldrb	r3, [r7, #31]
 800479c:	e000      	b.n	80047a0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	461a      	mov	r2, r3
 80047b4:	460b      	mov	r3, r1
 80047b6:	72fb      	strb	r3, [r7, #11]
 80047b8:	4613      	mov	r3, r2
 80047ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	799b      	ldrb	r3, [r3, #6]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d14a      	bne.n	800485c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	795b      	ldrb	r3, [r3, #5]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e045      	b.n	800485e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fa9f 	bl	8004d1c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80047de:	7afb      	ldrb	r3, [r7, #11]
 80047e0:	2b84      	cmp	r3, #132	@ 0x84
 80047e2:	d002      	beq.n	80047ea <HAL_SUBGHZ_ExecSetCmd+0x42>
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	2b94      	cmp	r3, #148	@ 0x94
 80047e8:	d103      	bne.n	80047f2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	711a      	strb	r2, [r3, #4]
 80047f0:	e002      	b.n	80047f8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047f8:	f7ff fe3c 	bl	8004474 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80047fc:	7afb      	ldrb	r3, [r7, #11]
 80047fe:	4619      	mov	r1, r3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f9dd 	bl	8004bc0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004806:	2300      	movs	r3, #0
 8004808:	82bb      	strh	r3, [r7, #20]
 800480a:	e00a      	b.n	8004822 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800480c:	8abb      	ldrh	r3, [r7, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4413      	add	r3, r2
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f9d2 	bl	8004bc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800481c:	8abb      	ldrh	r3, [r7, #20]
 800481e:	3301      	adds	r3, #1
 8004820:	82bb      	strh	r3, [r7, #20]
 8004822:	8aba      	ldrh	r2, [r7, #20]
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d3f0      	bcc.n	800480c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800482a:	f7ff fe13 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800482e:	7afb      	ldrb	r3, [r7, #11]
 8004830:	2b84      	cmp	r3, #132	@ 0x84
 8004832:	d002      	beq.n	800483a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fa95 	bl	8004d64 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
 8004846:	e001      	b.n	800484c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	715a      	strb	r2, [r3, #5]

    return status;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	e000      	b.n	800485e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b088      	sub	sp, #32
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	461a      	mov	r2, r3
 8004872:	460b      	mov	r3, r1
 8004874:	72fb      	strb	r3, [r7, #11]
 8004876:	4613      	mov	r3, r2
 8004878:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	799b      	ldrb	r3, [r3, #6]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d13d      	bne.n	8004904 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	795b      	ldrb	r3, [r3, #5]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004890:	2302      	movs	r3, #2
 8004892:	e038      	b.n	8004906 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fa3e 	bl	8004d1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048a0:	f7ff fde8 	bl	8004474 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80048a4:	7afb      	ldrb	r3, [r7, #11]
 80048a6:	4619      	mov	r1, r3
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f989 	bl	8004bc0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80048ae:	2100      	movs	r1, #0
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f985 	bl	8004bc0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	82fb      	strh	r3, [r7, #22]
 80048ba:	e009      	b.n	80048d0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f9d4 	bl	8004c6c <SUBGHZSPI_Receive>
      pData++;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80048ca:	8afb      	ldrh	r3, [r7, #22]
 80048cc:	3301      	adds	r3, #1
 80048ce:	82fb      	strh	r3, [r7, #22]
 80048d0:	8afa      	ldrh	r2, [r7, #22]
 80048d2:	893b      	ldrh	r3, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d3f1      	bcc.n	80048bc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048d8:	f7ff fdbc 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fa41 	bl	8004d64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e001      	b.n	80048f4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	715a      	strb	r2, [r3, #5]

    return status;
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	e000      	b.n	8004906 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	461a      	mov	r2, r3
 800491a:	460b      	mov	r3, r1
 800491c:	72fb      	strb	r3, [r7, #11]
 800491e:	4613      	mov	r3, r2
 8004920:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	799b      	ldrb	r3, [r3, #6]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d13e      	bne.n	80049aa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	795b      	ldrb	r3, [r3, #5]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004934:	2302      	movs	r3, #2
 8004936:	e039      	b.n	80049ac <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f9ec 	bl	8004d1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004944:	f7ff fd96 	bl	8004474 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004948:	210e      	movs	r1, #14
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f938 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004950:	7afb      	ldrb	r3, [r7, #11]
 8004952:	4619      	mov	r1, r3
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f933 	bl	8004bc0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800495a:	2300      	movs	r3, #0
 800495c:	82bb      	strh	r3, [r7, #20]
 800495e:	e00a      	b.n	8004976 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004960:	8abb      	ldrh	r3, [r7, #20]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	4619      	mov	r1, r3
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f928 	bl	8004bc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004970:	8abb      	ldrh	r3, [r7, #20]
 8004972:	3301      	adds	r3, #1
 8004974:	82bb      	strh	r3, [r7, #20]
 8004976:	8aba      	ldrh	r2, [r7, #20]
 8004978:	893b      	ldrh	r3, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	d3f0      	bcc.n	8004960 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800497e:	f7ff fd69 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f9ee 	bl	8004d64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
 8004994:	e001      	b.n	800499a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	715a      	strb	r2, [r3, #5]

    return status;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	e000      	b.n	80049ac <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	461a      	mov	r2, r3
 80049c0:	460b      	mov	r3, r1
 80049c2:	72fb      	strb	r3, [r7, #11]
 80049c4:	4613      	mov	r3, r2
 80049c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	799b      	ldrb	r3, [r3, #6]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d141      	bne.n	8004a5a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	795b      	ldrb	r3, [r3, #5]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80049de:	2302      	movs	r3, #2
 80049e0:	e03c      	b.n	8004a5c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f997 	bl	8004d1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049ee:	f7ff fd41 	bl	8004474 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80049f2:	211e      	movs	r1, #30
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f8e3 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80049fa:	7afb      	ldrb	r3, [r7, #11]
 80049fc:	4619      	mov	r1, r3
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f8de 	bl	8004bc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a04:	2100      	movs	r1, #0
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8da 	bl	8004bc0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	82fb      	strh	r3, [r7, #22]
 8004a10:	e009      	b.n	8004a26 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f929 	bl	8004c6c <SUBGHZSPI_Receive>
      pData++;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a20:	8afb      	ldrh	r3, [r7, #22]
 8004a22:	3301      	adds	r3, #1
 8004a24:	82fb      	strh	r3, [r7, #22]
 8004a26:	8afa      	ldrh	r2, [r7, #22]
 8004a28:	893b      	ldrh	r3, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d3f1      	bcc.n	8004a12 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a2e:	f7ff fd11 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f996 	bl	8004d64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e001      	b.n	8004a4a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	715a      	strb	r2, [r3, #5]

    return status;
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	e000      	b.n	8004a5c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004a70:	f107 020c 	add.w	r2, r7, #12
 8004a74:	2302      	movs	r3, #2
 8004a76:	2112      	movs	r1, #18
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fef4 	bl	8004866 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004a7e:	7b3b      	ldrb	r3, [r7, #12]
 8004a80:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	b21a      	sxth	r2, r3
 8004a8a:	7b7b      	ldrb	r3, [r7, #13]
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21b      	sxth	r3, r3
 8004a92:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004a94:	f107 020c 	add.w	r2, r7, #12
 8004a98:	2302      	movs	r3, #2
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fe83 	bl	80047a8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004aa2:	89fb      	ldrh	r3, [r7, #14]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f005 fc2b 	bl	800a308 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004abe:	89fb      	ldrh	r3, [r7, #14]
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f005 fc2a 	bl	800a324 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f005 fc79 	bl	800a3d4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
 8004ae4:	08db      	lsrs	r3, r3, #3
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f005 fc7e 	bl	800a3f0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f005 fc83 	bl	800a40c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004b06:	89fb      	ldrh	r3, [r7, #14]
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f005 fc50 	bl	800a3b8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004b18:	89fb      	ldrh	r3, [r7, #14]
 8004b1a:	099b      	lsrs	r3, r3, #6
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f005 fc0b 	bl	800a340 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004b2a:	89fb      	ldrh	r3, [r7, #14]
 8004b2c:	09db      	lsrs	r3, r3, #7
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004b36:	89fb      	ldrh	r3, [r7, #14]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004b42:	2101      	movs	r1, #1
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f005 fc09 	bl	800a35c <HAL_SUBGHZ_CADStatusCallback>
 8004b4a:	e003      	b.n	8004b54 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f005 fc04 	bl	800a35c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	0a5b      	lsrs	r3, r3, #9
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f005 fc19 	bl	800a398 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004b66:	89fb      	ldrh	r3, [r7, #14]
 8004b68:	0b9b      	lsrs	r3, r3, #14
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f005 fc58 	bl	800a428 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004b88:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <SUBGHZSPI_Init+0x3c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004bbc <SUBGHZSPI_Init+0x3c>)
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b92:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004b94:	4a09      	ldr	r2, [pc, #36]	@ (8004bbc <SUBGHZSPI_Init+0x3c>)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004b9c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004b9e:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <SUBGHZSPI_Init+0x3c>)
 8004ba0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <SUBGHZSPI_Init+0x3c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a04      	ldr	r2, [pc, #16]	@ (8004bbc <SUBGHZSPI_Init+0x3c>)
 8004bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bb0:	6013      	str	r3, [r2, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	58010000 	.word	0x58010000

08004bc0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004bd0:	4b23      	ldr	r3, [pc, #140]	@ (8004c60 <SUBGHZSPI_Transmit+0xa0>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	0cdb      	lsrs	r3, r3, #19
 8004bde:	2264      	movs	r2, #100	@ 0x64
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	609a      	str	r2, [r3, #8]
      break;
 8004bf6:	e008      	b.n	8004c0a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004bfe:	4b19      	ldr	r3, [pc, #100]	@ (8004c64 <SUBGHZSPI_Transmit+0xa4>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d1ed      	bne.n	8004be6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004c0a:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <SUBGHZSPI_Transmit+0xa8>)
 8004c0c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c14:	4b12      	ldr	r3, [pc, #72]	@ (8004c60 <SUBGHZSPI_Transmit+0xa0>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	0cdb      	lsrs	r3, r3, #19
 8004c22:	2264      	movs	r2, #100	@ 0x64
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	609a      	str	r2, [r3, #8]
      break;
 8004c3a:	e008      	b.n	8004c4e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004c42:	4b08      	ldr	r3, [pc, #32]	@ (8004c64 <SUBGHZSPI_Transmit+0xa4>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d1ed      	bne.n	8004c2a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <SUBGHZSPI_Transmit+0xa4>)
 8004c50:	68db      	ldr	r3, [r3, #12]

  return status;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000000 	.word	0x20000000
 8004c64:	58010000 	.word	0x58010000
 8004c68:	5801000c 	.word	0x5801000c

08004c6c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c7a:	4b25      	ldr	r3, [pc, #148]	@ (8004d10 <SUBGHZSPI_Receive+0xa4>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	0cdb      	lsrs	r3, r3, #19
 8004c88:	2264      	movs	r2, #100	@ 0x64
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	609a      	str	r2, [r3, #8]
      break;
 8004ca0:	e008      	b.n	8004cb4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d14 <SUBGHZSPI_Receive+0xa8>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d1ed      	bne.n	8004c90 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004cb4:	4b18      	ldr	r3, [pc, #96]	@ (8004d18 <SUBGHZSPI_Receive+0xac>)
 8004cb6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	22ff      	movs	r2, #255	@ 0xff
 8004cbc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004cbe:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <SUBGHZSPI_Receive+0xa4>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	0cdb      	lsrs	r3, r3, #19
 8004ccc:	2264      	movs	r2, #100	@ 0x64
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	609a      	str	r2, [r3, #8]
      break;
 8004ce4:	e008      	b.n	8004cf8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <SUBGHZSPI_Receive+0xa8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d1ed      	bne.n	8004cd4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004cf8:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <SUBGHZSPI_Receive+0xa8>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	701a      	strb	r2, [r3, #0]

  return status;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000000 	.word	0x20000000
 8004d14:	58010000 	.word	0x58010000
 8004d18:	5801000c 	.word	0x5801000c

08004d1c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	791b      	ldrb	r3, [r3, #4]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d111      	bne.n	8004d50 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <SUBGHZ_CheckDeviceReady+0x44>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004d3c:	f7ff fb9a 	bl	8004474 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f9      	bne.n	8004d40 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004d4c:	f7ff fb82 	bl	8004454 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f807 	bl	8004d64 <SUBGHZ_WaitOnBusy>
 8004d56:	4603      	mov	r3, r0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000000 	.word	0x20000000

08004d64 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004d70:	4b12      	ldr	r3, [pc, #72]	@ (8004dbc <SUBGHZ_WaitOnBusy+0x58>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	0d1b      	lsrs	r3, r3, #20
 8004d7e:	2264      	movs	r2, #100	@ 0x64
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004d86:	f7ff fba3 	bl	80044d0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004d8a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	609a      	str	r2, [r3, #8]
      break;
 8004d9c:	e009      	b.n	8004db2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004da4:	f7ff fb82 	bl	80044ac <LL_PWR_IsActiveFlag_RFBUSYS>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d0e9      	beq.n	8004d86 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000000 	.word	0x20000000

08004dc0 <LL_RCC_GetUSARTClockSource>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	4313      	orrs	r3, r2
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr

08004de4 <LL_RCC_GetLPUARTClockSource>:
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4013      	ands	r3, r2
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e042      	b.n	8004e9a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc f9cc 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	@ 0x24
 8004e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 feab 	bl	8005ba8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fc34 	bl	80056c0 <UART_SetConfig>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e01b      	b.n	8004e9a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 ff29 	bl	8005cea <UART_CheckIdleState>
 8004e98:	4603      	mov	r3, r0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d137      	bne.n	8004f2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_UART_Receive_IT+0x24>
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e030      	b.n	8004f2e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a18      	ldr	r2, [pc, #96]	@ (8004f38 <HAL_UART_Receive_IT+0x94>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01f      	beq.n	8004f1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d018      	beq.n	8004f1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	623b      	str	r3, [r7, #32]
 8004f0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69f9      	ldr	r1, [r7, #28]
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e6      	bne.n	8004eea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fffe 	bl	8005f24 <UART_Start_Receive_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	@ 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40008000 	.word	0x40008000

08004f3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	@ 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d167      	bne.n	8005024 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Transmit_DMA+0x24>
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e060      	b.n	8005026 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2221      	movs	r2, #33	@ 0x21
 8004f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d028      	beq.n	8004fe4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f96:	4a26      	ldr	r2, [pc, #152]	@ (8005030 <HAL_UART_Transmit_DMA+0xf4>)
 8004f98:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f9e:	4a25      	ldr	r2, [pc, #148]	@ (8005034 <HAL_UART_Transmit_DMA+0xf8>)
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fa6:	4a24      	ldr	r2, [pc, #144]	@ (8005038 <HAL_UART_Transmit_DMA+0xfc>)
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fae:	2200      	movs	r2, #0
 8004fb0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3328      	adds	r3, #40	@ 0x28
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	f7fc fd9d 	bl	8001b04 <HAL_DMA_Start_IT>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d009      	beq.n	8004fe4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e020      	b.n	8005026 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2240      	movs	r2, #64	@ 0x40
 8004fea:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3308      	adds	r3, #8
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	623a      	str	r2, [r7, #32]
 800500e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	69f9      	ldr	r1, [r7, #28]
 8005012:	6a3a      	ldr	r2, [r7, #32]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	61bb      	str	r3, [r7, #24]
   return(result);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	e000      	b.n	8005026 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	3728      	adds	r7, #40	@ 0x28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	080062af 	.word	0x080062af
 8005034:	08006349 	.word	0x08006349
 8005038:	08006365 	.word	0x08006365

0800503c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b0ba      	sub	sp, #232	@ 0xe8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005066:	f640 030f 	movw	r3, #2063	@ 0x80f
 800506a:	4013      	ands	r3, r2
 800506c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d11b      	bne.n	80050b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d015      	beq.n	80050b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 82e3 	beq.w	800566c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	4798      	blx	r3
      }
      return;
 80050ae:	e2dd      	b.n	800566c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80050b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8123 	beq.w	8005300 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80050ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80050be:	4b8d      	ldr	r3, [pc, #564]	@ (80052f4 <HAL_UART_IRQHandler+0x2b8>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80050ca:	4b8b      	ldr	r3, [pc, #556]	@ (80052f8 <HAL_UART_IRQHandler+0x2bc>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8116 	beq.w	8005300 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d011      	beq.n	8005104 <HAL_UART_IRQHandler+0xc8>
 80050e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fa:	f043 0201 	orr.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d011      	beq.n	8005134 <HAL_UART_IRQHandler+0xf8>
 8005110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2202      	movs	r2, #2
 8005122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	f043 0204 	orr.w	r2, r3, #4
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d011      	beq.n	8005164 <HAL_UART_IRQHandler+0x128>
 8005140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2204      	movs	r2, #4
 8005152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	f043 0202 	orr.w	r2, r3, #2
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d017      	beq.n	80051a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800517c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005180:	4b5c      	ldr	r3, [pc, #368]	@ (80052f4 <HAL_UART_IRQHandler+0x2b8>)
 8005182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2208      	movs	r2, #8
 800518e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005196:	f043 0208 	orr.w	r2, r3, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d012      	beq.n	80051d2 <HAL_UART_IRQHandler+0x196>
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8249 	beq.w	8005670 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d013      	beq.n	8005212 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d105      	bne.n	8005202 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005226:	2b40      	cmp	r3, #64	@ 0x40
 8005228:	d005      	beq.n	8005236 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800522a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800522e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005232:	2b00      	cmp	r3, #0
 8005234:	d054      	beq.n	80052e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 ffd4 	bl	80061e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005246:	2b40      	cmp	r3, #64	@ 0x40
 8005248:	d146      	bne.n	80052d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005276:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800527a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800528e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1d9      	bne.n	800524a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529c:	2b00      	cmp	r3, #0
 800529e:	d017      	beq.n	80052d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a6:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <HAL_UART_IRQHandler+0x2c0>)
 80052a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fc fd03 	bl	8001cbc <HAL_DMA_Abort_IT>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d019      	beq.n	80052f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80052ca:	4610      	mov	r0, r2
 80052cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ce:	e00f      	b.n	80052f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f9e0 	bl	8005696 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d6:	e00b      	b.n	80052f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f9dc 	bl	8005696 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052de:	e007      	b.n	80052f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f9d8 	bl	8005696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80052ee:	e1bf      	b.n	8005670 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f0:	bf00      	nop
    return;
 80052f2:	e1bd      	b.n	8005670 <HAL_UART_IRQHandler+0x634>
 80052f4:	10000001 	.word	0x10000001
 80052f8:	04000120 	.word	0x04000120
 80052fc:	080063e5 	.word	0x080063e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005304:	2b01      	cmp	r3, #1
 8005306:	f040 8153 	bne.w	80055b0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 814c 	beq.w	80055b0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8145 	beq.w	80055b0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2210      	movs	r2, #16
 800532c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b40      	cmp	r3, #64	@ 0x40
 800533a:	f040 80bb 	bne.w	80054b4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800534c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 818f 	beq.w	8005674 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800535c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005360:	429a      	cmp	r2, r3
 8005362:	f080 8187 	bcs.w	8005674 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800536c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	f040 8087 	bne.w	8005492 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800539c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1da      	bne.n	8005384 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3308      	adds	r3, #8
 80053d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e1      	bne.n	80053ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800541a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800541c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800542e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005430:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005434:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800543c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800545e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005460:	f023 0310 	bic.w	r3, r3, #16
 8005464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005472:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005474:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e4      	bne.n	8005450 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800548c:	4618      	mov	r0, r3
 800548e:	f7fc fbb7 	bl	8001c00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f8fb 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054b2:	e0df      	b.n	8005674 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80d1 	beq.w	8005678 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80054d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80cc 	beq.w	8005678 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005502:	647b      	str	r3, [r7, #68]	@ 0x44
 8005504:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e4      	bne.n	80054e0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	623b      	str	r3, [r7, #32]
   return(result);
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800552c:	f023 0301 	bic.w	r3, r3, #1
 8005530:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3308      	adds	r3, #8
 800553a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800553e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e1      	bne.n	8005516 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	60fb      	str	r3, [r7, #12]
   return(result);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	617b      	str	r3, [r7, #20]
   return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e4      	bne.n	8005566 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f87d 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055ae:	e063      	b.n	8005678 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <HAL_UART_IRQHandler+0x59e>
 80055bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80055d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f001 fc64 	bl	8006ea0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055d8:	e051      	b.n	800567e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d014      	beq.n	8005610 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d105      	bne.n	80055fe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80055f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005602:	2b00      	cmp	r3, #0
 8005604:	d03a      	beq.n	800567c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
    }
    return;
 800560e:	e035      	b.n	800567c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <HAL_UART_IRQHandler+0x5f4>
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fef1 	bl	8006410 <UART_EndTransmit_IT>
    return;
 800562e:	e026      	b.n	800567e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <HAL_UART_IRQHandler+0x614>
 800563c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005640:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 fc3b 	bl	8006ec4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800564e:	e016      	b.n	800567e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d010      	beq.n	800567e <HAL_UART_IRQHandler+0x642>
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005660:	2b00      	cmp	r3, #0
 8005662:	da0c      	bge.n	800567e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fc24 	bl	8006eb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800566a:	e008      	b.n	800567e <HAL_UART_IRQHandler+0x642>
      return;
 800566c:	bf00      	nop
 800566e:	e006      	b.n	800567e <HAL_UART_IRQHandler+0x642>
    return;
 8005670:	bf00      	nop
 8005672:	e004      	b.n	800567e <HAL_UART_IRQHandler+0x642>
      return;
 8005674:	bf00      	nop
 8005676:	e002      	b.n	800567e <HAL_UART_IRQHandler+0x642>
      return;
 8005678:	bf00      	nop
 800567a:	e000      	b.n	800567e <HAL_UART_IRQHandler+0x642>
    return;
 800567c:	bf00      	nop
  }
}
 800567e:	37e8      	adds	r7, #232	@ 0xe8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr
	...

080056c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c4:	b08c      	sub	sp, #48	@ 0x30
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	431a      	orrs	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	431a      	orrs	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b94      	ldr	r3, [pc, #592]	@ (8005940 <UART_SetConfig+0x280>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a89      	ldr	r2, [pc, #548]	@ (8005944 <UART_SetConfig+0x284>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005728:	4313      	orrs	r3, r2
 800572a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005736:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005740:	430b      	orrs	r3, r1
 8005742:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	f023 010f 	bic.w	r1, r3, #15
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a7a      	ldr	r2, [pc, #488]	@ (8005948 <UART_SetConfig+0x288>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d127      	bne.n	80057b4 <UART_SetConfig+0xf4>
 8005764:	2003      	movs	r0, #3
 8005766:	f7ff fb2b 	bl	8004dc0 <LL_RCC_GetUSARTClockSource>
 800576a:	4603      	mov	r3, r0
 800576c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005770:	2b03      	cmp	r3, #3
 8005772:	d81b      	bhi.n	80057ac <UART_SetConfig+0xec>
 8005774:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <UART_SetConfig+0xbc>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	0800578d 	.word	0x0800578d
 8005780:	0800579d 	.word	0x0800579d
 8005784:	08005795 	.word	0x08005795
 8005788:	080057a5 	.word	0x080057a5
 800578c:	2301      	movs	r3, #1
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005792:	e080      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005794:	2302      	movs	r3, #2
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579a:	e07c      	b.n	8005896 <UART_SetConfig+0x1d6>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a2:	e078      	b.n	8005896 <UART_SetConfig+0x1d6>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057aa:	e074      	b.n	8005896 <UART_SetConfig+0x1d6>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b2:	e070      	b.n	8005896 <UART_SetConfig+0x1d6>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a64      	ldr	r2, [pc, #400]	@ (800594c <UART_SetConfig+0x28c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d138      	bne.n	8005830 <UART_SetConfig+0x170>
 80057be:	200c      	movs	r0, #12
 80057c0:	f7ff fafe 	bl	8004dc0 <LL_RCC_GetUSARTClockSource>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	d82c      	bhi.n	8005828 <UART_SetConfig+0x168>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x114>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	08005809 	.word	0x08005809
 80057d8:	08005829 	.word	0x08005829
 80057dc:	08005829 	.word	0x08005829
 80057e0:	08005829 	.word	0x08005829
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005829 	.word	0x08005829
 80057ec:	08005829 	.word	0x08005829
 80057f0:	08005829 	.word	0x08005829
 80057f4:	08005811 	.word	0x08005811
 80057f8:	08005829 	.word	0x08005829
 80057fc:	08005829 	.word	0x08005829
 8005800:	08005829 	.word	0x08005829
 8005804:	08005821 	.word	0x08005821
 8005808:	2300      	movs	r3, #0
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580e:	e042      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005810:	2302      	movs	r3, #2
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005816:	e03e      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005818:	2304      	movs	r3, #4
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581e:	e03a      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005820:	2308      	movs	r3, #8
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005826:	e036      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005828:	2310      	movs	r3, #16
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582e:	e032      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a43      	ldr	r2, [pc, #268]	@ (8005944 <UART_SetConfig+0x284>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d12a      	bne.n	8005890 <UART_SetConfig+0x1d0>
 800583a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800583e:	f7ff fad1 	bl	8004de4 <LL_RCC_GetLPUARTClockSource>
 8005842:	4603      	mov	r3, r0
 8005844:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005848:	d01a      	beq.n	8005880 <UART_SetConfig+0x1c0>
 800584a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800584e:	d81b      	bhi.n	8005888 <UART_SetConfig+0x1c8>
 8005850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005854:	d00c      	beq.n	8005870 <UART_SetConfig+0x1b0>
 8005856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585a:	d815      	bhi.n	8005888 <UART_SetConfig+0x1c8>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <UART_SetConfig+0x1a8>
 8005860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005864:	d008      	beq.n	8005878 <UART_SetConfig+0x1b8>
 8005866:	e00f      	b.n	8005888 <UART_SetConfig+0x1c8>
 8005868:	2300      	movs	r3, #0
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586e:	e012      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005870:	2302      	movs	r3, #2
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005876:	e00e      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005878:	2304      	movs	r3, #4
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587e:	e00a      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005880:	2308      	movs	r3, #8
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005886:	e006      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005888:	2310      	movs	r3, #16
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588e:	e002      	b.n	8005896 <UART_SetConfig+0x1d6>
 8005890:	2310      	movs	r3, #16
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <UART_SetConfig+0x284>)
 800589c:	4293      	cmp	r3, r2
 800589e:	f040 80a4 	bne.w	80059ea <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d823      	bhi.n	80058f2 <UART_SetConfig+0x232>
 80058aa:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <UART_SetConfig+0x1f0>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058f3 	.word	0x080058f3
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058e3 	.word	0x080058e3
 80058c4:	080058f3 	.word	0x080058f3
 80058c8:	080058f3 	.word	0x080058f3
 80058cc:	080058f3 	.word	0x080058f3
 80058d0:	080058eb 	.word	0x080058eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fd ff3a 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80058d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058da:	e010      	b.n	80058fe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005950 <UART_SetConfig+0x290>)
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e0:	e00d      	b.n	80058fe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fd fe7f 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80058e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058e8:	e009      	b.n	80058fe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058f0:	e005      	b.n	80058fe <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8137 	beq.w	8005b74 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	4a12      	ldr	r2, [pc, #72]	@ (8005954 <UART_SetConfig+0x294>)
 800590c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005910:	461a      	mov	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	fbb3 f3f2 	udiv	r3, r3, r2
 8005918:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d305      	bcc.n	8005936 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	429a      	cmp	r2, r3
 8005934:	d910      	bls.n	8005958 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800593c:	e11a      	b.n	8005b74 <UART_SetConfig+0x4b4>
 800593e:	bf00      	nop
 8005940:	cfff69f3 	.word	0xcfff69f3
 8005944:	40008000 	.word	0x40008000
 8005948:	40013800 	.word	0x40013800
 800594c:	40004400 	.word	0x40004400
 8005950:	00f42400 	.word	0x00f42400
 8005954:	0800c6f0 	.word	0x0800c6f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	2200      	movs	r2, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	60fa      	str	r2, [r7, #12]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	4a8e      	ldr	r2, [pc, #568]	@ (8005ba0 <UART_SetConfig+0x4e0>)
 8005966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800596a:	b29b      	uxth	r3, r3
 800596c:	2200      	movs	r2, #0
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800597a:	f7fa fc05 	bl	8000188 <__aeabi_uldivmod>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4610      	mov	r0, r2
 8005984:	4619      	mov	r1, r3
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	020b      	lsls	r3, r1, #8
 8005990:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005994:	0202      	lsls	r2, r0, #8
 8005996:	6979      	ldr	r1, [r7, #20]
 8005998:	6849      	ldr	r1, [r1, #4]
 800599a:	0849      	lsrs	r1, r1, #1
 800599c:	2000      	movs	r0, #0
 800599e:	460c      	mov	r4, r1
 80059a0:	4605      	mov	r5, r0
 80059a2:	eb12 0804 	adds.w	r8, r2, r4
 80059a6:	eb43 0905 	adc.w	r9, r3, r5
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	469a      	mov	sl, r3
 80059b2:	4693      	mov	fp, r2
 80059b4:	4652      	mov	r2, sl
 80059b6:	465b      	mov	r3, fp
 80059b8:	4640      	mov	r0, r8
 80059ba:	4649      	mov	r1, r9
 80059bc:	f7fa fbe4 	bl	8000188 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4613      	mov	r3, r2
 80059c6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ce:	d308      	bcc.n	80059e2 <UART_SetConfig+0x322>
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d6:	d204      	bcs.n	80059e2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	60da      	str	r2, [r3, #12]
 80059e0:	e0c8      	b.n	8005b74 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059e8:	e0c4      	b.n	8005b74 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f2:	d167      	bne.n	8005ac4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80059f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d828      	bhi.n	8005a4e <UART_SetConfig+0x38e>
 80059fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005a04 <UART_SetConfig+0x344>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	08005a4f 	.word	0x08005a4f
 8005a14:	08005a3f 	.word	0x08005a3f
 8005a18:	08005a4f 	.word	0x08005a4f
 8005a1c:	08005a4f 	.word	0x08005a4f
 8005a20:	08005a4f 	.word	0x08005a4f
 8005a24:	08005a47 	.word	0x08005a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a28:	f7fd fe90 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8005a2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a2e:	e014      	b.n	8005a5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7fd fe9e 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8005a34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a36:	e010      	b.n	8005a5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a38:	4b5a      	ldr	r3, [pc, #360]	@ (8005ba4 <UART_SetConfig+0x4e4>)
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a3c:	e00d      	b.n	8005a5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fd fdd1 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8005a42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a44:	e009      	b.n	8005a5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a4c:	e005      	b.n	8005a5a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8089 	beq.w	8005b74 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	4a4e      	ldr	r2, [pc, #312]	@ (8005ba0 <UART_SetConfig+0x4e0>)
 8005a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a74:	005a      	lsls	r2, r3, #1
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	441a      	add	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	2b0f      	cmp	r3, #15
 8005a8c:	d916      	bls.n	8005abc <UART_SetConfig+0x3fc>
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a94:	d212      	bcs.n	8005abc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f023 030f 	bic.w	r3, r3, #15
 8005a9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	8bfb      	ldrh	r3, [r7, #30]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	8bfa      	ldrh	r2, [r7, #30]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	e05b      	b.n	8005b74 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ac2:	e057      	b.n	8005b74 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d828      	bhi.n	8005b1e <UART_SetConfig+0x45e>
 8005acc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <UART_SetConfig+0x414>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b01 	.word	0x08005b01
 8005adc:	08005b09 	.word	0x08005b09
 8005ae0:	08005b1f 	.word	0x08005b1f
 8005ae4:	08005b0f 	.word	0x08005b0f
 8005ae8:	08005b1f 	.word	0x08005b1f
 8005aec:	08005b1f 	.word	0x08005b1f
 8005af0:	08005b1f 	.word	0x08005b1f
 8005af4:	08005b17 	.word	0x08005b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fd fe28 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8005afc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005afe:	e014      	b.n	8005b2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b00:	f7fd fe36 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8005b04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b06:	e010      	b.n	8005b2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b08:	4b26      	ldr	r3, [pc, #152]	@ (8005ba4 <UART_SetConfig+0x4e4>)
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b0c:	e00d      	b.n	8005b2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b0e:	f7fd fd69 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8005b12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b14:	e009      	b.n	8005b2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b1c:	e005      	b.n	8005b2a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b28:	bf00      	nop
    }

    if (pclk != 0U)
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d021      	beq.n	8005b74 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba0 <UART_SetConfig+0x4e0>)
 8005b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	441a      	add	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d909      	bls.n	8005b6e <UART_SetConfig+0x4ae>
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b60:	d205      	bcs.n	8005b6e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	e002      	b.n	8005b74 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2200      	movs	r2, #0
 8005b88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3730      	adds	r7, #48	@ 0x30
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b9e:	bf00      	nop
 8005ba0:	0800c6f0 	.word	0x0800c6f0
 8005ba4:	00f42400 	.word	0x00f42400

08005ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01a      	beq.n	8005cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca6:	d10a      	bne.n	8005cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b086      	sub	sp, #24
 8005cee:	af02      	add	r7, sp, #8
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cfa:	f7fa ff1b 	bl	8000b34 <HAL_GetTick>
 8005cfe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d10e      	bne.n	8005d2c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f832 	bl	8005d86 <UART_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e028      	b.n	8005d7e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d10e      	bne.n	8005d58 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f81c 	bl	8005d86 <UART_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e012      	b.n	8005d7e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b09c      	sub	sp, #112	@ 0x70
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	4613      	mov	r3, r2
 8005d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d96:	e0af      	b.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	f000 80ab 	beq.w	8005ef8 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da2:	f7fa fec7 	bl	8000b34 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005db2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d140      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005dcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dd8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ddc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e6      	bne.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e0a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e0c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e06f      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d057      	beq.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x172>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b80      	cmp	r3, #128	@ 0x80
 8005e4c:	d054      	beq.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x172>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	d051      	beq.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e62:	d149      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005e82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e6      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ec0:	623a      	str	r2, [r7, #32]
 8005ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69f9      	ldr	r1, [r7, #28]
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e5      	bne.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e010      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	4013      	ands	r3, r2
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	f43f af40 	beq.w	8005d98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3770      	adds	r7, #112	@ 0x70
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b0a3      	sub	sp, #140	@ 0x8c
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	d10e      	bne.n	8005f76 <UART_Start_Receive_IT+0x52>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <UART_Start_Receive_IT+0x48>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005f66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f6a:	e02d      	b.n	8005fc8 <UART_Start_Receive_IT+0xa4>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	22ff      	movs	r2, #255	@ 0xff
 8005f70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f74:	e028      	b.n	8005fc8 <UART_Start_Receive_IT+0xa4>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10d      	bne.n	8005f9a <UART_Start_Receive_IT+0x76>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <UART_Start_Receive_IT+0x6c>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	22ff      	movs	r2, #255	@ 0xff
 8005f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f8e:	e01b      	b.n	8005fc8 <UART_Start_Receive_IT+0xa4>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	227f      	movs	r2, #127	@ 0x7f
 8005f94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f98:	e016      	b.n	8005fc8 <UART_Start_Receive_IT+0xa4>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa2:	d10d      	bne.n	8005fc0 <UART_Start_Receive_IT+0x9c>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <UART_Start_Receive_IT+0x92>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	227f      	movs	r2, #127	@ 0x7f
 8005fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fb4:	e008      	b.n	8005fc8 <UART_Start_Receive_IT+0xa4>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	223f      	movs	r2, #63	@ 0x3f
 8005fba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005fbe:	e003      	b.n	8005fc8 <UART_Start_Receive_IT+0xa4>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2222      	movs	r2, #34	@ 0x22
 8005fd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005ffc:	673a      	str	r2, [r7, #112]	@ 0x70
 8005ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006002:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800600a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e3      	bne.n	8005fd8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006018:	d14f      	bne.n	80060ba <UART_Start_Receive_IT+0x196>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	429a      	cmp	r2, r3
 8006024:	d349      	bcc.n	80060ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602e:	d107      	bne.n	8006040 <UART_Start_Receive_IT+0x11c>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a46      	ldr	r2, [pc, #280]	@ (8006154 <UART_Start_Receive_IT+0x230>)
 800603c:	675a      	str	r2, [r3, #116]	@ 0x74
 800603e:	e002      	b.n	8006046 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a45      	ldr	r2, [pc, #276]	@ (8006158 <UART_Start_Receive_IT+0x234>)
 8006044:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01a      	beq.n	8006084 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800605c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800605e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006062:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006072:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006076:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800607e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e4      	bne.n	800604e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3308      	adds	r3, #8
 800608a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800609a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3308      	adds	r3, #8
 80060a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80060a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80060a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80060b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e5      	bne.n	8006084 <UART_Start_Receive_IT+0x160>
 80060b8:	e046      	b.n	8006148 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c2:	d107      	bne.n	80060d4 <UART_Start_Receive_IT+0x1b0>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d103      	bne.n	80060d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4a23      	ldr	r2, [pc, #140]	@ (800615c <UART_Start_Receive_IT+0x238>)
 80060d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80060d2:	e002      	b.n	80060da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a22      	ldr	r2, [pc, #136]	@ (8006160 <UART_Start_Receive_IT+0x23c>)
 80060d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d019      	beq.n	8006116 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80060f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006100:	637b      	str	r3, [r7, #52]	@ 0x34
 8006102:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e6      	bne.n	80060e2 <UART_Start_Receive_IT+0x1be>
 8006114:	e018      	b.n	8006148 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	613b      	str	r3, [r7, #16]
   return(result);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f043 0320 	orr.w	r3, r3, #32
 800612a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006134:	623b      	str	r3, [r7, #32]
 8006136:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	61bb      	str	r3, [r7, #24]
   return(result);
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e6      	bne.n	8006116 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	378c      	adds	r7, #140	@ 0x8c
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr
 8006154:	08006b39 	.word	0x08006b39
 8006158:	080067d9 	.word	0x080067d9
 800615c:	08006621 	.word	0x08006621
 8006160:	08006469 	.word	0x08006469

08006164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b08f      	sub	sp, #60	@ 0x3c
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	61fb      	str	r3, [r7, #28]
   return(result);
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800618c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e6      	bne.n	800616c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80061b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061be:	61ba      	str	r2, [r7, #24]
 80061c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6979      	ldr	r1, [r7, #20]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	613b      	str	r3, [r7, #16]
   return(result);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e5      	bne.n	800619e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80061da:	bf00      	nop
 80061dc:	373c      	adds	r7, #60	@ 0x3c
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr

080061e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b095      	sub	sp, #84	@ 0x54
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620a:	643b      	str	r3, [r7, #64]	@ 0x40
 800620c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006210:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	61fb      	str	r3, [r7, #28]
   return(result);
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e3      	bne.n	800621e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d118      	bne.n	8006290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60bb      	str	r3, [r7, #8]
   return(result);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	647b      	str	r3, [r7, #68]	@ 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6979      	ldr	r1, [r7, #20]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	613b      	str	r3, [r7, #16]
   return(result);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062a4:	bf00      	nop
 80062a6:	3754      	adds	r7, #84	@ 0x54
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b090      	sub	sp, #64	@ 0x40
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d137      	bne.n	800633a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80062ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3308      	adds	r3, #8
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	623b      	str	r3, [r7, #32]
   return(result);
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80062f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	60fb      	str	r3, [r7, #12]
   return(result);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800631a:	637b      	str	r3, [r7, #52]	@ 0x34
 800631c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	617b      	str	r3, [r7, #20]
   return(result);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e6      	bne.n	8006306 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006338:	e002      	b.n	8006340 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800633a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800633c:	f7fb f8b4 	bl	80014a8 <HAL_UART_TxCpltCallback>
}
 8006340:	bf00      	nop
 8006342:	3740      	adds	r7, #64	@ 0x40
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006354:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff f994 	bl	8005684 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006380:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638c:	2b80      	cmp	r3, #128	@ 0x80
 800638e:	d109      	bne.n	80063a4 <UART_DMAError+0x40>
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	2b21      	cmp	r3, #33	@ 0x21
 8006394:	d106      	bne.n	80063a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2200      	movs	r2, #0
 800639a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800639e:	6978      	ldr	r0, [r7, #20]
 80063a0:	f7ff fee0 	bl	8006164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ae:	2b40      	cmp	r3, #64	@ 0x40
 80063b0:	d109      	bne.n	80063c6 <UART_DMAError+0x62>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b22      	cmp	r3, #34	@ 0x22
 80063b6:	d106      	bne.n	80063c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80063c0:	6978      	ldr	r0, [r7, #20]
 80063c2:	f7ff ff0f 	bl	80061e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063cc:	f043 0210 	orr.w	r2, r3, #16
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7ff f95d 	bl	8005696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff f947 	bl	8005696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	60bb      	str	r3, [r7, #8]
   return(result);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6979      	ldr	r1, [r7, #20]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	613b      	str	r3, [r7, #16]
   return(result);
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e6      	bne.n	8006418 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7fb f825 	bl	80014a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645e:	bf00      	nop
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b09c      	sub	sp, #112	@ 0x70
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006476:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006480:	2b22      	cmp	r3, #34	@ 0x22
 8006482:	f040 80be 	bne.w	8006602 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006490:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006494:	b2d9      	uxtb	r1, r3
 8006496:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800649a:	b2da      	uxtb	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a0:	400a      	ands	r2, r1
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 80a1 	bne.w	8006612 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e6      	bne.n	80064d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	667b      	str	r3, [r7, #100]	@ 0x64
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006522:	647a      	str	r2, [r7, #68]	@ 0x44
 8006524:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006528:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e5      	bne.n	8006502 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a33      	ldr	r2, [pc, #204]	@ (800661c <UART_RxISR_8BIT+0x1b4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01f      	beq.n	8006594 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d018      	beq.n	8006594 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	623b      	str	r3, [r7, #32]
   return(result);
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006576:	663b      	str	r3, [r7, #96]	@ 0x60
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30
 8006582:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e6      	bne.n	8006562 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d12e      	bne.n	80065fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	617b      	str	r3, [r7, #20]
   return(result);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d103      	bne.n	80065ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2210      	movs	r2, #16
 80065e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff f858 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065f8:	e00b      	b.n	8006612 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fa ff6a 	bl	80014d4 <HAL_UART_RxCpltCallback>
}
 8006600:	e007      	b.n	8006612 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0208 	orr.w	r2, r2, #8
 8006610:	619a      	str	r2, [r3, #24]
}
 8006612:	bf00      	nop
 8006614:	3770      	adds	r7, #112	@ 0x70
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40008000 	.word	0x40008000

08006620 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b09c      	sub	sp, #112	@ 0x70
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800662e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006638:	2b22      	cmp	r3, #34	@ 0x22
 800663a:	f040 80be 	bne.w	80067ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800664e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006652:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006656:	4013      	ands	r3, r2
 8006658:	b29a      	uxth	r2, r3
 800665a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800665c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006662:	1c9a      	adds	r2, r3, #2
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	f040 80a1 	bne.w	80067ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669c:	667b      	str	r3, [r7, #100]	@ 0x64
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80066a8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e6      	bne.n	8006688 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f023 0301 	bic.w	r3, r3, #1
 80066d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3308      	adds	r3, #8
 80066d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066da:	643a      	str	r2, [r7, #64]	@ 0x40
 80066dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a33      	ldr	r2, [pc, #204]	@ (80067d4 <UART_RxISR_16BIT+0x1b4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01f      	beq.n	800674c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d018      	beq.n	800674c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	61fb      	str	r3, [r7, #28]
   return(result);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800672e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800673e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e6      	bne.n	800671a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d12e      	bne.n	80067b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	60bb      	str	r3, [r7, #8]
   return(result);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f023 0310 	bic.w	r3, r3, #16
 800676e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	613b      	str	r3, [r7, #16]
   return(result);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e6      	bne.n	800675a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b10      	cmp	r3, #16
 8006798:	d103      	bne.n	80067a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2210      	movs	r2, #16
 80067a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fe ff7c 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067b0:	e00b      	b.n	80067ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fa fe8e 	bl	80014d4 <HAL_UART_RxCpltCallback>
}
 80067b8:	e007      	b.n	80067ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0208 	orr.w	r2, r2, #8
 80067c8:	619a      	str	r2, [r3, #24]
}
 80067ca:	bf00      	nop
 80067cc:	3770      	adds	r7, #112	@ 0x70
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40008000 	.word	0x40008000

080067d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b0ac      	sub	sp, #176	@ 0xb0
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80067e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800680e:	2b22      	cmp	r3, #34	@ 0x22
 8006810:	f040 8182 	bne.w	8006b18 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800681a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800681e:	e125      	b.n	8006a6c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800682a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800682e:	b2d9      	uxtb	r1, r3
 8006830:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006834:	b2da      	uxtb	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800683a:	400a      	ands	r2, r1
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b00      	cmp	r3, #0
 8006870:	d053      	beq.n	800691a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d011      	beq.n	80068a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800687e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006898:	f043 0201 	orr.w	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d011      	beq.n	80068d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80068ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2202      	movs	r2, #2
 80068c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c8:	f043 0204 	orr.w	r2, r3, #4
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d011      	beq.n	8006902 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80068de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2204      	movs	r2, #4
 80068f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f8:	f043 0202 	orr.w	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006908:	2b00      	cmp	r3, #0
 800690a:	d006      	beq.n	800691a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fe fec2 	bl	8005696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 80a2 	bne.w	8006a6c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800693c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800694a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800694c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006950:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e4      	bne.n	8006928 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800696e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3308      	adds	r3, #8
 8006982:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006986:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006988:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800698c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e1      	bne.n	800695e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a5f      	ldr	r2, [pc, #380]	@ (8006b30 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d021      	beq.n	80069fc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01a      	beq.n	80069fc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ea:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e4      	bne.n	80069c6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d130      	bne.n	8006a66 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e4      	bne.n	8006a0a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d103      	bne.n	8006a56 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2210      	movs	r2, #16
 8006a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fe fe22 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
 8006a64:	e002      	b.n	8006a6c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fa fd34 	bl	80014d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a6c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f47f aecf 	bne.w	8006820 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d049      	beq.n	8006b28 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a9a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d242      	bcs.n	8006b28 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e3      	bne.n	8006aa2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a15      	ldr	r2, [pc, #84]	@ (8006b34 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006ade:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f043 0320 	orr.w	r3, r3, #32
 8006af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6979      	ldr	r1, [r7, #20]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e4      	bne.n	8006ae0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b16:	e007      	b.n	8006b28 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0208 	orr.w	r2, r2, #8
 8006b26:	619a      	str	r2, [r3, #24]
}
 8006b28:	bf00      	nop
 8006b2a:	37b0      	adds	r7, #176	@ 0xb0
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40008000 	.word	0x40008000
 8006b34:	08006469 	.word	0x08006469

08006b38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b0ae      	sub	sp, #184	@ 0xb8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b46:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b6e:	2b22      	cmp	r3, #34	@ 0x22
 8006b70:	f040 8186 	bne.w	8006e80 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006b7a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b7e:	e129      	b.n	8006dd4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b92:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006b96:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ba2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba8:	1c9a      	adds	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d053      	beq.n	8006c7e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d011      	beq.n	8006c06 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00b      	beq.n	8006c06 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfc:	f043 0201 	orr.w	r2, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d011      	beq.n	8006c36 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2202      	movs	r2, #2
 8006c24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2c:	f043 0204 	orr.w	r2, r3, #4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d011      	beq.n	8006c66 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2204      	movs	r2, #4
 8006c54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5c:	f043 0202 	orr.w	r2, r3, #2
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fe fd10 	bl	8005696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 80a4 	bne.w	8006dd4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e2      	bne.n	8006c8c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006cee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cf4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e1      	bne.n	8006cc6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8006e98 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d021      	beq.n	8006d64 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01a      	beq.n	8006d64 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d52:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e4      	bne.n	8006d2e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d130      	bne.n	8006dce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d82:	f023 0310 	bic.w	r3, r3, #16
 8006d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e4      	bne.n	8006d72 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d103      	bne.n	8006dbe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fe fc6e 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
 8006dcc:	e002      	b.n	8006dd4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fa fb80 	bl	80014d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006dd4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d006      	beq.n	8006dea <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f47f aecb 	bne.w	8006b80 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006df0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006df4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d049      	beq.n	8006e90 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006e02:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d242      	bcs.n	8006e90 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	623b      	str	r3, [r7, #32]
   return(result);
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006e2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e3      	bne.n	8006e0a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a15      	ldr	r2, [pc, #84]	@ (8006e9c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006e46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f043 0320 	orr.w	r3, r3, #32
 8006e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	69b9      	ldr	r1, [r7, #24]
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	617b      	str	r3, [r7, #20]
   return(result);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e4      	bne.n	8006e48 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e7e:	e007      	b.n	8006e90 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0208 	orr.w	r2, r2, #8
 8006e8e:	619a      	str	r2, [r3, #24]
}
 8006e90:	bf00      	nop
 8006e92:	37b8      	adds	r7, #184	@ 0xb8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40008000 	.word	0x40008000
 8006e9c:	08006621 	.word	0x08006621

08006ea0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b088      	sub	sp, #32
 8006eda:	af02      	add	r7, sp, #8
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	1d3b      	adds	r3, r7, #4
 8006ee0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e046      	b.n	8006f84 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2224      	movs	r2, #36	@ 0x24
 8006f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d105      	bne.n	8006f3c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006f30:	1d3b      	adds	r3, r7, #4
 8006f32:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f911 	bl	800715e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0201 	orr.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f4c:	f7f9 fdf2 	bl	8000b34 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7fe ff10 	bl	8005d86 <UART_WaitOnFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	75fb      	strb	r3, [r7, #23]
 8006f70:	e003      	b.n	8006f7a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b089      	sub	sp, #36	@ 0x24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_UARTEx_EnableStopMode+0x16>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e021      	b.n	8006fe6 <HAL_UARTEx_EnableStopMode+0x5a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f043 0302 	orr.w	r3, r3, #2
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6979      	ldr	r1, [r7, #20]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3724      	adds	r7, #36	@ 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_UARTEx_EnableFifoMode+0x16>
 8007002:	2302      	movs	r3, #2
 8007004:	e02b      	b.n	800705e <HAL_UARTEx_EnableFifoMode+0x6e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2224      	movs	r2, #36	@ 0x24
 8007012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007034:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800703c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8ac 	bl	80071a4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800707a:	2302      	movs	r3, #2
 800707c:	e02d      	b.n	80070da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2224      	movs	r2, #36	@ 0x24
 800708a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f872 	bl	80071a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e02d      	b.n	8007156 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2224      	movs	r2, #36	@ 0x24
 8007106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f834 	bl	80071a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f023 0210 	bic.w	r2, r3, #16
 8007176:	893b      	ldrh	r3, [r7, #8]
 8007178:	4619      	mov	r1, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800718c:	7abb      	ldrb	r3, [r7, #10]
 800718e:	061a      	lsls	r2, r3, #24
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	605a      	str	r2, [r3, #4]
}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr
	...

080071a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d108      	bne.n	80071c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071c4:	e031      	b.n	800722a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071c6:	2308      	movs	r3, #8
 80071c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071ca:	2308      	movs	r3, #8
 80071cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	0e5b      	lsrs	r3, r3, #25
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	0f5b      	lsrs	r3, r3, #29
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	7b3a      	ldrb	r2, [r7, #12]
 80071f2:	4910      	ldr	r1, [pc, #64]	@ (8007234 <UARTEx_SetNbDataToProcess+0x90>)
 80071f4:	5c8a      	ldrb	r2, [r1, r2]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071fa:	7b3a      	ldrb	r2, [r7, #12]
 80071fc:	490e      	ldr	r1, [pc, #56]	@ (8007238 <UARTEx_SetNbDataToProcess+0x94>)
 80071fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007200:	fb93 f3f2 	sdiv	r3, r3, r2
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	7b7a      	ldrb	r2, [r7, #13]
 8007210:	4908      	ldr	r1, [pc, #32]	@ (8007234 <UARTEx_SetNbDataToProcess+0x90>)
 8007212:	5c8a      	ldrb	r2, [r1, r2]
 8007214:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007218:	7b7a      	ldrb	r2, [r7, #13]
 800721a:	4907      	ldr	r1, [pc, #28]	@ (8007238 <UARTEx_SetNbDataToProcess+0x94>)
 800721c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800721e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007222:	b29a      	uxth	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	bc80      	pop	{r7}
 8007232:	4770      	bx	lr
 8007234:	0800c708 	.word	0x0800c708
 8007238:	0800c710 	.word	0x0800c710

0800723c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007244:	4a24      	ldr	r2, [pc, #144]	@ (80072d8 <RadioInit+0x9c>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800724a:	4b24      	ldr	r3, [pc, #144]	@ (80072dc <RadioInit+0xa0>)
 800724c:	2200      	movs	r2, #0
 800724e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007250:	4b22      	ldr	r3, [pc, #136]	@ (80072dc <RadioInit+0xa0>)
 8007252:	2200      	movs	r2, #0
 8007254:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007256:	4b21      	ldr	r3, [pc, #132]	@ (80072dc <RadioInit+0xa0>)
 8007258:	2200      	movs	r2, #0
 800725a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800725c:	4b1f      	ldr	r3, [pc, #124]	@ (80072dc <RadioInit+0xa0>)
 800725e:	2200      	movs	r2, #0
 8007260:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007262:	481f      	ldr	r0, [pc, #124]	@ (80072e0 <RadioInit+0xa4>)
 8007264:	f001 ffc6 	bl	80091f4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007268:	4b1c      	ldr	r3, [pc, #112]	@ (80072dc <RadioInit+0xa0>)
 800726a:	2200      	movs	r2, #0
 800726c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800726e:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <RadioInit+0xa0>)
 8007270:	2200      	movs	r2, #0
 8007272:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007274:	f002 fa5c 	bl	8009730 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007278:	2100      	movs	r1, #0
 800727a:	2000      	movs	r0, #0
 800727c:	f002 fe28 	bl	8009ed0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007280:	2204      	movs	r2, #4
 8007282:	2100      	movs	r1, #0
 8007284:	2001      	movs	r0, #1
 8007286:	f002 fbeb 	bl	8009a60 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800728a:	2300      	movs	r3, #0
 800728c:	2200      	movs	r2, #0
 800728e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007292:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007296:	f002 fb1b 	bl	80098d0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800729a:	f000 fe99 	bl	8007fd0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800729e:	2300      	movs	r3, #0
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <RadioInit+0xa8>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	f04f 31ff 	mov.w	r1, #4294967295
 80072aa:	480f      	ldr	r0, [pc, #60]	@ (80072e8 <RadioInit+0xac>)
 80072ac:	f004 fad4 	bl	800b858 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80072b0:	2300      	movs	r3, #0
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <RadioInit+0xb0>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	f04f 31ff 	mov.w	r1, #4294967295
 80072bc:	480c      	ldr	r0, [pc, #48]	@ (80072f0 <RadioInit+0xb4>)
 80072be:	f004 facb 	bl	800b858 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80072c2:	4809      	ldr	r0, [pc, #36]	@ (80072e8 <RadioInit+0xac>)
 80072c4:	f004 fb6c 	bl	800b9a0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80072c8:	4809      	ldr	r0, [pc, #36]	@ (80072f0 <RadioInit+0xb4>)
 80072ca:	f004 fb69 	bl	800b9a0 <UTIL_TIMER_Stop>
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000284 	.word	0x20000284
 80072dc:	20000288 	.word	0x20000288
 80072e0:	080083c5 	.word	0x080083c5
 80072e4:	0800834d 	.word	0x0800834d
 80072e8:	200002e4 	.word	0x200002e4
 80072ec:	08008361 	.word	0x08008361
 80072f0:	200002fc 	.word	0x200002fc

080072f4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80072f8:	f001 ffc4 	bl	8009284 <SUBGRF_GetOperatingMode>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b07      	cmp	r3, #7
 8007300:	d00a      	beq.n	8007318 <RadioGetStatus+0x24>
 8007302:	2b07      	cmp	r3, #7
 8007304:	dc0a      	bgt.n	800731c <RadioGetStatus+0x28>
 8007306:	2b04      	cmp	r3, #4
 8007308:	d002      	beq.n	8007310 <RadioGetStatus+0x1c>
 800730a:	2b05      	cmp	r3, #5
 800730c:	d002      	beq.n	8007314 <RadioGetStatus+0x20>
 800730e:	e005      	b.n	800731c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007310:	2302      	movs	r3, #2
 8007312:	e004      	b.n	800731e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007314:	2301      	movs	r3, #1
 8007316:	e002      	b.n	800731e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007318:	2303      	movs	r3, #3
 800731a:	e000      	b.n	800731e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800731c:	2300      	movs	r3, #0
    }
}
 800731e:	4618      	mov	r0, r3
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800732e:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <RadioSetModem+0xb4>)
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	4618      	mov	r0, r3
 8007338:	f003 f9b7 	bl	800a6aa <RFW_SetRadioModem>
    switch( modem )
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	2b05      	cmp	r3, #5
 8007340:	d80e      	bhi.n	8007360 <RadioSetModem+0x3c>
 8007342:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <RadioSetModem+0x24>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	0800736f 	.word	0x0800736f
 800734c:	0800737d 	.word	0x0800737d
 8007350:	08007361 	.word	0x08007361
 8007354:	080073a3 	.word	0x080073a3
 8007358:	080073b1 	.word	0x080073b1
 800735c:	080073bf 	.word	0x080073bf
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007360:	2003      	movs	r0, #3
 8007362:	f002 fb57 	bl	8009a14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007366:	4b1c      	ldr	r3, [pc, #112]	@ (80073d8 <RadioSetModem+0xb4>)
 8007368:	2200      	movs	r2, #0
 800736a:	735a      	strb	r2, [r3, #13]
        break;
 800736c:	e02f      	b.n	80073ce <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800736e:	2000      	movs	r0, #0
 8007370:	f002 fb50 	bl	8009a14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007374:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <RadioSetModem+0xb4>)
 8007376:	2200      	movs	r2, #0
 8007378:	735a      	strb	r2, [r3, #13]
        break;
 800737a:	e028      	b.n	80073ce <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800737c:	2001      	movs	r0, #1
 800737e:	f002 fb49 	bl	8009a14 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007382:	4b15      	ldr	r3, [pc, #84]	@ (80073d8 <RadioSetModem+0xb4>)
 8007384:	7b5a      	ldrb	r2, [r3, #13]
 8007386:	4b14      	ldr	r3, [pc, #80]	@ (80073d8 <RadioSetModem+0xb4>)
 8007388:	7b1b      	ldrb	r3, [r3, #12]
 800738a:	429a      	cmp	r2, r3
 800738c:	d01e      	beq.n	80073cc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800738e:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <RadioSetModem+0xb4>)
 8007390:	7b1a      	ldrb	r2, [r3, #12]
 8007392:	4b11      	ldr	r3, [pc, #68]	@ (80073d8 <RadioSetModem+0xb4>)
 8007394:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007396:	4b10      	ldr	r3, [pc, #64]	@ (80073d8 <RadioSetModem+0xb4>)
 8007398:	7b5b      	ldrb	r3, [r3, #13]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 ffa0 	bl	80082e0 <RadioSetPublicNetwork>
        }
        break;
 80073a0:	e014      	b.n	80073cc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80073a2:	2002      	movs	r0, #2
 80073a4:	f002 fb36 	bl	8009a14 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073a8:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <RadioSetModem+0xb4>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	735a      	strb	r2, [r3, #13]
        break;
 80073ae:	e00e      	b.n	80073ce <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80073b0:	2002      	movs	r0, #2
 80073b2:	f002 fb2f 	bl	8009a14 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073b6:	4b08      	ldr	r3, [pc, #32]	@ (80073d8 <RadioSetModem+0xb4>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	735a      	strb	r2, [r3, #13]
        break;
 80073bc:	e007      	b.n	80073ce <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80073be:	2000      	movs	r0, #0
 80073c0:	f002 fb28 	bl	8009a14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073c4:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <RadioSetModem+0xb4>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	735a      	strb	r2, [r3, #13]
        break;
 80073ca:	e000      	b.n	80073ce <RadioSetModem+0xaa>
        break;
 80073cc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000288 	.word	0x20000288

080073dc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f002 facf 	bl	8009988 <SUBGRF_SetRfFrequency>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b090      	sub	sp, #64	@ 0x40
 80073f6:	af0a      	add	r7, sp, #40	@ 0x28
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	603b      	str	r3, [r7, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800740e:	f000 fdf2 	bl	8007ff6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007412:	2000      	movs	r0, #0
 8007414:	f7ff ff86 	bl	8007324 <RadioSetModem>

    RadioSetChannel( freq );
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7ff ffdf 	bl	80073dc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800741e:	2301      	movs	r3, #1
 8007420:	9309      	str	r3, [sp, #36]	@ 0x24
 8007422:	2300      	movs	r3, #0
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	2300      	movs	r3, #0
 8007428:	9307      	str	r3, [sp, #28]
 800742a:	2300      	movs	r3, #0
 800742c:	9306      	str	r3, [sp, #24]
 800742e:	2300      	movs	r3, #0
 8007430:	9305      	str	r3, [sp, #20]
 8007432:	2300      	movs	r3, #0
 8007434:	9304      	str	r3, [sp, #16]
 8007436:	2300      	movs	r3, #0
 8007438:	9303      	str	r3, [sp, #12]
 800743a:	2300      	movs	r3, #0
 800743c:	9302      	str	r3, [sp, #8]
 800743e:	2303      	movs	r3, #3
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	2300      	movs	r3, #0
 8007448:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	2000      	movs	r0, #0
 8007450:	f000 f83c 	bl	80074cc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007454:	2000      	movs	r0, #0
 8007456:	f000 fdd5 	bl	8008004 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800745a:	f000 ff6f 	bl	800833c <RadioGetWakeupTime>
 800745e:	4603      	mov	r3, r0
 8007460:	4618      	mov	r0, r3
 8007462:	f7f9 fb7b 	bl	8000b5c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007466:	f004 fbb5 	bl	800bbd4 <UTIL_TIMER_GetCurrentTime>
 800746a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800746c:	e00d      	b.n	800748a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800746e:	2000      	movs	r0, #0
 8007470:	f000 feb6 	bl	80081e0 <RadioRssi>
 8007474:	4603      	mov	r3, r0
 8007476:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007478:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800747c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007480:	429a      	cmp	r2, r3
 8007482:	dd02      	ble.n	800748a <RadioIsChannelFree+0x98>
        {
            status = false;
 8007484:	2300      	movs	r3, #0
 8007486:	75fb      	strb	r3, [r7, #23]
            break;
 8007488:	e006      	b.n	8007498 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800748a:	6938      	ldr	r0, [r7, #16]
 800748c:	f004 fbb4 	bl	800bbf8 <UTIL_TIMER_GetElapsedTime>
 8007490:	4602      	mov	r2, r0
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	4293      	cmp	r3, r2
 8007496:	d8ea      	bhi.n	800746e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007498:	f000 fdad 	bl	8007ff6 <RadioStandby>

    return status;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80074b0:	2300      	movs	r3, #0
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	2000      	movs	r0, #0
 80074b8:	f002 fa0a 	bl	80098d0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80074bc:	f001 ffb3 	bl	8009426 <SUBGRF_GetRandom>
 80074c0:	6078      	str	r0, [r7, #4]

    return rnd;
 80074c2:	687b      	ldr	r3, [r7, #4]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	@ 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	461a      	mov	r2, r3
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	4613      	mov	r3, r2
 80074de:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80074e0:	4ab9      	ldr	r2, [pc, #740]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80074e2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80074e6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80074e8:	f003 f89d 	bl	800a626 <RFW_DeInit>
    if( rxContinuous == true )
 80074ec:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80074f8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d004      	beq.n	800750a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007500:	4ab2      	ldr	r2, [pc, #712]	@ (80077cc <RadioSetRxConfig+0x300>)
 8007502:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007506:	7013      	strb	r3, [r2, #0]
 8007508:	e002      	b.n	8007510 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800750a:	4bb0      	ldr	r3, [pc, #704]	@ (80077cc <RadioSetRxConfig+0x300>)
 800750c:	22ff      	movs	r2, #255	@ 0xff
 800750e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b05      	cmp	r3, #5
 8007514:	d009      	beq.n	800752a <RadioSetRxConfig+0x5e>
 8007516:	2b05      	cmp	r3, #5
 8007518:	f300 81d7 	bgt.w	80078ca <RadioSetRxConfig+0x3fe>
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 80bf 	beq.w	80076a0 <RadioSetRxConfig+0x1d4>
 8007522:	2b01      	cmp	r3, #1
 8007524:	f000 8124 	beq.w	8007770 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007528:	e1cf      	b.n	80078ca <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800752a:	2001      	movs	r0, #1
 800752c:	f002 f8c2 	bl	80096b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007530:	4ba5      	ldr	r3, [pc, #660]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007538:	4aa3      	ldr	r2, [pc, #652]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800753e:	4ba2      	ldr	r3, [pc, #648]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007540:	2209      	movs	r2, #9
 8007542:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007546:	4ba0      	ldr	r3, [pc, #640]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007548:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800754c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800754e:	68b8      	ldr	r0, [r7, #8]
 8007550:	f002 ff9c 	bl	800a48c <SUBGRF_GetFskBandwidthRegValue>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	4b9b      	ldr	r3, [pc, #620]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800755a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800755e:	4b9a      	ldr	r3, [pc, #616]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007560:	2200      	movs	r2, #0
 8007562:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007564:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	b29a      	uxth	r2, r3
 800756a:	4b97      	ldr	r3, [pc, #604]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800756c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800756e:	4b96      	ldr	r3, [pc, #600]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007570:	2200      	movs	r2, #0
 8007572:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007574:	4b94      	ldr	r3, [pc, #592]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007576:	2210      	movs	r2, #16
 8007578:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800757a:	4b93      	ldr	r3, [pc, #588]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800757c:	2200      	movs	r2, #0
 800757e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007580:	4b91      	ldr	r3, [pc, #580]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007582:	2200      	movs	r2, #0
 8007584:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007586:	4b91      	ldr	r3, [pc, #580]	@ (80077cc <RadioSetRxConfig+0x300>)
 8007588:	781a      	ldrb	r2, [r3, #0]
 800758a:	4b8f      	ldr	r3, [pc, #572]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800758c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800758e:	4b8e      	ldr	r3, [pc, #568]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007590:	2201      	movs	r2, #1
 8007592:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007594:	4b8c      	ldr	r3, [pc, #560]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007596:	2200      	movs	r2, #0
 8007598:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800759a:	2005      	movs	r0, #5
 800759c:	f7ff fec2 	bl	8007324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80075a0:	488b      	ldr	r0, [pc, #556]	@ (80077d0 <RadioSetRxConfig+0x304>)
 80075a2:	f002 fb2b 	bl	8009bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80075a6:	488b      	ldr	r0, [pc, #556]	@ (80077d4 <RadioSetRxConfig+0x308>)
 80075a8:	f002 fbf6 	bl	8009d98 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80075ac:	4a8a      	ldr	r2, [pc, #552]	@ (80077d8 <RadioSetRxConfig+0x30c>)
 80075ae:	f107 031c 	add.w	r3, r7, #28
 80075b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80075ba:	f107 031c 	add.w	r3, r7, #28
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 feaf 	bl	8009322 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80075c4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80075c8:	f001 fefa 	bl	80093c0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80075cc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80075d0:	f000 fe24 	bl	800821c <RadioRead>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80075da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075de:	f023 0310 	bic.w	r3, r3, #16
 80075e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80075e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075ea:	4619      	mov	r1, r3
 80075ec:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80075f0:	f000 fe02 	bl	80081f8 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80075f4:	2104      	movs	r1, #4
 80075f6:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80075fa:	f000 fdfd 	bl	80081f8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80075fe:	f640 009b 	movw	r0, #2203	@ 0x89b
 8007602:	f000 fe0b 	bl	800821c <RadioRead>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800760c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007610:	f023 031c 	bic.w	r3, r3, #28
 8007614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800761c:	f043 0308 	orr.w	r3, r3, #8
 8007620:	b2db      	uxtb	r3, r3
 8007622:	4619      	mov	r1, r3
 8007624:	f640 009b 	movw	r0, #2203	@ 0x89b
 8007628:	f000 fde6 	bl	80081f8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800762c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007630:	f000 fdf4 	bl	800821c <RadioRead>
 8007634:	4603      	mov	r3, r0
 8007636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800763a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800763e:	f023 0318 	bic.w	r3, r3, #24
 8007642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800764a:	f043 0318 	orr.w	r3, r3, #24
 800764e:	b2db      	uxtb	r3, r3
 8007650:	4619      	mov	r1, r3
 8007652:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007656:	f000 fdcf 	bl	80081f8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800765a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800765e:	f000 fddd 	bl	800821c <RadioRead>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800766c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007678:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800767c:	b2db      	uxtb	r3, r3
 800767e:	4619      	mov	r1, r3
 8007680:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8007684:	f000 fdb8 	bl	80081f8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007688:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800768a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	fbb2 f3f3 	udiv	r3, r2, r3
 800769a:	4a4b      	ldr	r2, [pc, #300]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800769c:	6093      	str	r3, [r2, #8]
            break;
 800769e:	e115      	b.n	80078cc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80076a0:	2000      	movs	r0, #0
 80076a2:	f002 f807 	bl	80096b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80076a6:	4b48      	ldr	r3, [pc, #288]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80076ae:	4a46      	ldr	r2, [pc, #280]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80076b4:	4b44      	ldr	r3, [pc, #272]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076b6:	220b      	movs	r2, #11
 80076b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80076bc:	68b8      	ldr	r0, [r7, #8]
 80076be:	f002 fee5 	bl	800a48c <SUBGRF_GetFskBandwidthRegValue>
 80076c2:	4603      	mov	r3, r0
 80076c4:	461a      	mov	r2, r3
 80076c6:	4b40      	ldr	r3, [pc, #256]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80076cc:	4b3e      	ldr	r3, [pc, #248]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80076d2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	4b3b      	ldr	r3, [pc, #236]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076da:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80076dc:	4b3a      	ldr	r3, [pc, #232]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076de:	2204      	movs	r2, #4
 80076e0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80076e2:	4b39      	ldr	r3, [pc, #228]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076e4:	2218      	movs	r2, #24
 80076e6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80076e8:	4b37      	ldr	r3, [pc, #220]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80076ee:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80076f2:	f083 0301 	eor.w	r3, r3, #1
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	4b33      	ldr	r3, [pc, #204]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80076fc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80076fe:	4b33      	ldr	r3, [pc, #204]	@ (80077cc <RadioSetRxConfig+0x300>)
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	4b31      	ldr	r3, [pc, #196]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007704:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007706:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800770e:	4b2e      	ldr	r3, [pc, #184]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007710:	22f2      	movs	r2, #242	@ 0xf2
 8007712:	75da      	strb	r2, [r3, #23]
 8007714:	e002      	b.n	800771c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007716:	4b2c      	ldr	r3, [pc, #176]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007718:	2201      	movs	r2, #1
 800771a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800771c:	4b2a      	ldr	r3, [pc, #168]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800771e:	2201      	movs	r2, #1
 8007720:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007722:	f000 fc68 	bl	8007ff6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007726:	2000      	movs	r0, #0
 8007728:	f7ff fdfc 	bl	8007324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800772c:	4828      	ldr	r0, [pc, #160]	@ (80077d0 <RadioSetRxConfig+0x304>)
 800772e:	f002 fa65 	bl	8009bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007732:	4828      	ldr	r0, [pc, #160]	@ (80077d4 <RadioSetRxConfig+0x308>)
 8007734:	f002 fb30 	bl	8009d98 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007738:	4a28      	ldr	r2, [pc, #160]	@ (80077dc <RadioSetRxConfig+0x310>)
 800773a:	f107 0314 	add.w	r3, r7, #20
 800773e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007742:	e883 0003 	stmia.w	r3, {r0, r1}
 8007746:	f107 0314 	add.w	r3, r7, #20
 800774a:	4618      	mov	r0, r3
 800774c:	f001 fde9 	bl	8009322 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007750:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007754:	f001 fe34 	bl	80093c0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007758:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800775a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	fbb2 f3f3 	udiv	r3, r2, r3
 800776a:	4a17      	ldr	r2, [pc, #92]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 800776c:	6093      	str	r3, [r2, #8]
            break;
 800776e:	e0ad      	b.n	80078cc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007770:	2000      	movs	r0, #0
 8007772:	f001 ff9f 	bl	80096b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007776:	4b14      	ldr	r3, [pc, #80]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	4b11      	ldr	r3, [pc, #68]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007788:	4a15      	ldr	r2, [pc, #84]	@ (80077e0 <RadioSetRxConfig+0x314>)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4413      	add	r3, r2
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007796:	4a0c      	ldr	r2, [pc, #48]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <RadioSetRxConfig+0x2e4>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b0b      	cmp	r3, #11
 80077a8:	d008      	beq.n	80077bc <RadioSetRxConfig+0x2f0>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	d005      	beq.n	80077bc <RadioSetRxConfig+0x2f0>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d116      	bne.n	80077e4 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b0c      	cmp	r3, #12
 80077ba:	d113      	bne.n	80077e4 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80077bc:	4b02      	ldr	r3, [pc, #8]	@ (80077c8 <RadioSetRxConfig+0x2fc>)
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80077c4:	e012      	b.n	80077ec <RadioSetRxConfig+0x320>
 80077c6:	bf00      	nop
 80077c8:	20000288 	.word	0x20000288
 80077cc:	20000008 	.word	0x20000008
 80077d0:	200002c0 	.word	0x200002c0
 80077d4:	20000296 	.word	0x20000296
 80077d8:	0800c358 	.word	0x0800c358
 80077dc:	0800c360 	.word	0x0800c360
 80077e0:	0800c7a4 	.word	0x0800c7a4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80077e4:	4b3b      	ldr	r3, [pc, #236]	@ (80078d4 <RadioSetRxConfig+0x408>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80077ec:	4b39      	ldr	r3, [pc, #228]	@ (80078d4 <RadioSetRxConfig+0x408>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80077f2:	4b38      	ldr	r3, [pc, #224]	@ (80078d4 <RadioSetRxConfig+0x408>)
 80077f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077f8:	2b05      	cmp	r3, #5
 80077fa:	d004      	beq.n	8007806 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80077fc:	4b35      	ldr	r3, [pc, #212]	@ (80078d4 <RadioSetRxConfig+0x408>)
 80077fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007802:	2b06      	cmp	r3, #6
 8007804:	d10a      	bne.n	800781c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007806:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007808:	2b0b      	cmp	r3, #11
 800780a:	d803      	bhi.n	8007814 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800780c:	4b31      	ldr	r3, [pc, #196]	@ (80078d4 <RadioSetRxConfig+0x408>)
 800780e:	220c      	movs	r2, #12
 8007810:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007812:	e006      	b.n	8007822 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007814:	4a2f      	ldr	r2, [pc, #188]	@ (80078d4 <RadioSetRxConfig+0x408>)
 8007816:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007818:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800781a:	e002      	b.n	8007822 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800781c:	4a2d      	ldr	r2, [pc, #180]	@ (80078d4 <RadioSetRxConfig+0x408>)
 800781e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007820:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007822:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007826:	4b2b      	ldr	r3, [pc, #172]	@ (80078d4 <RadioSetRxConfig+0x408>)
 8007828:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800782a:	4b2b      	ldr	r3, [pc, #172]	@ (80078d8 <RadioSetRxConfig+0x40c>)
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	4b29      	ldr	r3, [pc, #164]	@ (80078d4 <RadioSetRxConfig+0x408>)
 8007830:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007832:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8007836:	4b27      	ldr	r3, [pc, #156]	@ (80078d4 <RadioSetRxConfig+0x408>)
 8007838:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800783c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8007840:	4b24      	ldr	r3, [pc, #144]	@ (80078d4 <RadioSetRxConfig+0x408>)
 8007842:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8007846:	f000 fbd6 	bl	8007ff6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800784a:	2001      	movs	r0, #1
 800784c:	f7ff fd6a 	bl	8007324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007850:	4822      	ldr	r0, [pc, #136]	@ (80078dc <RadioSetRxConfig+0x410>)
 8007852:	f002 f9d3 	bl	8009bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007856:	4822      	ldr	r0, [pc, #136]	@ (80078e0 <RadioSetRxConfig+0x414>)
 8007858:	f002 fa9e 	bl	8009d98 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800785c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800785e:	b2db      	uxtb	r3, r3
 8007860:	4618      	mov	r0, r3
 8007862:	f001 ff36 	bl	80096d2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8007866:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800786a:	f002 fbfd 	bl	800a068 <SUBGRF_ReadRegister>
 800786e:	4603      	mov	r3, r0
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4619      	mov	r1, r3
 8007878:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800787c:	f002 fbd2 	bl	800a024 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007880:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <RadioSetRxConfig+0x408>)
 8007882:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007886:	2b01      	cmp	r3, #1
 8007888:	d10d      	bne.n	80078a6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800788a:	f240 7036 	movw	r0, #1846	@ 0x736
 800788e:	f002 fbeb 	bl	800a068 <SUBGRF_ReadRegister>
 8007892:	4603      	mov	r3, r0
 8007894:	f023 0304 	bic.w	r3, r3, #4
 8007898:	b2db      	uxtb	r3, r3
 800789a:	4619      	mov	r1, r3
 800789c:	f240 7036 	movw	r0, #1846	@ 0x736
 80078a0:	f002 fbc0 	bl	800a024 <SUBGRF_WriteRegister>
 80078a4:	e00c      	b.n	80078c0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80078a6:	f240 7036 	movw	r0, #1846	@ 0x736
 80078aa:	f002 fbdd 	bl	800a068 <SUBGRF_ReadRegister>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f043 0304 	orr.w	r3, r3, #4
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	4619      	mov	r1, r3
 80078b8:	f240 7036 	movw	r0, #1846	@ 0x736
 80078bc:	f002 fbb2 	bl	800a024 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80078c0:	4b04      	ldr	r3, [pc, #16]	@ (80078d4 <RadioSetRxConfig+0x408>)
 80078c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078c6:	609a      	str	r2, [r3, #8]
            break;
 80078c8:	e000      	b.n	80078cc <RadioSetRxConfig+0x400>
            break;
 80078ca:	bf00      	nop
    }
}
 80078cc:	bf00      	nop
 80078ce:	3728      	adds	r7, #40	@ 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000288 	.word	0x20000288
 80078d8:	20000008 	.word	0x20000008
 80078dc:	200002c0 	.word	0x200002c0
 80078e0:	20000296 	.word	0x20000296

080078e4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60ba      	str	r2, [r7, #8]
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	4603      	mov	r3, r0
 80078f0:	73fb      	strb	r3, [r7, #15]
 80078f2:	460b      	mov	r3, r1
 80078f4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80078f6:	f002 fe96 	bl	800a626 <RFW_DeInit>
    switch( modem )
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	f000 80c7 	beq.w	8007a90 <RadioSetTxConfig+0x1ac>
 8007902:	2b04      	cmp	r3, #4
 8007904:	f300 80d6 	bgt.w	8007ab4 <RadioSetTxConfig+0x1d0>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <RadioSetTxConfig+0x2e>
 800790c:	2b01      	cmp	r3, #1
 800790e:	d059      	beq.n	80079c4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007910:	e0d0      	b.n	8007ab4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007912:	4b77      	ldr	r3, [pc, #476]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800791a:	4a75      	ldr	r2, [pc, #468]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007920:	4b73      	ldr	r3, [pc, #460]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007922:	220b      	movs	r2, #11
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f002 fdaf 	bl	800a48c <SUBGRF_GetFskBandwidthRegValue>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	4b6f      	ldr	r3, [pc, #444]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007938:	4a6d      	ldr	r2, [pc, #436]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800793e:	4b6c      	ldr	r3, [pc, #432]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007940:	2200      	movs	r2, #0
 8007942:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007944:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	b29a      	uxth	r2, r3
 800794a:	4b69      	ldr	r3, [pc, #420]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 800794c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800794e:	4b68      	ldr	r3, [pc, #416]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007950:	2204      	movs	r2, #4
 8007952:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007954:	4b66      	ldr	r3, [pc, #408]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007956:	2218      	movs	r2, #24
 8007958:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800795a:	4b65      	ldr	r3, [pc, #404]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 800795c:	2200      	movs	r2, #0
 800795e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007960:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007964:	f083 0301 	eor.w	r3, r3, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	4b60      	ldr	r3, [pc, #384]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 800796e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007970:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007978:	4b5d      	ldr	r3, [pc, #372]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 800797a:	22f2      	movs	r2, #242	@ 0xf2
 800797c:	75da      	strb	r2, [r3, #23]
 800797e:	e002      	b.n	8007986 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007980:	4b5b      	ldr	r3, [pc, #364]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007982:	2201      	movs	r2, #1
 8007984:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007986:	4b5a      	ldr	r3, [pc, #360]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007988:	2201      	movs	r2, #1
 800798a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800798c:	f000 fb33 	bl	8007ff6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007990:	2000      	movs	r0, #0
 8007992:	f7ff fcc7 	bl	8007324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007996:	4857      	ldr	r0, [pc, #348]	@ (8007af4 <RadioSetTxConfig+0x210>)
 8007998:	f002 f930 	bl	8009bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800799c:	4856      	ldr	r0, [pc, #344]	@ (8007af8 <RadioSetTxConfig+0x214>)
 800799e:	f002 f9fb 	bl	8009d98 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80079a2:	4a56      	ldr	r2, [pc, #344]	@ (8007afc <RadioSetTxConfig+0x218>)
 80079a4:	f107 0310 	add.w	r3, r7, #16
 80079a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80079b0:	f107 0310 	add.w	r3, r7, #16
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 fcb4 	bl	8009322 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80079ba:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80079be:	f001 fcff 	bl	80093c0 <SUBGRF_SetWhiteningSeed>
            break;
 80079c2:	e078      	b.n	8007ab6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80079c4:	4b4a      	ldr	r3, [pc, #296]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	4b47      	ldr	r3, [pc, #284]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80079d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007b00 <RadioSetTxConfig+0x21c>)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4413      	add	r3, r2
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	4b44      	ldr	r3, [pc, #272]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 80079e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80079e4:	4a42      	ldr	r2, [pc, #264]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 80079e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079ea:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <RadioSetTxConfig+0x11c>
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	2b0b      	cmp	r3, #11
 80079f8:	d008      	beq.n	8007a0c <RadioSetTxConfig+0x128>
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	2b0c      	cmp	r3, #12
 80079fe:	d005      	beq.n	8007a0c <RadioSetTxConfig+0x128>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d107      	bne.n	8007a16 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	2b0c      	cmp	r3, #12
 8007a0a:	d104      	bne.n	8007a16 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007a0c:	4b38      	ldr	r3, [pc, #224]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007a14:	e003      	b.n	8007a1e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007a16:	4b36      	ldr	r3, [pc, #216]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007a1e:	4b34      	ldr	r3, [pc, #208]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007a24:	4b32      	ldr	r3, [pc, #200]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d004      	beq.n	8007a38 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007a2e:	4b30      	ldr	r3, [pc, #192]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007a34:	2b06      	cmp	r3, #6
 8007a36:	d10a      	bne.n	8007a4e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007a38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a3a:	2b0b      	cmp	r3, #11
 8007a3c:	d803      	bhi.n	8007a46 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a40:	220c      	movs	r2, #12
 8007a42:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007a44:	e006      	b.n	8007a54 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007a46:	4a2a      	ldr	r2, [pc, #168]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a4a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007a4c:	e002      	b.n	8007a54 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007a4e:	4a28      	ldr	r2, [pc, #160]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a52:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007a54:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007a58:	4b25      	ldr	r3, [pc, #148]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a5a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007a5c:	4b29      	ldr	r3, [pc, #164]	@ (8007b04 <RadioSetTxConfig+0x220>)
 8007a5e:	781a      	ldrb	r2, [r3, #0]
 8007a60:	4b23      	ldr	r3, [pc, #140]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a62:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007a64:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007a68:	4b21      	ldr	r3, [pc, #132]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a6a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007a6e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007a72:	4b1f      	ldr	r3, [pc, #124]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8007a78:	f000 fabd 	bl	8007ff6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	f7ff fc51 	bl	8007324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007a82:	481c      	ldr	r0, [pc, #112]	@ (8007af4 <RadioSetTxConfig+0x210>)
 8007a84:	f002 f8ba 	bl	8009bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007a88:	481b      	ldr	r0, [pc, #108]	@ (8007af8 <RadioSetTxConfig+0x214>)
 8007a8a:	f002 f985 	bl	8009d98 <SUBGRF_SetPacketParams>
            break;
 8007a8e:	e012      	b.n	8007ab6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007a90:	2004      	movs	r0, #4
 8007a92:	f7ff fc47 	bl	8007324 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007a96:	4b16      	ldr	r3, [pc, #88]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007a9e:	4a14      	ldr	r2, [pc, #80]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007aa4:	4b12      	ldr	r3, [pc, #72]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007aa6:	2216      	movs	r2, #22
 8007aa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007aac:	4811      	ldr	r0, [pc, #68]	@ (8007af4 <RadioSetTxConfig+0x210>)
 8007aae:	f002 f8a5 	bl	8009bfc <SUBGRF_SetModulationParams>
            break;
 8007ab2:	e000      	b.n	8007ab6 <RadioSetTxConfig+0x1d2>
            break;
 8007ab4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f002 fbe8 	bl	800a290 <SUBGRF_SetRfTxPower>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007ac6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007aca:	210e      	movs	r1, #14
 8007acc:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007ad0:	f002 faa8 	bl	800a024 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007ad4:	4b06      	ldr	r3, [pc, #24]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007ad6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007ada:	4618      	mov	r0, r3
 8007adc:	f002 fdb7 	bl	800a64e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007ae0:	4a03      	ldr	r2, [pc, #12]	@ (8007af0 <RadioSetTxConfig+0x20c>)
 8007ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae4:	6053      	str	r3, [r2, #4]
}
 8007ae6:	bf00      	nop
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20000288 	.word	0x20000288
 8007af4:	200002c0 	.word	0x200002c0
 8007af8:	20000296 	.word	0x20000296
 8007afc:	0800c360 	.word	0x0800c360
 8007b00:	0800c7a4 	.word	0x0800c7a4
 8007b04:	20000008 	.word	0x20000008

08007b08 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
    return true;
 8007b10:	2301      	movs	r3, #1
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr

08007b1c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	2b0a      	cmp	r3, #10
 8007b2e:	d83e      	bhi.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
 8007b30:	a201      	add	r2, pc, #4	@ (adr r2, 8007b38 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007b65 	.word	0x08007b65
 8007b3c:	08007b75 	.word	0x08007b75
 8007b40:	08007b85 	.word	0x08007b85
 8007b44:	08007b95 	.word	0x08007b95
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007ba3 	.word	0x08007ba3
 8007b50:	08007ba9 	.word	0x08007ba9
 8007b54:	08007baf 	.word	0x08007baf
 8007b58:	08007b6d 	.word	0x08007b6d
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b8d 	.word	0x08007b8d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007b64:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8007b68:	60fb      	str	r3, [r7, #12]
        break;
 8007b6a:	e020      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007b6c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8007b70:	60fb      	str	r3, [r7, #12]
        break;
 8007b72:	e01c      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007b74:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8007b78:	60fb      	str	r3, [r7, #12]
        break;
 8007b7a:	e018      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007b7c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8007b80:	60fb      	str	r3, [r7, #12]
        break;
 8007b82:	e014      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007b84:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8007b88:	60fb      	str	r3, [r7, #12]
        break;
 8007b8a:	e010      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007b8c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8007b90:	60fb      	str	r3, [r7, #12]
        break;
 8007b92:	e00c      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007b94:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007b98:	60fb      	str	r3, [r7, #12]
        break;
 8007b9a:	e008      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007b9c:	4b07      	ldr	r3, [pc, #28]	@ (8007bbc <RadioGetLoRaBandwidthInHz+0xa0>)
 8007b9e:	60fb      	str	r3, [r7, #12]
        break;
 8007ba0:	e005      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007ba2:	4b07      	ldr	r3, [pc, #28]	@ (8007bc0 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007ba4:	60fb      	str	r3, [r7, #12]
        break;
 8007ba6:	e002      	b.n	8007bae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007ba8:	4b06      	ldr	r3, [pc, #24]	@ (8007bc4 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007baa:	60fb      	str	r3, [r7, #12]
        break;
 8007bac:	bf00      	nop
    }

    return bandwidthInHz;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	0001e848 	.word	0x0001e848
 8007bc0:	0003d090 	.word	0x0003d090
 8007bc4:	0007a120 	.word	0x0007a120

08007bc8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	70fb      	strb	r3, [r7, #3]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	803b      	strh	r3, [r7, #0]
 8007bde:	4613      	mov	r3, r2
 8007be0:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007be2:	883b      	ldrh	r3, [r7, #0]
 8007be4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007be6:	78ba      	ldrb	r2, [r7, #2]
 8007be8:	f082 0201 	eor.w	r2, r2, #1
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	2a00      	cmp	r2, #0
 8007bf0:	d001      	beq.n	8007bf6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007bf2:	2208      	movs	r2, #8
 8007bf4:	e000      	b.n	8007bf8 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007bf6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007bf8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007bfa:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007bfe:	7c3b      	ldrb	r3, [r7, #16]
 8007c00:	7d39      	ldrb	r1, [r7, #20]
 8007c02:	2900      	cmp	r1, #0
 8007c04:	d001      	beq.n	8007c0a <RadioGetGfskTimeOnAirNumerator+0x42>
 8007c06:	2102      	movs	r1, #2
 8007c08:	e000      	b.n	8007c0c <RadioGetGfskTimeOnAirNumerator+0x44>
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	440b      	add	r3, r1
 8007c0e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c10:	4413      	add	r3, r2
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b08b      	sub	sp, #44	@ 0x2c
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	71fb      	strb	r3, [r7, #7]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	3304      	adds	r3, #4
 8007c36:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	d002      	beq.n	8007c4a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b06      	cmp	r3, #6
 8007c48:	d104      	bne.n	8007c54 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007c4a:	88bb      	ldrh	r3, [r7, #4]
 8007c4c:	2b0b      	cmp	r3, #11
 8007c4e:	d801      	bhi.n	8007c54 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007c50:	230c      	movs	r3, #12
 8007c52:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d105      	bne.n	8007c66 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b0b      	cmp	r3, #11
 8007c5e:	d008      	beq.n	8007c72 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b0c      	cmp	r3, #12
 8007c64:	d005      	beq.n	8007c72 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d105      	bne.n	8007c78 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b0c      	cmp	r3, #12
 8007c70:	d102      	bne.n	8007c78 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007c78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007c7c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007c7e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	d001      	beq.n	8007c8a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007c86:	2210      	movs	r2, #16
 8007c88:	e000      	b.n	8007c8c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007c8a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007c8c:	4413      	add	r3, r2
 8007c8e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007c94:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007c96:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	d001      	beq.n	8007ca2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	e000      	b.n	8007ca4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007ca2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007ca4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007ca6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d803      	bhi.n	8007cb6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	623b      	str	r3, [r7, #32]
 8007cb4:	e00e      	b.n	8007cd4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	3b02      	subs	r3, #2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	e002      	b.n	8007cd4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da01      	bge.n	8007cde <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	fb03 f202 	mul.w	r2, r3, r2
 8007cf2:	88bb      	ldrh	r3, [r7, #4]
 8007cf4:	4413      	add	r3, r2
    int32_t intermediate =
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b06      	cmp	r3, #6
 8007cfe:	d802      	bhi.n	8007d06 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	3302      	adds	r3, #2
 8007d04:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	3b02      	subs	r3, #2
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	372c      	adds	r7, #44	@ 0x2c
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr
	...

08007d20 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	@ 0x28
 8007d24:	af04      	add	r7, sp, #16
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]
 8007d30:	4613      	mov	r3, r2
 8007d32:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <RadioTimeOnAir+0x28>
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d017      	beq.n	8007d76 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007d46:	e035      	b.n	8007db4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007d48:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8007d4c:	8c3a      	ldrh	r2, [r7, #32]
 8007d4e:	7bb9      	ldrb	r1, [r7, #14]
 8007d50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d54:	9301      	str	r3, [sp, #4]
 8007d56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ff32 	bl	8007bc8 <RadioGetGfskTimeOnAirNumerator>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	613b      	str	r3, [r7, #16]
        break;
 8007d74:	e01e      	b.n	8007db4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007d76:	8c39      	ldrh	r1, [r7, #32]
 8007d78:	7bba      	ldrb	r2, [r7, #14]
 8007d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	68b8      	ldr	r0, [r7, #8]
 8007d92:	f7ff ff43 	bl	8007c1c <RadioGetLoRaTimeOnAirNumerator>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d9c:	fb02 f303 	mul.w	r3, r2, r3
 8007da0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007da2:	4a0a      	ldr	r2, [pc, #40]	@ (8007dcc <RadioTimeOnAir+0xac>)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4413      	add	r3, r2
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff feb6 	bl	8007b1c <RadioGetLoRaBandwidthInHz>
 8007db0:	6138      	str	r0, [r7, #16]
        break;
 8007db2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	4413      	add	r3, r2
 8007dba:	1e5a      	subs	r2, r3, #1
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	0800c7a4 	.word	0x0800c7a4

08007dd0 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2200      	movs	r2, #0
 8007de0:	f240 2101 	movw	r1, #513	@ 0x201
 8007de4:	f240 2001 	movw	r0, #513	@ 0x201
 8007de8:	f001 fd72 	bl	80098d0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007dec:	4b73      	ldr	r3, [pc, #460]	@ (8007fbc <RadioSend+0x1ec>)
 8007dee:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007df2:	2101      	movs	r1, #1
 8007df4:	4618      	mov	r0, r3
 8007df6:	f002 fa23 	bl	800a240 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007dfa:	4b70      	ldr	r3, [pc, #448]	@ (8007fbc <RadioSend+0x1ec>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d112      	bne.n	8007e28 <RadioSend+0x58>
 8007e02:	4b6e      	ldr	r3, [pc, #440]	@ (8007fbc <RadioSend+0x1ec>)
 8007e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	d10d      	bne.n	8007e28 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007e0c:	f640 0089 	movw	r0, #2185	@ 0x889
 8007e10:	f002 f92a 	bl	800a068 <SUBGRF_ReadRegister>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f023 0304 	bic.w	r3, r3, #4
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f640 0089 	movw	r0, #2185	@ 0x889
 8007e22:	f002 f8ff 	bl	800a024 <SUBGRF_WriteRegister>
 8007e26:	e00c      	b.n	8007e42 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007e28:	f640 0089 	movw	r0, #2185	@ 0x889
 8007e2c:	f002 f91c 	bl	800a068 <SUBGRF_ReadRegister>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f043 0304 	orr.w	r3, r3, #4
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f640 0089 	movw	r0, #2185	@ 0x889
 8007e3e:	f002 f8f1 	bl	800a024 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007e42:	4b5e      	ldr	r3, [pc, #376]	@ (8007fbc <RadioSend+0x1ec>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	f200 80a8 	bhi.w	8007f9c <RadioSend+0x1cc>
 8007e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <RadioSend+0x84>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007e83 	.word	0x08007e83
 8007e58:	08007e69 	.word	0x08007e69
 8007e5c:	08007e83 	.word	0x08007e83
 8007e60:	08007ee5 	.word	0x08007ee5
 8007e64:	08007f05 	.word	0x08007f05
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007e68:	4a54      	ldr	r2, [pc, #336]	@ (8007fbc <RadioSend+0x1ec>)
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e6e:	4854      	ldr	r0, [pc, #336]	@ (8007fc0 <RadioSend+0x1f0>)
 8007e70:	f001 ff92 	bl	8009d98 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	2200      	movs	r2, #0
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fa3e 	bl	80092fc <SUBGRF_SendPayload>
            break;
 8007e80:	e08d      	b.n	8007f9e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007e82:	f002 fbd6 	bl	800a632 <RFW_Is_Init>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d11e      	bne.n	8007eca <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007e8c:	f107 020d 	add.w	r2, r7, #13
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f002 fbe4 	bl	800a662 <RFW_TransmitInit>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10c      	bne.n	8007eba <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007ea0:	7b7a      	ldrb	r2, [r7, #13]
 8007ea2:	4b46      	ldr	r3, [pc, #280]	@ (8007fbc <RadioSend+0x1ec>)
 8007ea4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ea6:	4846      	ldr	r0, [pc, #280]	@ (8007fc0 <RadioSend+0x1f0>)
 8007ea8:	f001 ff76 	bl	8009d98 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007eac:	7b7b      	ldrb	r3, [r7, #13]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fa22 	bl	80092fc <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007eb8:	e071      	b.n	8007f9e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8007eba:	4b42      	ldr	r3, [pc, #264]	@ (8007fc4 <RadioSend+0x1f4>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	2002      	movs	r0, #2
 8007ec2:	f003 ff65 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e073      	b.n	8007fb2 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007eca:	4a3c      	ldr	r2, [pc, #240]	@ (8007fbc <RadioSend+0x1ec>)
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ed0:	483b      	ldr	r0, [pc, #236]	@ (8007fc0 <RadioSend+0x1f0>)
 8007ed2:	f001 ff61 	bl	8009d98 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fa0d 	bl	80092fc <SUBGRF_SendPayload>
            break;
 8007ee2:	e05c      	b.n	8007f9e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007ee4:	4b35      	ldr	r3, [pc, #212]	@ (8007fbc <RadioSend+0x1ec>)
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007eea:	4a34      	ldr	r2, [pc, #208]	@ (8007fbc <RadioSend+0x1ec>)
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ef0:	4833      	ldr	r0, [pc, #204]	@ (8007fc0 <RadioSend+0x1f0>)
 8007ef2:	f001 ff51 	bl	8009d98 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007ef6:	78fb      	ldrb	r3, [r7, #3]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f9fd 	bl	80092fc <SUBGRF_SendPayload>
            break;
 8007f02:	e04c      	b.n	8007f9e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	482f      	ldr	r0, [pc, #188]	@ (8007fc8 <RadioSend+0x1f8>)
 8007f0c:	f000 fcca 	bl	80088a4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007f10:	4b2a      	ldr	r3, [pc, #168]	@ (8007fbc <RadioSend+0x1ec>)
 8007f12:	2202      	movs	r2, #2
 8007f14:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	4b27      	ldr	r3, [pc, #156]	@ (8007fbc <RadioSend+0x1ec>)
 8007f1e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f20:	4827      	ldr	r0, [pc, #156]	@ (8007fc0 <RadioSend+0x1f0>)
 8007f22:	f001 ff39 	bl	8009d98 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007f26:	2100      	movs	r1, #0
 8007f28:	20f1      	movs	r0, #241	@ 0xf1
 8007f2a:	f000 f965 	bl	80081f8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007f2e:	2100      	movs	r1, #0
 8007f30:	20f0      	movs	r0, #240	@ 0xf0
 8007f32:	f000 f961 	bl	80081f8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007f36:	4b21      	ldr	r3, [pc, #132]	@ (8007fbc <RadioSend+0x1ec>)
 8007f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f3a:	2b64      	cmp	r3, #100	@ 0x64
 8007f3c:	d108      	bne.n	8007f50 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007f3e:	2170      	movs	r1, #112	@ 0x70
 8007f40:	20f3      	movs	r0, #243	@ 0xf3
 8007f42:	f000 f959 	bl	80081f8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007f46:	211d      	movs	r1, #29
 8007f48:	20f2      	movs	r0, #242	@ 0xf2
 8007f4a:	f000 f955 	bl	80081f8 <RadioWrite>
 8007f4e:	e007      	b.n	8007f60 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007f50:	21e1      	movs	r1, #225	@ 0xe1
 8007f52:	20f3      	movs	r0, #243	@ 0xf3
 8007f54:	f000 f950 	bl	80081f8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007f58:	2104      	movs	r1, #4
 8007f5a:	20f2      	movs	r0, #242	@ 0xf2
 8007f5c:	f000 f94c 	bl	80081f8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3302      	adds	r3, #2
 8007f6a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007f6c:	89fb      	ldrh	r3, [r7, #14]
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	4619      	mov	r1, r3
 8007f76:	20f4      	movs	r0, #244	@ 0xf4
 8007f78:	f000 f93e 	bl	80081f8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007f7c:	89fb      	ldrh	r3, [r7, #14]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4619      	mov	r1, r3
 8007f82:	20f5      	movs	r0, #245	@ 0xf5
 8007f84:	f000 f938 	bl	80081f8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8007f92:	4619      	mov	r1, r3
 8007f94:	480c      	ldr	r0, [pc, #48]	@ (8007fc8 <RadioSend+0x1f8>)
 8007f96:	f001 f9b1 	bl	80092fc <SUBGRF_SendPayload>
            break;
 8007f9a:	e000      	b.n	8007f9e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007f9c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007f9e:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <RadioSend+0x1ec>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4809      	ldr	r0, [pc, #36]	@ (8007fcc <RadioSend+0x1fc>)
 8007fa6:	f003 fd6b 	bl	800ba80 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007faa:	4808      	ldr	r0, [pc, #32]	@ (8007fcc <RadioSend+0x1fc>)
 8007fac:	f003 fc8a 	bl	800b8c4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000288 	.word	0x20000288
 8007fc0:	20000296 	.word	0x20000296
 8007fc4:	0800c368 	.word	0x0800c368
 8007fc8:	20000184 	.word	0x20000184
 8007fcc:	200002e4 	.word	0x200002e4

08007fd0 <RadioSleep>:

static void RadioSleep( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007fda:	793b      	ldrb	r3, [r7, #4]
 8007fdc:	f043 0304 	orr.w	r3, r3, #4
 8007fe0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007fe2:	7938      	ldrb	r0, [r7, #4]
 8007fe4:	f001 fa66 	bl	80094b4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007fe8:	2002      	movs	r0, #2
 8007fea:	f7f8 fdb7 	bl	8000b5c <HAL_Delay>
}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <RadioStandby>:

static void RadioStandby( void )
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f001 fa8e 	bl	800951c <SUBGRF_SetStandby>
}
 8008000:	bf00      	nop
 8008002:	bd80      	pop	{r7, pc}

08008004 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800800c:	f002 fb11 	bl	800a632 <RFW_Is_Init>
 8008010:	4603      	mov	r3, r0
 8008012:	2b01      	cmp	r3, #1
 8008014:	d102      	bne.n	800801c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008016:	f002 fb34 	bl	800a682 <RFW_ReceiveInit>
 800801a:	e007      	b.n	800802c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800801c:	2300      	movs	r3, #0
 800801e:	2200      	movs	r2, #0
 8008020:	f240 2162 	movw	r1, #610	@ 0x262
 8008024:	f240 2062 	movw	r0, #610	@ 0x262
 8008028:	f001 fc52 	bl	80098d0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d006      	beq.n	8008040 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4811      	ldr	r0, [pc, #68]	@ (800807c <RadioRx+0x78>)
 8008036:	f003 fd23 	bl	800ba80 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800803a:	4810      	ldr	r0, [pc, #64]	@ (800807c <RadioRx+0x78>)
 800803c:	f003 fc42 	bl	800b8c4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008040:	4b0f      	ldr	r3, [pc, #60]	@ (8008080 <RadioRx+0x7c>)
 8008042:	2200      	movs	r2, #0
 8008044:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008046:	4b0e      	ldr	r3, [pc, #56]	@ (8008080 <RadioRx+0x7c>)
 8008048:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f002 f8f6 	bl	800a240 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008054:	4b0a      	ldr	r3, [pc, #40]	@ (8008080 <RadioRx+0x7c>)
 8008056:	785b      	ldrb	r3, [r3, #1]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800805c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008060:	f001 fa98 	bl	8009594 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008064:	e005      	b.n	8008072 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008066:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <RadioRx+0x7c>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	019b      	lsls	r3, r3, #6
 800806c:	4618      	mov	r0, r3
 800806e:	f001 fa91 	bl	8009594 <SUBGRF_SetRx>
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200002fc 	.word	0x200002fc
 8008080:	20000288 	.word	0x20000288

08008084 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800808c:	f002 fad1 	bl	800a632 <RFW_Is_Init>
 8008090:	4603      	mov	r3, r0
 8008092:	2b01      	cmp	r3, #1
 8008094:	d102      	bne.n	800809c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008096:	f002 faf4 	bl	800a682 <RFW_ReceiveInit>
 800809a:	e007      	b.n	80080ac <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800809c:	2300      	movs	r3, #0
 800809e:	2200      	movs	r2, #0
 80080a0:	f240 2162 	movw	r1, #610	@ 0x262
 80080a4:	f240 2062 	movw	r0, #610	@ 0x262
 80080a8:	f001 fc12 	bl	80098d0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d006      	beq.n	80080c0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	4811      	ldr	r0, [pc, #68]	@ (80080fc <RadioRxBoosted+0x78>)
 80080b6:	f003 fce3 	bl	800ba80 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80080ba:	4810      	ldr	r0, [pc, #64]	@ (80080fc <RadioRxBoosted+0x78>)
 80080bc:	f003 fc02 	bl	800b8c4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80080c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008100 <RadioRxBoosted+0x7c>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80080c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008100 <RadioRxBoosted+0x7c>)
 80080c8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f002 f8b6 	bl	800a240 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80080d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008100 <RadioRxBoosted+0x7c>)
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80080dc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80080e0:	f001 fa78 	bl	80095d4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80080e4:	e005      	b.n	80080f2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80080e6:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <RadioRxBoosted+0x7c>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	019b      	lsls	r3, r3, #6
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fa71 	bl	80095d4 <SUBGRF_SetRxBoosted>
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200002fc 	.word	0x200002fc
 8008100:	20000288 	.word	0x20000288

08008104 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	005a      	lsls	r2, r3, #1
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a0c      	ldr	r2, [pc, #48]	@ (8008148 <RadioSetRxDutyCycle+0x44>)
 8008118:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008122:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008126:	f001 fbd3 	bl	80098d0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800812a:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <RadioSetRxDutyCycle+0x44>)
 800812c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f002 f884 	bl	800a240 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fa6e 	bl	800961c <SUBGRF_SetRxDutyCycle>
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20000288 	.word	0x20000288

0800814c <RadioStartCad>:

static void RadioStartCad( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008150:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <RadioStartCad+0x2c>)
 8008152:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f002 f871 	bl	800a240 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8008166:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800816a:	f001 fbb1 	bl	80098d0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800816e:	f001 fa81 	bl	8009674 <SUBGRF_SetCad>
}
 8008172:	bf00      	nop
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000288 	.word	0x20000288

0800817c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
 8008188:	4613      	mov	r3, r2
 800818a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800818c:	883b      	ldrh	r3, [r7, #0]
 800818e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008192:	fb02 f303 	mul.w	r3, r2, r3
 8008196:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fbf5 	bl	8009988 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800819e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 f874 	bl	800a290 <SUBGRF_SetRfTxPower>
 80081a8:	4603      	mov	r3, r0
 80081aa:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80081ac:	210e      	movs	r1, #14
 80081ae:	f640 101f 	movw	r0, #2335	@ 0x91f
 80081b2:	f001 ff37 	bl	800a024 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	2101      	movs	r1, #1
 80081ba:	4618      	mov	r0, r3
 80081bc:	f002 f840 	bl	800a240 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80081c0:	f001 fa66 	bl	8009690 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	4805      	ldr	r0, [pc, #20]	@ (80081dc <RadioSetTxContinuousWave+0x60>)
 80081c8:	f003 fc5a 	bl	800ba80 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <RadioSetTxContinuousWave+0x60>)
 80081ce:	f003 fb79 	bl	800b8c4 <UTIL_TIMER_Start>
}
 80081d2:	bf00      	nop
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200002e4 	.word	0x200002e4

080081e0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80081ea:	f001 fe88 	bl	8009efe <SUBGRF_GetRssiInst>
 80081ee:	4603      	mov	r3, r0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	460a      	mov	r2, r1
 8008202:	80fb      	strh	r3, [r7, #6]
 8008204:	4613      	mov	r3, r2
 8008206:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008208:	797a      	ldrb	r2, [r7, #5]
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f001 ff08 	bl	800a024 <SUBGRF_WriteRegister>
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	4618      	mov	r0, r3
 800822a:	f001 ff1d 	bl	800a068 <SUBGRF_ReadRegister>
 800822e:	4603      	mov	r3, r0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	80fb      	strh	r3, [r7, #6]
 8008244:	4613      	mov	r3, r2
 8008246:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008248:	797b      	ldrb	r3, [r7, #5]
 800824a:	b29a      	uxth	r2, r3
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f001 ff29 	bl	800a0a8 <SUBGRF_WriteRegisters>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	4603      	mov	r3, r0
 8008266:	6039      	str	r1, [r7, #0]
 8008268:	80fb      	strh	r3, [r7, #6]
 800826a:	4613      	mov	r3, r2
 800826c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800826e:	797b      	ldrb	r3, [r7, #5]
 8008270:	b29a      	uxth	r2, r3
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f001 ff38 	bl	800a0ec <SUBGRF_ReadRegisters>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	460a      	mov	r2, r1
 800828e:	71fb      	strb	r3, [r7, #7]
 8008290:	4613      	mov	r3, r2
 8008292:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d10a      	bne.n	80082b0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800829a:	4a0e      	ldr	r2, [pc, #56]	@ (80082d4 <RadioSetMaxPayloadLength+0x50>)
 800829c:	79bb      	ldrb	r3, [r7, #6]
 800829e:	7013      	strb	r3, [r2, #0]
 80082a0:	4b0c      	ldr	r3, [pc, #48]	@ (80082d4 <RadioSetMaxPayloadLength+0x50>)
 80082a2:	781a      	ldrb	r2, [r3, #0]
 80082a4:	4b0c      	ldr	r3, [pc, #48]	@ (80082d8 <RadioSetMaxPayloadLength+0x54>)
 80082a6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082a8:	480c      	ldr	r0, [pc, #48]	@ (80082dc <RadioSetMaxPayloadLength+0x58>)
 80082aa:	f001 fd75 	bl	8009d98 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80082ae:	e00d      	b.n	80082cc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80082b0:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <RadioSetMaxPayloadLength+0x54>)
 80082b2:	7d5b      	ldrb	r3, [r3, #21]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d109      	bne.n	80082cc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80082b8:	4a06      	ldr	r2, [pc, #24]	@ (80082d4 <RadioSetMaxPayloadLength+0x50>)
 80082ba:	79bb      	ldrb	r3, [r7, #6]
 80082bc:	7013      	strb	r3, [r2, #0]
 80082be:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <RadioSetMaxPayloadLength+0x50>)
 80082c0:	781a      	ldrb	r2, [r3, #0]
 80082c2:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <RadioSetMaxPayloadLength+0x54>)
 80082c4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082c6:	4805      	ldr	r0, [pc, #20]	@ (80082dc <RadioSetMaxPayloadLength+0x58>)
 80082c8:	f001 fd66 	bl	8009d98 <SUBGRF_SetPacketParams>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000008 	.word	0x20000008
 80082d8:	20000288 	.word	0x20000288
 80082dc:	20000296 	.word	0x20000296

080082e0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80082ea:	4a13      	ldr	r2, [pc, #76]	@ (8008338 <RadioSetPublicNetwork+0x58>)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	7313      	strb	r3, [r2, #12]
 80082f0:	4b11      	ldr	r3, [pc, #68]	@ (8008338 <RadioSetPublicNetwork+0x58>)
 80082f2:	7b1a      	ldrb	r2, [r3, #12]
 80082f4:	4b10      	ldr	r3, [pc, #64]	@ (8008338 <RadioSetPublicNetwork+0x58>)
 80082f6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80082f8:	2001      	movs	r0, #1
 80082fa:	f7ff f813 	bl	8007324 <RadioSetModem>
    if( enable == true )
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008304:	2134      	movs	r1, #52	@ 0x34
 8008306:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800830a:	f001 fe8b 	bl	800a024 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800830e:	2144      	movs	r1, #68	@ 0x44
 8008310:	f240 7041 	movw	r0, #1857	@ 0x741
 8008314:	f001 fe86 	bl	800a024 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008318:	e009      	b.n	800832e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800831a:	2114      	movs	r1, #20
 800831c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8008320:	f001 fe80 	bl	800a024 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008324:	2124      	movs	r1, #36	@ 0x24
 8008326:	f240 7041 	movw	r0, #1857	@ 0x741
 800832a:	f001 fe7b 	bl	800a024 <SUBGRF_WriteRegister>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000288 	.word	0x20000288

0800833c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008340:	f001 ffda 	bl	800a2f8 <SUBGRF_GetRadioWakeUpTime>
 8008344:	4603      	mov	r3, r0
 8008346:	3303      	adds	r3, #3
}
 8008348:	4618      	mov	r0, r3
 800834a:	bd80      	pop	{r7, pc}

0800834c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008354:	f000 f80e 	bl	8008374 <RadioOnTxTimeoutProcess>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008368:	f000 f818 	bl	800839c <RadioOnRxTimeoutProcess>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008378:	4b07      	ldr	r3, [pc, #28]	@ (8008398 <RadioOnTxTimeoutProcess+0x24>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d008      	beq.n	8008392 <RadioOnTxTimeoutProcess+0x1e>
 8008380:	4b05      	ldr	r3, [pc, #20]	@ (8008398 <RadioOnTxTimeoutProcess+0x24>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800838a:	4b03      	ldr	r3, [pc, #12]	@ (8008398 <RadioOnTxTimeoutProcess+0x24>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4798      	blx	r3
    }
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000284 	.word	0x20000284

0800839c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80083a0:	4b07      	ldr	r3, [pc, #28]	@ (80083c0 <RadioOnRxTimeoutProcess+0x24>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d008      	beq.n	80083ba <RadioOnRxTimeoutProcess+0x1e>
 80083a8:	4b05      	ldr	r3, [pc, #20]	@ (80083c0 <RadioOnRxTimeoutProcess+0x24>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80083b2:	4b03      	ldr	r3, [pc, #12]	@ (80083c0 <RadioOnRxTimeoutProcess+0x24>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	4798      	blx	r3
    }
}
 80083ba:	bf00      	nop
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000284 	.word	0x20000284

080083c4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80083ce:	4a05      	ldr	r2, [pc, #20]	@ (80083e4 <RadioOnDioIrq+0x20>)
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80083d6:	f000 f807 	bl	80083e8 <RadioIrqProcess>
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000288 	.word	0x20000288

080083e8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80083e8:	b5b0      	push	{r4, r5, r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80083f6:	4ba8      	ldr	r3, [pc, #672]	@ (8008698 <RadioIrqProcess+0x2b0>)
 80083f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80083fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008400:	f000 810d 	beq.w	800861e <RadioIrqProcess+0x236>
 8008404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008408:	f300 81e8 	bgt.w	80087dc <RadioIrqProcess+0x3f4>
 800840c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008410:	f000 80f1 	beq.w	80085f6 <RadioIrqProcess+0x20e>
 8008414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008418:	f300 81e0 	bgt.w	80087dc <RadioIrqProcess+0x3f4>
 800841c:	2b80      	cmp	r3, #128	@ 0x80
 800841e:	f000 80d6 	beq.w	80085ce <RadioIrqProcess+0x1e6>
 8008422:	2b80      	cmp	r3, #128	@ 0x80
 8008424:	f300 81da 	bgt.w	80087dc <RadioIrqProcess+0x3f4>
 8008428:	2b20      	cmp	r3, #32
 800842a:	dc49      	bgt.n	80084c0 <RadioIrqProcess+0xd8>
 800842c:	2b00      	cmp	r3, #0
 800842e:	f340 81d5 	ble.w	80087dc <RadioIrqProcess+0x3f4>
 8008432:	3b01      	subs	r3, #1
 8008434:	2b1f      	cmp	r3, #31
 8008436:	f200 81d1 	bhi.w	80087dc <RadioIrqProcess+0x3f4>
 800843a:	a201      	add	r2, pc, #4	@ (adr r2, 8008440 <RadioIrqProcess+0x58>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	080084c9 	.word	0x080084c9
 8008444:	08008503 	.word	0x08008503
 8008448:	080087dd 	.word	0x080087dd
 800844c:	080086b9 	.word	0x080086b9
 8008450:	080087dd 	.word	0x080087dd
 8008454:	080087dd 	.word	0x080087dd
 8008458:	080087dd 	.word	0x080087dd
 800845c:	08008735 	.word	0x08008735
 8008460:	080087dd 	.word	0x080087dd
 8008464:	080087dd 	.word	0x080087dd
 8008468:	080087dd 	.word	0x080087dd
 800846c:	080087dd 	.word	0x080087dd
 8008470:	080087dd 	.word	0x080087dd
 8008474:	080087dd 	.word	0x080087dd
 8008478:	080087dd 	.word	0x080087dd
 800847c:	08008751 	.word	0x08008751
 8008480:	080087dd 	.word	0x080087dd
 8008484:	080087dd 	.word	0x080087dd
 8008488:	080087dd 	.word	0x080087dd
 800848c:	080087dd 	.word	0x080087dd
 8008490:	080087dd 	.word	0x080087dd
 8008494:	080087dd 	.word	0x080087dd
 8008498:	080087dd 	.word	0x080087dd
 800849c:	080087dd 	.word	0x080087dd
 80084a0:	080087dd 	.word	0x080087dd
 80084a4:	080087dd 	.word	0x080087dd
 80084a8:	080087dd 	.word	0x080087dd
 80084ac:	080087dd 	.word	0x080087dd
 80084b0:	080087dd 	.word	0x080087dd
 80084b4:	080087dd 	.word	0x080087dd
 80084b8:	080087dd 	.word	0x080087dd
 80084bc:	0800875f 	.word	0x0800875f
 80084c0:	2b40      	cmp	r3, #64	@ 0x40
 80084c2:	f000 816d 	beq.w	80087a0 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80084c6:	e189      	b.n	80087dc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80084c8:	4874      	ldr	r0, [pc, #464]	@ (800869c <RadioIrqProcess+0x2b4>)
 80084ca:	f003 fa69 	bl	800b9a0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80084ce:	2000      	movs	r0, #0
 80084d0:	f001 f824 	bl	800951c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80084d4:	f002 f8b4 	bl	800a640 <RFW_Is_LongPacketModeEnabled>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80084de:	f002 f8d8 	bl	800a692 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80084e2:	4b6f      	ldr	r3, [pc, #444]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 817a 	beq.w	80087e0 <RadioIrqProcess+0x3f8>
 80084ec:	4b6c      	ldr	r3, [pc, #432]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8174 	beq.w	80087e0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80084f8:	4b69      	ldr	r3, [pc, #420]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4798      	blx	r3
        break;
 8008500:	e16e      	b.n	80087e0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8008502:	4868      	ldr	r0, [pc, #416]	@ (80086a4 <RadioIrqProcess+0x2bc>)
 8008504:	f003 fa4c 	bl	800b9a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008508:	4b63      	ldr	r3, [pc, #396]	@ (8008698 <RadioIrqProcess+0x2b0>)
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	f083 0301 	eor.w	r3, r3, #1
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d014      	beq.n	8008540 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008516:	2000      	movs	r0, #0
 8008518:	f001 f800 	bl	800951c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800851c:	2100      	movs	r1, #0
 800851e:	f640 1002 	movw	r0, #2306	@ 0x902
 8008522:	f001 fd7f 	bl	800a024 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008526:	f640 1044 	movw	r0, #2372	@ 0x944
 800852a:	f001 fd9d 	bl	800a068 <SUBGRF_ReadRegister>
 800852e:	4603      	mov	r3, r0
 8008530:	f043 0302 	orr.w	r3, r3, #2
 8008534:	b2db      	uxtb	r3, r3
 8008536:	4619      	mov	r1, r3
 8008538:	f640 1044 	movw	r0, #2372	@ 0x944
 800853c:	f001 fd72 	bl	800a024 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008540:	1dfb      	adds	r3, r7, #7
 8008542:	22ff      	movs	r2, #255	@ 0xff
 8008544:	4619      	mov	r1, r3
 8008546:	4858      	ldr	r0, [pc, #352]	@ (80086a8 <RadioIrqProcess+0x2c0>)
 8008548:	f000 feb6 	bl	80092b8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800854c:	4857      	ldr	r0, [pc, #348]	@ (80086ac <RadioIrqProcess+0x2c4>)
 800854e:	f001 fd17 	bl	8009f80 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008552:	4b53      	ldr	r3, [pc, #332]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 8144 	beq.w	80087e4 <RadioIrqProcess+0x3fc>
 800855c:	4b50      	ldr	r3, [pc, #320]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 813e 	beq.w	80087e4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8008568:	4b4b      	ldr	r3, [pc, #300]	@ (8008698 <RadioIrqProcess+0x2b0>)
 800856a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800856e:	2b01      	cmp	r3, #1
 8008570:	d10e      	bne.n	8008590 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008572:	4b4b      	ldr	r3, [pc, #300]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689c      	ldr	r4, [r3, #8]
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	4619      	mov	r1, r3
 800857c:	4b46      	ldr	r3, [pc, #280]	@ (8008698 <RadioIrqProcess+0x2b0>)
 800857e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8008582:	461a      	mov	r2, r3
 8008584:	4b44      	ldr	r3, [pc, #272]	@ (8008698 <RadioIrqProcess+0x2b0>)
 8008586:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800858a:	4847      	ldr	r0, [pc, #284]	@ (80086a8 <RadioIrqProcess+0x2c0>)
 800858c:	47a0      	blx	r4
                break;
 800858e:	e01d      	b.n	80085cc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008590:	4b41      	ldr	r3, [pc, #260]	@ (8008698 <RadioIrqProcess+0x2b0>)
 8008592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008594:	463a      	mov	r2, r7
 8008596:	4611      	mov	r1, r2
 8008598:	4618      	mov	r0, r3
 800859a:	f001 ff9f 	bl	800a4dc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800859e:	4b40      	ldr	r3, [pc, #256]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689c      	ldr	r4, [r3, #8]
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008698 <RadioIrqProcess+0x2b0>)
 80085aa:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80085ae:	4618      	mov	r0, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80085b6:	4a3e      	ldr	r2, [pc, #248]	@ (80086b0 <RadioIrqProcess+0x2c8>)
 80085b8:	fb82 5203 	smull	r5, r2, r2, r3
 80085bc:	1192      	asrs	r2, r2, #6
 80085be:	17db      	asrs	r3, r3, #31
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	b25b      	sxtb	r3, r3
 80085c4:	4602      	mov	r2, r0
 80085c6:	4838      	ldr	r0, [pc, #224]	@ (80086a8 <RadioIrqProcess+0x2c0>)
 80085c8:	47a0      	blx	r4
                break;
 80085ca:	bf00      	nop
        break;
 80085cc:	e10a      	b.n	80087e4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80085ce:	2000      	movs	r0, #0
 80085d0:	f000 ffa4 	bl	800951c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80085d4:	4b32      	ldr	r3, [pc, #200]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8105 	beq.w	80087e8 <RadioIrqProcess+0x400>
 80085de:	4b30      	ldr	r3, [pc, #192]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 80ff 	beq.w	80087e8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80085ea:	4b2d      	ldr	r3, [pc, #180]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	2000      	movs	r0, #0
 80085f2:	4798      	blx	r3
        break;
 80085f4:	e0f8      	b.n	80087e8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80085f6:	2000      	movs	r0, #0
 80085f8:	f000 ff90 	bl	800951c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80085fc:	4b28      	ldr	r3, [pc, #160]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 80f3 	beq.w	80087ec <RadioIrqProcess+0x404>
 8008606:	4b26      	ldr	r3, [pc, #152]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80ed 	beq.w	80087ec <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8008612:	4b23      	ldr	r3, [pc, #140]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	2001      	movs	r0, #1
 800861a:	4798      	blx	r3
        break;
 800861c:	e0e6      	b.n	80087ec <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800861e:	4b25      	ldr	r3, [pc, #148]	@ (80086b4 <RadioIrqProcess+0x2cc>)
 8008620:	2201      	movs	r2, #1
 8008622:	2100      	movs	r1, #0
 8008624:	2002      	movs	r0, #2
 8008626:	f003 fbb3 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800862a:	f000 fe2b 	bl	8009284 <SUBGRF_GetOperatingMode>
 800862e:	4603      	mov	r3, r0
 8008630:	2b04      	cmp	r3, #4
 8008632:	d115      	bne.n	8008660 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8008634:	4819      	ldr	r0, [pc, #100]	@ (800869c <RadioIrqProcess+0x2b4>)
 8008636:	f003 f9b3 	bl	800b9a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800863a:	2000      	movs	r0, #0
 800863c:	f000 ff6e 	bl	800951c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008640:	4b17      	ldr	r3, [pc, #92]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 80d3 	beq.w	80087f0 <RadioIrqProcess+0x408>
 800864a:	4b15      	ldr	r3, [pc, #84]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80cd 	beq.w	80087f0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8008656:	4b12      	ldr	r3, [pc, #72]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4798      	blx	r3
        break;
 800865e:	e0c7      	b.n	80087f0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008660:	f000 fe10 	bl	8009284 <SUBGRF_GetOperatingMode>
 8008664:	4603      	mov	r3, r0
 8008666:	2b05      	cmp	r3, #5
 8008668:	f040 80c2 	bne.w	80087f0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 800866c:	480d      	ldr	r0, [pc, #52]	@ (80086a4 <RadioIrqProcess+0x2bc>)
 800866e:	f003 f997 	bl	800b9a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008672:	2000      	movs	r0, #0
 8008674:	f000 ff52 	bl	800951c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 80b7 	beq.w	80087f0 <RadioIrqProcess+0x408>
 8008682:	4b07      	ldr	r3, [pc, #28]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 80b1 	beq.w	80087f0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800868e:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <RadioIrqProcess+0x2b8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4798      	blx	r3
        break;
 8008696:	e0ab      	b.n	80087f0 <RadioIrqProcess+0x408>
 8008698:	20000288 	.word	0x20000288
 800869c:	200002e4 	.word	0x200002e4
 80086a0:	20000284 	.word	0x20000284
 80086a4:	200002fc 	.word	0x200002fc
 80086a8:	20000184 	.word	0x20000184
 80086ac:	200002ac 	.word	0x200002ac
 80086b0:	10624dd3 	.word	0x10624dd3
 80086b4:	0800c380 	.word	0x0800c380
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80086b8:	4b54      	ldr	r3, [pc, #336]	@ (800880c <RadioIrqProcess+0x424>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	2100      	movs	r1, #0
 80086be:	2002      	movs	r0, #2
 80086c0:	f003 fb66 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80086c4:	4b52      	ldr	r3, [pc, #328]	@ (8008810 <RadioIrqProcess+0x428>)
 80086c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 8093 	beq.w	80087f4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80086ce:	4a51      	ldr	r2, [pc, #324]	@ (8008814 <RadioIrqProcess+0x42c>)
 80086d0:	4b4f      	ldr	r3, [pc, #316]	@ (8008810 <RadioIrqProcess+0x428>)
 80086d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	4619      	mov	r1, r3
 80086da:	f640 1003 	movw	r0, #2307	@ 0x903
 80086de:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80086e0:	4a4c      	ldr	r2, [pc, #304]	@ (8008814 <RadioIrqProcess+0x42c>)
 80086e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008810 <RadioIrqProcess+0x428>)
 80086e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	4619      	mov	r1, r3
 80086ec:	f640 1004 	movw	r0, #2308	@ 0x904
 80086f0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80086f2:	4a48      	ldr	r2, [pc, #288]	@ (8008814 <RadioIrqProcess+0x42c>)
 80086f4:	4b46      	ldr	r3, [pc, #280]	@ (8008810 <RadioIrqProcess+0x428>)
 80086f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	4619      	mov	r1, r3
 80086fc:	f640 1005 	movw	r0, #2309	@ 0x905
 8008700:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8008702:	4c44      	ldr	r4, [pc, #272]	@ (8008814 <RadioIrqProcess+0x42c>)
 8008704:	4b44      	ldr	r3, [pc, #272]	@ (8008818 <RadioIrqProcess+0x430>)
 8008706:	f640 1002 	movw	r0, #2306	@ 0x902
 800870a:	4798      	blx	r3
 800870c:	4603      	mov	r3, r0
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	4619      	mov	r1, r3
 8008716:	f640 1002 	movw	r0, #2306	@ 0x902
 800871a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800871c:	4b3c      	ldr	r3, [pc, #240]	@ (8008810 <RadioIrqProcess+0x428>)
 800871e:	2200      	movs	r2, #0
 8008720:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008722:	2300      	movs	r3, #0
 8008724:	2200      	movs	r2, #0
 8008726:	f240 2162 	movw	r1, #610	@ 0x262
 800872a:	f240 2062 	movw	r0, #610	@ 0x262
 800872e:	f001 f8cf 	bl	80098d0 <SUBGRF_SetDioIrqParams>
        break;
 8008732:	e05f      	b.n	80087f4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8008734:	4b39      	ldr	r3, [pc, #228]	@ (800881c <RadioIrqProcess+0x434>)
 8008736:	2201      	movs	r2, #1
 8008738:	2100      	movs	r1, #0
 800873a:	2002      	movs	r0, #2
 800873c:	f003 fb28 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8008740:	f001 ff77 	bl	800a632 <RFW_Is_Init>
 8008744:	4603      	mov	r3, r0
 8008746:	2b01      	cmp	r3, #1
 8008748:	d156      	bne.n	80087f8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 800874a:	f001 ffa8 	bl	800a69e <RFW_ReceivePayload>
        break;
 800874e:	e053      	b.n	80087f8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8008750:	4b33      	ldr	r3, [pc, #204]	@ (8008820 <RadioIrqProcess+0x438>)
 8008752:	2201      	movs	r2, #1
 8008754:	2100      	movs	r1, #0
 8008756:	2002      	movs	r0, #2
 8008758:	f003 fb1a 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800875c:	e051      	b.n	8008802 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 800875e:	4831      	ldr	r0, [pc, #196]	@ (8008824 <RadioIrqProcess+0x43c>)
 8008760:	f003 f91e 	bl	800b9a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008764:	4b2a      	ldr	r3, [pc, #168]	@ (8008810 <RadioIrqProcess+0x428>)
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	f083 0301 	eor.w	r3, r3, #1
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8008772:	2000      	movs	r0, #0
 8008774:	f000 fed2 	bl	800951c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008778:	4b2b      	ldr	r3, [pc, #172]	@ (8008828 <RadioIrqProcess+0x440>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d03d      	beq.n	80087fc <RadioIrqProcess+0x414>
 8008780:	4b29      	ldr	r3, [pc, #164]	@ (8008828 <RadioIrqProcess+0x440>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d038      	beq.n	80087fc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 800878a:	4b27      	ldr	r3, [pc, #156]	@ (8008828 <RadioIrqProcess+0x440>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8008792:	4b26      	ldr	r3, [pc, #152]	@ (800882c <RadioIrqProcess+0x444>)
 8008794:	2201      	movs	r2, #1
 8008796:	2100      	movs	r1, #0
 8008798:	2002      	movs	r0, #2
 800879a:	f003 faf9 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800879e:	e02d      	b.n	80087fc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80087a0:	4b23      	ldr	r3, [pc, #140]	@ (8008830 <RadioIrqProcess+0x448>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	2100      	movs	r1, #0
 80087a6:	2002      	movs	r0, #2
 80087a8:	f003 faf2 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80087ac:	4b18      	ldr	r3, [pc, #96]	@ (8008810 <RadioIrqProcess+0x428>)
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	f083 0301 	eor.w	r3, r3, #1
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80087ba:	2000      	movs	r0, #0
 80087bc:	f000 feae 	bl	800951c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80087c0:	4b19      	ldr	r3, [pc, #100]	@ (8008828 <RadioIrqProcess+0x440>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01b      	beq.n	8008800 <RadioIrqProcess+0x418>
 80087c8:	4b17      	ldr	r3, [pc, #92]	@ (8008828 <RadioIrqProcess+0x440>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d016      	beq.n	8008800 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80087d2:	4b15      	ldr	r3, [pc, #84]	@ (8008828 <RadioIrqProcess+0x440>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	4798      	blx	r3
        break;
 80087da:	e011      	b.n	8008800 <RadioIrqProcess+0x418>
        break;
 80087dc:	bf00      	nop
 80087de:	e010      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087e0:	bf00      	nop
 80087e2:	e00e      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087e4:	bf00      	nop
 80087e6:	e00c      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087e8:	bf00      	nop
 80087ea:	e00a      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087ec:	bf00      	nop
 80087ee:	e008      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087f0:	bf00      	nop
 80087f2:	e006      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087f4:	bf00      	nop
 80087f6:	e004      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087f8:	bf00      	nop
 80087fa:	e002      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 80087fc:	bf00      	nop
 80087fe:	e000      	b.n	8008802 <RadioIrqProcess+0x41a>
        break;
 8008800:	bf00      	nop
    }
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bdb0      	pop	{r4, r5, r7, pc}
 800880a:	bf00      	nop
 800880c:	0800c394 	.word	0x0800c394
 8008810:	20000288 	.word	0x20000288
 8008814:	080081f9 	.word	0x080081f9
 8008818:	0800821d 	.word	0x0800821d
 800881c:	0800c3a0 	.word	0x0800c3a0
 8008820:	0800c3ac 	.word	0x0800c3ac
 8008824:	200002fc 	.word	0x200002fc
 8008828:	20000284 	.word	0x20000284
 800882c:	0800c3b8 	.word	0x0800c3b8
 8008830:	0800c3c4 	.word	0x0800c3c4

08008834 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008838:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <RadioTxPrbs+0x2c>)
 800883a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800883e:	2101      	movs	r1, #1
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fcfd 	bl	800a240 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8008846:	4b07      	ldr	r3, [pc, #28]	@ (8008864 <RadioTxPrbs+0x30>)
 8008848:	212d      	movs	r1, #45	@ 0x2d
 800884a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800884e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008850:	f000 ff27 	bl	80096a2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008854:	4804      	ldr	r0, [pc, #16]	@ (8008868 <RadioTxPrbs+0x34>)
 8008856:	f000 fe7d 	bl	8009554 <SUBGRF_SetTx>
}
 800885a:	bf00      	nop
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000288 	.word	0x20000288
 8008864:	080081f9 	.word	0x080081f9
 8008868:	000fffff 	.word	0x000fffff

0800886c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800887a:	4618      	mov	r0, r3
 800887c:	f001 fd08 	bl	800a290 <SUBGRF_SetRfTxPower>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008884:	210e      	movs	r1, #14
 8008886:	f640 101f 	movw	r0, #2335	@ 0x91f
 800888a:	f001 fbcb 	bl	800a024 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2101      	movs	r1, #1
 8008892:	4618      	mov	r0, r3
 8008894:	f001 fcd4 	bl	800a240 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008898:	f000 fefa 	bl	8009690 <SUBGRF_SetTxContinuousWave>
}
 800889c:	bf00      	nop
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b089      	sub	sp, #36	@ 0x24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80088ba:	2300      	movs	r3, #0
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	e011      	b.n	80088e4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	4413      	add	r3, r2
 80088c6:	781a      	ldrb	r2, [r3, #0]
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	440b      	add	r3, r1
 80088ce:	43d2      	mvns	r2, r2
 80088d0:	b2d2      	uxtb	r2, r2
 80088d2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4413      	add	r3, r2
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	3301      	adds	r3, #1
 80088e2:	61bb      	str	r3, [r7, #24]
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	dbe9      	blt.n	80088c0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
 80088f0:	e049      	b.n	8008986 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	425a      	negs	r2, r3
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	f002 0207 	and.w	r2, r2, #7
 80088fe:	bf58      	it	pl
 8008900:	4253      	negpl	r3, r2
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f1c3 0307 	rsb	r3, r3, #7
 8008908:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	da00      	bge.n	8008912 <payload_integration+0x6e>
 8008910:	3307      	adds	r3, #7
 8008912:	10db      	asrs	r3, r3, #3
 8008914:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	3301      	adds	r3, #1
 800891a:	425a      	negs	r2, r3
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	f002 0207 	and.w	r2, r2, #7
 8008924:	bf58      	it	pl
 8008926:	4253      	negpl	r3, r2
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f1c3 0307 	rsb	r3, r3, #7
 800892e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	3301      	adds	r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	da00      	bge.n	800893a <payload_integration+0x96>
 8008938:	3307      	adds	r3, #7
 800893a:	10db      	asrs	r3, r3, #3
 800893c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800893e:	7dbb      	ldrb	r3, [r7, #22]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	4413      	add	r3, r2
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	fa42 f303 	asr.w	r3, r2, r3
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008956:	7ffa      	ldrb	r2, [r7, #31]
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	4053      	eors	r3, r2
 800895c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800895e:	7d3b      	ldrb	r3, [r7, #20]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	b25a      	sxtb	r2, r3
 8008968:	7ff9      	ldrb	r1, [r7, #31]
 800896a:	7d7b      	ldrb	r3, [r7, #21]
 800896c:	fa01 f303 	lsl.w	r3, r1, r3
 8008970:	b25b      	sxtb	r3, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	b259      	sxtb	r1, r3
 8008976:	7d3b      	ldrb	r3, [r7, #20]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	b2ca      	uxtb	r2, r1
 800897e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	3301      	adds	r3, #1
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	dbb0      	blt.n	80088f2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008990:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008994:	01db      	lsls	r3, r3, #7
 8008996:	b25a      	sxtb	r2, r3
 8008998:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800899c:	019b      	lsls	r3, r3, #6
 800899e:	b25b      	sxtb	r3, r3
 80089a0:	4313      	orrs	r3, r2
 80089a2:	b25b      	sxtb	r3, r3
 80089a4:	7ffa      	ldrb	r2, [r7, #31]
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	d101      	bne.n	80089ae <payload_integration+0x10a>
 80089aa:	2220      	movs	r2, #32
 80089ac:	e000      	b.n	80089b0 <payload_integration+0x10c>
 80089ae:	2200      	movs	r2, #0
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b259      	sxtb	r1, r3
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	b2ca      	uxtb	r2, r1
 80089bc:	701a      	strb	r2, [r3, #0]
}
 80089be:	bf00      	nop
 80089c0:	3724      	adds	r7, #36	@ 0x24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08c      	sub	sp, #48	@ 0x30
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80089dc:	f107 0320 	add.w	r3, r7, #32
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80089e6:	f001 fe1e 	bl	800a626 <RFW_DeInit>

    if( rxContinuous != 0 )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bf14      	ite	ne
 80089fa:	2301      	movne	r3, #1
 80089fc:	2300      	moveq	r3, #0
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	4ba3      	ldr	r3, [pc, #652]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008a02:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <RadioSetRxGenericConfig+0x4a>
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	f000 80dc 	beq.w	8008bc8 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008a10:	e195      	b.n	8008d3e <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <RadioSetRxGenericConfig+0x5a>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <RadioSetRxGenericConfig+0x60>
            return -1;
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295
 8008a26:	e18b      	b.n	8008d40 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	7f9b      	ldrb	r3, [r3, #30]
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d902      	bls.n	8008a36 <RadioSetRxGenericConfig+0x6e>
            return -1;
 8008a30:	f04f 33ff 	mov.w	r3, #4294967295
 8008a34:	e184      	b.n	8008d40 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6919      	ldr	r1, [r3, #16]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	7f9b      	ldrb	r3, [r3, #30]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f107 0320 	add.w	r3, r7, #32
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 fa57 	bl	800aef8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bf14      	ite	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	2300      	moveq	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fe2b 	bl	80096b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008a5e:	4b8c      	ldr	r3, [pc, #560]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	4a89      	ldr	r2, [pc, #548]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008a6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008a74:	4b86      	ldr	r3, [pc, #536]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008a76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 fd04 	bl	800a48c <SUBGRF_GetFskBandwidthRegValue>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	4b81      	ldr	r3, [pc, #516]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008a8e:	4b80      	ldr	r3, [pc, #512]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008aa0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	7fda      	ldrb	r2, [r3, #31]
 8008aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008aa8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	7f9b      	ldrb	r3, [r3, #30]
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	4b77      	ldr	r3, [pc, #476]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008ab4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008abc:	4b74      	ldr	r3, [pc, #464]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008abe:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008ad2:	759a      	strb	r2, [r3, #22]
 8008ad4:	e00b      	b.n	8008aee <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d103      	bne.n	8008ae8 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008ae2:	22ff      	movs	r2, #255	@ 0xff
 8008ae4:	759a      	strb	r2, [r3, #22]
 8008ae6:	e002      	b.n	8008aee <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008ae8:	4b69      	ldr	r3, [pc, #420]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008aea:	22ff      	movs	r2, #255	@ 0xff
 8008aec:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d004      	beq.n	8008b02 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d12d      	bne.n	8008b5e <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008b08:	2bf1      	cmp	r3, #241	@ 0xf1
 8008b0a:	d00c      	beq.n	8008b26 <RadioSetRxGenericConfig+0x15e>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008b12:	2bf2      	cmp	r3, #242	@ 0xf2
 8008b14:	d007      	beq.n	8008b26 <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d002      	beq.n	8008b26 <RadioSetRxGenericConfig+0x15e>
                return -1;
 8008b20:	f04f 33ff 	mov.w	r3, #4294967295
 8008b24:	e10c      	b.n	8008d40 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8008b26:	2300      	movs	r3, #0
 8008b28:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008b2e:	4b59      	ldr	r3, [pc, #356]	@ (8008c94 <RadioSetRxGenericConfig+0x2cc>)
 8008b30:	6819      	ldr	r1, [r3, #0]
 8008b32:	f107 0314 	add.w	r3, r7, #20
 8008b36:	4a58      	ldr	r2, [pc, #352]	@ (8008c98 <RadioSetRxGenericConfig+0x2d0>)
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 fd67 	bl	800a60c <RFW_Init>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <RadioSetRxGenericConfig+0x182>
                return -1;
 8008b44:	f04f 33ff 	mov.w	r3, #4294967295
 8008b48:	e0fa      	b.n	8008d40 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008b4a:	4b51      	ldr	r3, [pc, #324]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008b50:	4b4f      	ldr	r3, [pc, #316]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008b56:	4b4e      	ldr	r3, [pc, #312]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	755a      	strb	r2, [r3, #21]
        {
 8008b5c:	e00e      	b.n	8008b7c <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8008b64:	4b4a      	ldr	r3, [pc, #296]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008b66:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8008b6e:	4b48      	ldr	r3, [pc, #288]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008b70:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008b78:	4b45      	ldr	r3, [pc, #276]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008b7a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008b7c:	f7ff fa3b 	bl	8007ff6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008b80:	2000      	movs	r0, #0
 8008b82:	f7fe fbcf 	bl	8007324 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b86:	4845      	ldr	r0, [pc, #276]	@ (8008c9c <RadioSetRxGenericConfig+0x2d4>)
 8008b88:	f001 f838 	bl	8009bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b8c:	4844      	ldr	r0, [pc, #272]	@ (8008ca0 <RadioSetRxGenericConfig+0x2d8>)
 8008b8e:	f001 f903 	bl	8009d98 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008b92:	f107 0320 	add.w	r3, r7, #32
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fbc3 	bl	8009322 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	8b9b      	ldrh	r3, [r3, #28]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fc0d 	bl	80093c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	8b1b      	ldrh	r3, [r3, #24]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fbe8 	bl	8009380 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008bb6:	fb03 f202 	mul.w	r2, r3, r2
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	4a33      	ldr	r2, [pc, #204]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008bc4:	6093      	str	r3, [r2, #8]
        break;
 8008bc6:	e0ba      	b.n	8008d3e <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <RadioSetRxGenericConfig+0x20e>
            return -1;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	e0b4      	b.n	8008d40 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d105      	bne.n	8008bec <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008bea:	e002      	b.n	8008bf2 <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 8008bec:	23ff      	movs	r3, #255	@ 0xff
 8008bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	bf14      	ite	ne
 8008bfa:	2301      	movne	r3, #1
 8008bfc:	2300      	moveq	r3, #0
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fd57 	bl	80096b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fd61 	bl	80096d2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008c10:	4b1f      	ldr	r3, [pc, #124]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8008c2a:	4b19      	ldr	r3, [pc, #100]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8008c36:	4b16      	ldr	r3, [pc, #88]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c38:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d010      	beq.n	8008c68 <RadioSetRxGenericConfig+0x2a0>
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	dc2c      	bgt.n	8008ca4 <RadioSetRxGenericConfig+0x2dc>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <RadioSetRxGenericConfig+0x28c>
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d005      	beq.n	8008c5e <RadioSetRxGenericConfig+0x296>
            break;
 8008c52:	e027      	b.n	8008ca4 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008c54:	4b0e      	ldr	r3, [pc, #56]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008c5c:	e023      	b.n	8008ca6 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008c66:	e01e      	b.n	8008ca6 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008c6e:	2b0b      	cmp	r3, #11
 8008c70:	d004      	beq.n	8008c7c <RadioSetRxGenericConfig+0x2b4>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008c78:	2b0c      	cmp	r3, #12
 8008c7a:	d104      	bne.n	8008c86 <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008c7c:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008c84:	e00f      	b.n	8008ca6 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008c86:	4b02      	ldr	r3, [pc, #8]	@ (8008c90 <RadioSetRxGenericConfig+0x2c8>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008c8e:	e00a      	b.n	8008ca6 <RadioSetRxGenericConfig+0x2de>
 8008c90:	20000288 	.word	0x20000288
 8008c94:	20000284 	.word	0x20000284
 8008c98:	200002fc 	.word	0x200002fc
 8008c9c:	200002c0 	.word	0x200002c0
 8008ca0:	20000296 	.word	0x20000296
            break;
 8008ca4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008ca6:	4b28      	ldr	r3, [pc, #160]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008ca8:	2201      	movs	r2, #1
 8008caa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8008cb0:	4b25      	ldr	r3, [pc, #148]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008cb2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8008cba:	4b23      	ldr	r3, [pc, #140]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008cbc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008cbe:	4a22      	ldr	r2, [pc, #136]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cc4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8008ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008cce:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8008cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008cda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8008cde:	f7ff f98a 	bl	8007ff6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	f7fe fb1e 	bl	8007324 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008ce8:	4818      	ldr	r0, [pc, #96]	@ (8008d4c <RadioSetRxGenericConfig+0x384>)
 8008cea:	f000 ff87 	bl	8009bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cee:	4818      	ldr	r0, [pc, #96]	@ (8008d50 <RadioSetRxGenericConfig+0x388>)
 8008cf0:	f001 f852 	bl	8009d98 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008cf4:	4b14      	ldr	r3, [pc, #80]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d10d      	bne.n	8008d1a <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008cfe:	f240 7036 	movw	r0, #1846	@ 0x736
 8008d02:	f001 f9b1 	bl	800a068 <SUBGRF_ReadRegister>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f023 0304 	bic.w	r3, r3, #4
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	4619      	mov	r1, r3
 8008d10:	f240 7036 	movw	r0, #1846	@ 0x736
 8008d14:	f001 f986 	bl	800a024 <SUBGRF_WriteRegister>
 8008d18:	e00c      	b.n	8008d34 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008d1a:	f240 7036 	movw	r0, #1846	@ 0x736
 8008d1e:	f001 f9a3 	bl	800a068 <SUBGRF_ReadRegister>
 8008d22:	4603      	mov	r3, r0
 8008d24:	f043 0304 	orr.w	r3, r3, #4
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f240 7036 	movw	r0, #1846	@ 0x736
 8008d30:	f001 f978 	bl	800a024 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008d34:	4b04      	ldr	r3, [pc, #16]	@ (8008d48 <RadioSetRxGenericConfig+0x380>)
 8008d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d3a:	609a      	str	r2, [r3, #8]
        break;
 8008d3c:	bf00      	nop
    }
    return status;
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3730      	adds	r7, #48	@ 0x30
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20000288 	.word	0x20000288
 8008d4c:	200002c0 	.word	0x200002c0
 8008d50:	20000296 	.word	0x20000296

08008d54 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08e      	sub	sp, #56	@ 0x38
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607b      	str	r3, [r7, #4]
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
 8008d62:	4613      	mov	r3, r2
 8008d64:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008d70:	f001 fc59 	bl	800a626 <RFW_DeInit>
    switch( modem )
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	f200 8205 	bhi.w	8009186 <RadioSetTxGenericConfig+0x432>
 8008d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <RadioSetTxGenericConfig+0x30>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008f09 	.word	0x08008f09
 8008d88:	08009051 	.word	0x08009051
 8008d8c:	08009149 	.word	0x08009149
 8008d90:	08008d95 	.word	0x08008d95
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	7c9b      	ldrb	r3, [r3, #18]
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d902      	bls.n	8008da2 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	e206      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6899      	ldr	r1, [r3, #8]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	7c9b      	ldrb	r3, [r3, #18]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008db0:	4618      	mov	r0, r3
 8008db2:	f002 f8a1 	bl	800aef8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	e1f5      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d813      	bhi.n	8008df8 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008dd6:	4b99      	ldr	r3, [pc, #612]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008dd8:	2203      	movs	r2, #3
 8008dda:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008ddc:	4b97      	ldr	r3, [pc, #604]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008dde:	2203      	movs	r2, #3
 8008de0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a94      	ldr	r2, [pc, #592]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008dea:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	7cda      	ldrb	r2, [r3, #19]
 8008df0:	4b92      	ldr	r3, [pc, #584]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008df6:	e017      	b.n	8008e28 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008e04:	4b8d      	ldr	r3, [pc, #564]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a8a      	ldr	r2, [pc, #552]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e12:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	7cda      	ldrb	r2, [r3, #19]
 8008e18:	4b88      	ldr	r3, [pc, #544]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	089b      	lsrs	r3, r3, #2
 8008e24:	4a85      	ldr	r2, [pc, #532]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e26:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	4b82      	ldr	r3, [pc, #520]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e34:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008e36:	4b81      	ldr	r3, [pc, #516]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e38:	2204      	movs	r2, #4
 8008e3a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	7c9b      	ldrb	r3, [r3, #18]
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	4b7d      	ldr	r3, [pc, #500]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e46:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008e48:	4b7c      	ldr	r3, [pc, #496]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	7d9b      	ldrb	r3, [r3, #22]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d003      	beq.n	8008e5e <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	7d1b      	ldrb	r3, [r3, #20]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d12b      	bne.n	8008eb6 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	7d5b      	ldrb	r3, [r3, #21]
 8008e62:	2bf1      	cmp	r3, #241	@ 0xf1
 8008e64:	d00a      	beq.n	8008e7c <RadioSetTxGenericConfig+0x128>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	7d5b      	ldrb	r3, [r3, #21]
 8008e6a:	2bf2      	cmp	r3, #242	@ 0xf2
 8008e6c:	d006      	beq.n	8008e7c <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	7d5b      	ldrb	r3, [r3, #21]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d002      	beq.n	8008e7c <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295
 8008e7a:	e199      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008e80:	2301      	movs	r3, #1
 8008e82:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008e86:	4b6e      	ldr	r3, [pc, #440]	@ (8009040 <RadioSetTxGenericConfig+0x2ec>)
 8008e88:	6819      	ldr	r1, [r3, #0]
 8008e8a:	f107 0320 	add.w	r3, r7, #32
 8008e8e:	4a6d      	ldr	r2, [pc, #436]	@ (8009044 <RadioSetTxGenericConfig+0x2f0>)
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 fbbb 	bl	800a60c <RFW_Init>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 8008e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea0:	e186      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008ea2:	4b66      	ldr	r3, [pc, #408]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008ea8:	4b64      	ldr	r3, [pc, #400]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008eae:	4b63      	ldr	r3, [pc, #396]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	755a      	strb	r2, [r3, #21]
        {
 8008eb4:	e00b      	b.n	8008ece <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	7d5a      	ldrb	r2, [r3, #21]
 8008eba:	4b60      	ldr	r3, [pc, #384]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008ebc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	7d9a      	ldrb	r2, [r3, #22]
 8008ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008ec4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	7d1a      	ldrb	r2, [r3, #20]
 8008eca:	4b5c      	ldr	r3, [pc, #368]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008ecc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008ece:	f7ff f892 	bl	8007ff6 <RadioStandby>
        RadioSetModem( radio_modem );
 8008ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fa24 	bl	8007324 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008edc:	485a      	ldr	r0, [pc, #360]	@ (8009048 <RadioSetTxGenericConfig+0x2f4>)
 8008ede:	f000 fe8d 	bl	8009bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ee2:	485a      	ldr	r0, [pc, #360]	@ (800904c <RadioSetTxGenericConfig+0x2f8>)
 8008ee4:	f000 ff58 	bl	8009d98 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fa18 	bl	8009322 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	8a1b      	ldrh	r3, [r3, #16]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 fa62 	bl	80093c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	899b      	ldrh	r3, [r3, #12]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fa3d 	bl	8009380 <SUBGRF_SetCrcPolynomial>
        break;
 8008f06:	e13f      	b.n	8009188 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8008f10:	f04f 33ff 	mov.w	r3, #4294967295
 8008f14:	e14c      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	7c9b      	ldrb	r3, [r3, #18]
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d902      	bls.n	8008f24 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f22:	e145      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	6899      	ldr	r1, [r3, #8]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	7c9b      	ldrb	r3, [r3, #18]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 ffe0 	bl	800aef8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008f38:	4b40      	ldr	r3, [pc, #256]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a3d      	ldr	r2, [pc, #244]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f46:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	7cda      	ldrb	r2, [r3, #19]
 8008f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	4a39      	ldr	r2, [pc, #228]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f58:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008f5a:	4b38      	ldr	r3, [pc, #224]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	4b34      	ldr	r3, [pc, #208]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f6c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008f6e:	4b33      	ldr	r3, [pc, #204]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f70:	2204      	movs	r2, #4
 8008f72:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	7c9b      	ldrb	r3, [r3, #18]
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f7e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008f80:	4b2e      	ldr	r3, [pc, #184]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	7d9b      	ldrb	r3, [r3, #22]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d003      	beq.n	8008f96 <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	7d1b      	ldrb	r3, [r3, #20]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d12a      	bne.n	8008fec <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	7d5b      	ldrb	r3, [r3, #21]
 8008f9a:	2bf1      	cmp	r3, #241	@ 0xf1
 8008f9c:	d00a      	beq.n	8008fb4 <RadioSetTxGenericConfig+0x260>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	7d5b      	ldrb	r3, [r3, #21]
 8008fa2:	2bf2      	cmp	r3, #242	@ 0xf2
 8008fa4:	d006      	beq.n	8008fb4 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	7d5b      	ldrb	r3, [r3, #21]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d002      	beq.n	8008fb4 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 8008fae:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb2:	e0fd      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008fbc:	4b20      	ldr	r3, [pc, #128]	@ (8009040 <RadioSetTxGenericConfig+0x2ec>)
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	f107 0314 	add.w	r3, r7, #20
 8008fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8009044 <RadioSetTxGenericConfig+0x2f0>)
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f001 fb20 	bl	800a60c <RFW_Init>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 8008fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd6:	e0eb      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008fd8:	4b18      	ldr	r3, [pc, #96]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008fde:	4b17      	ldr	r3, [pc, #92]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008fe4:	4b15      	ldr	r3, [pc, #84]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	755a      	strb	r2, [r3, #21]
        {
 8008fea:	e00b      	b.n	8009004 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	7d5a      	ldrb	r2, [r3, #21]
 8008ff0:	4b12      	ldr	r3, [pc, #72]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008ff2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	7d9a      	ldrb	r2, [r3, #22]
 8008ff8:	4b10      	ldr	r3, [pc, #64]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8008ffa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	7d1a      	ldrb	r2, [r3, #20]
 8009000:	4b0e      	ldr	r3, [pc, #56]	@ (800903c <RadioSetTxGenericConfig+0x2e8>)
 8009002:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009004:	f7fe fff7 	bl	8007ff6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009008:	2000      	movs	r0, #0
 800900a:	f7fe f98b 	bl	8007324 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800900e:	480e      	ldr	r0, [pc, #56]	@ (8009048 <RadioSetTxGenericConfig+0x2f4>)
 8009010:	f000 fdf4 	bl	8009bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009014:	480d      	ldr	r0, [pc, #52]	@ (800904c <RadioSetTxGenericConfig+0x2f8>)
 8009016:	f000 febf 	bl	8009d98 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800901a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f97f 	bl	8009322 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	8a1b      	ldrh	r3, [r3, #16]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f9c9 	bl	80093c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	899b      	ldrh	r3, [r3, #12]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 f9a4 	bl	8009380 <SUBGRF_SetCrcPolynomial>
        break;
 8009038:	e0a6      	b.n	8009188 <RadioSetTxGenericConfig+0x434>
 800903a:	bf00      	nop
 800903c:	20000288 	.word	0x20000288
 8009040:	20000284 	.word	0x20000284
 8009044:	200002e4 	.word	0x200002e4
 8009048:	200002c0 	.word	0x200002c0
 800904c:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009050:	4b59      	ldr	r3, [pc, #356]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	4b56      	ldr	r3, [pc, #344]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 800905e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	785a      	ldrb	r2, [r3, #1]
 8009066:	4b54      	ldr	r3, [pc, #336]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	789a      	ldrb	r2, [r3, #2]
 8009070:	4b51      	ldr	r3, [pc, #324]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009072:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	78db      	ldrb	r3, [r3, #3]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d010      	beq.n	80090a0 <RadioSetTxGenericConfig+0x34c>
 800907e:	2b02      	cmp	r3, #2
 8009080:	dc20      	bgt.n	80090c4 <RadioSetTxGenericConfig+0x370>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <RadioSetTxGenericConfig+0x338>
 8009086:	2b01      	cmp	r3, #1
 8009088:	d005      	beq.n	8009096 <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800908a:	e01b      	b.n	80090c4 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800908c:	4b4a      	ldr	r3, [pc, #296]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009094:	e017      	b.n	80090c6 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009096:	4b48      	ldr	r3, [pc, #288]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800909e:	e012      	b.n	80090c6 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b0b      	cmp	r3, #11
 80090a6:	d003      	beq.n	80090b0 <RadioSetTxGenericConfig+0x35c>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b0c      	cmp	r3, #12
 80090ae:	d104      	bne.n	80090ba <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80090b0:	4b41      	ldr	r3, [pc, #260]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80090b8:	e005      	b.n	80090c6 <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80090ba:	4b3f      	ldr	r3, [pc, #252]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80090c2:	e000      	b.n	80090c6 <RadioSetTxGenericConfig+0x372>
            break;
 80090c4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80090c6:	4b3c      	ldr	r3, [pc, #240]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	889a      	ldrh	r2, [r3, #4]
 80090d0:	4b39      	ldr	r3, [pc, #228]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80090d2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	799a      	ldrb	r2, [r3, #6]
 80090d8:	4b37      	ldr	r3, [pc, #220]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80090da:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	79da      	ldrb	r2, [r3, #7]
 80090e0:	4b35      	ldr	r3, [pc, #212]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80090e2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7a1a      	ldrb	r2, [r3, #8]
 80090ea:	4b33      	ldr	r3, [pc, #204]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80090ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80090f0:	f7fe ff81 	bl	8007ff6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80090f4:	2001      	movs	r0, #1
 80090f6:	f7fe f915 	bl	8007324 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090fa:	4830      	ldr	r0, [pc, #192]	@ (80091bc <RadioSetTxGenericConfig+0x468>)
 80090fc:	f000 fd7e 	bl	8009bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009100:	482f      	ldr	r0, [pc, #188]	@ (80091c0 <RadioSetTxGenericConfig+0x46c>)
 8009102:	f000 fe49 	bl	8009d98 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009106:	4b2c      	ldr	r3, [pc, #176]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800910c:	2b06      	cmp	r3, #6
 800910e:	d10d      	bne.n	800912c <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009110:	f640 0089 	movw	r0, #2185	@ 0x889
 8009114:	f000 ffa8 	bl	800a068 <SUBGRF_ReadRegister>
 8009118:	4603      	mov	r3, r0
 800911a:	f023 0304 	bic.w	r3, r3, #4
 800911e:	b2db      	uxtb	r3, r3
 8009120:	4619      	mov	r1, r3
 8009122:	f640 0089 	movw	r0, #2185	@ 0x889
 8009126:	f000 ff7d 	bl	800a024 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800912a:	e02d      	b.n	8009188 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800912c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009130:	f000 ff9a 	bl	800a068 <SUBGRF_ReadRegister>
 8009134:	4603      	mov	r3, r0
 8009136:	f043 0304 	orr.w	r3, r3, #4
 800913a:	b2db      	uxtb	r3, r3
 800913c:	4619      	mov	r1, r3
 800913e:	f640 0089 	movw	r0, #2185	@ 0x889
 8009142:	f000 ff6f 	bl	800a024 <SUBGRF_WriteRegister>
        break;
 8009146:	e01f      	b.n	8009188 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <RadioSetTxGenericConfig+0x406>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009158:	d902      	bls.n	8009160 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 800915a:	f04f 33ff 	mov.w	r3, #4294967295
 800915e:	e027      	b.n	80091b0 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 8009160:	2003      	movs	r0, #3
 8009162:	f7fe f8df 	bl	8007324 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009166:	4b14      	ldr	r3, [pc, #80]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009168:	2202      	movs	r2, #2
 800916a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a11      	ldr	r2, [pc, #68]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009174:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009176:	4b10      	ldr	r3, [pc, #64]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009178:	2216      	movs	r2, #22
 800917a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800917e:	480f      	ldr	r0, [pc, #60]	@ (80091bc <RadioSetTxGenericConfig+0x468>)
 8009180:	f000 fd3c 	bl	8009bfc <SUBGRF_SetModulationParams>
        break;
 8009184:	e000      	b.n	8009188 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 8009186:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800918c:	4618      	mov	r0, r3
 800918e:	f001 f87f 	bl	800a290 <SUBGRF_SetRfTxPower>
 8009192:	4603      	mov	r3, r0
 8009194:	461a      	mov	r2, r3
 8009196:	4b08      	ldr	r3, [pc, #32]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 8009198:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800919c:	4b06      	ldr	r3, [pc, #24]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 800919e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 fa53 	bl	800a64e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80091a8:	4a03      	ldr	r2, [pc, #12]	@ (80091b8 <RadioSetTxGenericConfig+0x464>)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6053      	str	r3, [r2, #4]
    return 0;
 80091ae:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3738      	adds	r7, #56	@ 0x38
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20000288 	.word	0x20000288
 80091bc:	200002c0 	.word	0x200002c0
 80091c0:	20000296 	.word	0x20000296

080091c4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr

080091dc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80091e6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
	...

080091f4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009202:	4a1d      	ldr	r2, [pc, #116]	@ (8009278 <SUBGRF_Init+0x84>)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009208:	f7f7 fbe6 	bl	80009d8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800920c:	2002      	movs	r0, #2
 800920e:	f001 f91b 	bl	800a448 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009212:	4b1a      	ldr	r3, [pc, #104]	@ (800927c <SUBGRF_Init+0x88>)
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009218:	2000      	movs	r0, #0
 800921a:	f000 f97f 	bl	800951c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800921e:	f001 fd9a 	bl	800ad56 <RBI_IsTCXO>
 8009222:	4603      	mov	r3, r0
 8009224:	2b01      	cmp	r3, #1
 8009226:	d10e      	bne.n	8009246 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009228:	2140      	movs	r1, #64	@ 0x40
 800922a:	2001      	movs	r0, #1
 800922c:	f000 fb8a 	bl	8009944 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009230:	2100      	movs	r1, #0
 8009232:	f640 1011 	movw	r0, #2321	@ 0x911
 8009236:	f000 fef5 	bl	800a024 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800923a:	237f      	movs	r3, #127	@ 0x7f
 800923c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800923e:	7b38      	ldrb	r0, [r7, #12]
 8009240:	f000 fa8d 	bl	800975e <SUBGRF_Calibrate>
 8009244:	e009      	b.n	800925a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009246:	2120      	movs	r1, #32
 8009248:	f640 1011 	movw	r0, #2321	@ 0x911
 800924c:	f000 feea 	bl	800a024 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009250:	2120      	movs	r1, #32
 8009252:	f640 1012 	movw	r0, #2322	@ 0x912
 8009256:	f000 fee5 	bl	800a024 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800925a:	210e      	movs	r1, #14
 800925c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009260:	f000 fee0 	bl	800a024 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009264:	f001 fd54 	bl	800ad10 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009268:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <SUBGRF_Init+0x8c>)
 800926a:	2201      	movs	r2, #1
 800926c:	701a      	strb	r2, [r3, #0]
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000320 	.word	0x20000320
 800927c:	2000031c 	.word	0x2000031c
 8009280:	20000314 	.word	0x20000314

08009284 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009288:	4b02      	ldr	r3, [pc, #8]	@ (8009294 <SUBGRF_GetOperatingMode+0x10>)
 800928a:	781b      	ldrb	r3, [r3, #0]
}
 800928c:	4618      	mov	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	bc80      	pop	{r7}
 8009292:	4770      	bx	lr
 8009294:	20000314 	.word	0x20000314

08009298 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	461a      	mov	r2, r3
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	2000      	movs	r0, #0
 80092ac:	f000 ff40 	bl	800a130 <SUBGRF_WriteBuffer>
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80092ca:	f107 0317 	add.w	r3, r7, #23
 80092ce:	4619      	mov	r1, r3
 80092d0:	68b8      	ldr	r0, [r7, #8]
 80092d2:	f000 fe29 	bl	8009f28 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	79fa      	ldrb	r2, [r7, #7]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d201      	bcs.n	80092e4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e007      	b.n	80092f4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80092e4:	7df8      	ldrb	r0, [r7, #23]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68f9      	ldr	r1, [r7, #12]
 80092ee:	f000 ff41 	bl	800a174 <SUBGRF_ReadBuffer>

    return 0;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	460b      	mov	r3, r1
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	4619      	mov	r1, r3
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff ffc2 	bl	8009298 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f91d 	bl	8009554 <SUBGRF_SetTx>
}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800932a:	2208      	movs	r2, #8
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8009332:	f000 feb9 	bl	800a0a8 <SUBGRF_WriteRegisters>
    return 0;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	0a1b      	lsrs	r3, r3, #8
 800934e:	b29b      	uxth	r3, r3
 8009350:	b2db      	uxtb	r3, r3
 8009352:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800935a:	f000 fb77 	bl	8009a4c <SUBGRF_GetPacketType>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d108      	bne.n	8009376 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009364:	f107 030c 	add.w	r3, r7, #12
 8009368:	2202      	movs	r2, #2
 800936a:	4619      	mov	r1, r3
 800936c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8009370:	f000 fe9a 	bl	800a0a8 <SUBGRF_WriteRegisters>
            break;
 8009374:	e000      	b.n	8009378 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009376:	bf00      	nop
    }
}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	0a1b      	lsrs	r3, r3, #8
 800938e:	b29b      	uxth	r3, r3
 8009390:	b2db      	uxtb	r3, r3
 8009392:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800939a:	f000 fb57 	bl	8009a4c <SUBGRF_GetPacketType>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80093a4:	f107 030c 	add.w	r3, r7, #12
 80093a8:	2202      	movs	r2, #2
 80093aa:	4619      	mov	r1, r3
 80093ac:	f240 60be 	movw	r0, #1726	@ 0x6be
 80093b0:	f000 fe7a 	bl	800a0a8 <SUBGRF_WriteRegisters>
            break;
 80093b4:	e000      	b.n	80093b8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80093b6:	bf00      	nop
    }
}
 80093b8:	bf00      	nop
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80093ce:	f000 fb3d 	bl	8009a4c <SUBGRF_GetPacketType>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d121      	bne.n	800941c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80093d8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80093dc:	f000 fe44 	bl	800a068 <SUBGRF_ReadRegister>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f023 0301 	bic.w	r3, r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80093e8:	88fb      	ldrh	r3, [r7, #6]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	b25a      	sxtb	r2, r3
 80093f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	b25b      	sxtb	r3, r3
 80093fe:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	4619      	mov	r1, r3
 8009404:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009408:	f000 fe0c 	bl	800a024 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	4619      	mov	r1, r3
 8009412:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8009416:	f000 fe05 	bl	800a024 <SUBGRF_WriteRegister>
            break;
 800941a:	e000      	b.n	800941e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800941c:	bf00      	nop
    }
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009438:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800943c:	f000 fe14 	bl	800a068 <SUBGRF_ReadRegister>
 8009440:	4603      	mov	r3, r0
 8009442:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	4619      	mov	r1, r3
 800944e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009452:	f000 fde7 	bl	800a024 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009456:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800945a:	f000 fe05 	bl	800a068 <SUBGRF_ReadRegister>
 800945e:	4603      	mov	r3, r0
 8009460:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009462:	79bb      	ldrb	r3, [r7, #6]
 8009464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009468:	b2db      	uxtb	r3, r3
 800946a:	4619      	mov	r1, r3
 800946c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009470:	f000 fdd8 	bl	800a024 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009474:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009478:	f000 f88c 	bl	8009594 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800947c:	463b      	mov	r3, r7
 800947e:	2204      	movs	r2, #4
 8009480:	4619      	mov	r1, r3
 8009482:	f640 0019 	movw	r0, #2073	@ 0x819
 8009486:	f000 fe31 	bl	800a0ec <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800948a:	2000      	movs	r0, #0
 800948c:	f000 f846 	bl	800951c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	4619      	mov	r1, r3
 8009494:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009498:	f000 fdc4 	bl	800a024 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800949c:	79bb      	ldrb	r3, [r7, #6]
 800949e:	4619      	mov	r1, r3
 80094a0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80094a4:	f000 fdbe 	bl	800a024 <SUBGRF_WriteRegister>

    return number;
 80094a8:	683b      	ldr	r3, [r7, #0]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80094bc:	2000      	movs	r0, #0
 80094be:	f001 fc32 	bl	800ad26 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80094c2:	2002      	movs	r0, #2
 80094c4:	f000 ffc0 	bl	800a448 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80094c8:	793b      	ldrb	r3, [r7, #4]
 80094ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	b25b      	sxtb	r3, r3
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80094d6:	793b      	ldrb	r3, [r7, #4]
 80094d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80094dc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80094de:	b25b      	sxtb	r3, r3
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	b25b      	sxtb	r3, r3
 80094e4:	4313      	orrs	r3, r2
 80094e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80094e8:	793b      	ldrb	r3, [r7, #4]
 80094ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80094f2:	4313      	orrs	r3, r2
 80094f4:	b25b      	sxtb	r3, r3
 80094f6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80094f8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80094fa:	f107 030f 	add.w	r3, r7, #15
 80094fe:	2201      	movs	r2, #1
 8009500:	4619      	mov	r1, r3
 8009502:	2084      	movs	r0, #132	@ 0x84
 8009504:	f000 fe58 	bl	800a1b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009508:	4b03      	ldr	r3, [pc, #12]	@ (8009518 <SUBGRF_SetSleep+0x64>)
 800950a:	2200      	movs	r2, #0
 800950c:	701a      	strb	r2, [r3, #0]
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20000314 	.word	0x20000314

0800951c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009526:	1dfb      	adds	r3, r7, #7
 8009528:	2201      	movs	r2, #1
 800952a:	4619      	mov	r1, r3
 800952c:	2080      	movs	r0, #128	@ 0x80
 800952e:	f000 fe43 	bl	800a1b8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009538:	4b05      	ldr	r3, [pc, #20]	@ (8009550 <SUBGRF_SetStandby+0x34>)
 800953a:	2201      	movs	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800953e:	e002      	b.n	8009546 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009540:	4b03      	ldr	r3, [pc, #12]	@ (8009550 <SUBGRF_SetStandby+0x34>)
 8009542:	2202      	movs	r2, #2
 8009544:	701a      	strb	r2, [r3, #0]
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000314 	.word	0x20000314

08009554 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800955c:	4b0c      	ldr	r3, [pc, #48]	@ (8009590 <SUBGRF_SetTx+0x3c>)
 800955e:	2204      	movs	r2, #4
 8009560:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	b2db      	uxtb	r3, r3
 8009568:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	0a1b      	lsrs	r3, r3, #8
 800956e:	b2db      	uxtb	r3, r3
 8009570:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009578:	f107 030c 	add.w	r3, r7, #12
 800957c:	2203      	movs	r2, #3
 800957e:	4619      	mov	r1, r3
 8009580:	2083      	movs	r0, #131	@ 0x83
 8009582:	f000 fe19 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000314 	.word	0x20000314

08009594 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800959c:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <SUBGRF_SetRx+0x3c>)
 800959e:	2205      	movs	r2, #5
 80095a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	0a1b      	lsrs	r3, r3, #8
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80095b8:	f107 030c 	add.w	r3, r7, #12
 80095bc:	2203      	movs	r2, #3
 80095be:	4619      	mov	r1, r3
 80095c0:	2082      	movs	r0, #130	@ 0x82
 80095c2:	f000 fdf9 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20000314 	.word	0x20000314

080095d4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80095dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009618 <SUBGRF_SetRxBoosted+0x44>)
 80095de:	2205      	movs	r2, #5
 80095e0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80095e2:	2197      	movs	r1, #151	@ 0x97
 80095e4:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80095e8:	f000 fd1c 	bl	800a024 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	0c1b      	lsrs	r3, r3, #16
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	0a1b      	lsrs	r3, r3, #8
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009602:	f107 030c 	add.w	r3, r7, #12
 8009606:	2203      	movs	r2, #3
 8009608:	4619      	mov	r1, r3
 800960a:	2082      	movs	r0, #130	@ 0x82
 800960c:	f000 fdd4 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20000314 	.word	0x20000314

0800961c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0c1b      	lsrs	r3, r3, #16
 800962a:	b2db      	uxtb	r3, r3
 800962c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	0a1b      	lsrs	r3, r3, #8
 8009632:	b2db      	uxtb	r3, r3
 8009634:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	0c1b      	lsrs	r3, r3, #16
 8009640:	b2db      	uxtb	r3, r3
 8009642:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	b2db      	uxtb	r3, r3
 800964a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009652:	f107 0308 	add.w	r3, r7, #8
 8009656:	2206      	movs	r2, #6
 8009658:	4619      	mov	r1, r3
 800965a:	2094      	movs	r0, #148	@ 0x94
 800965c:	f000 fdac 	bl	800a1b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009660:	4b03      	ldr	r3, [pc, #12]	@ (8009670 <SUBGRF_SetRxDutyCycle+0x54>)
 8009662:	2206      	movs	r2, #6
 8009664:	701a      	strb	r2, [r3, #0]
}
 8009666:	bf00      	nop
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000314 	.word	0x20000314

08009674 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009678:	2200      	movs	r2, #0
 800967a:	2100      	movs	r1, #0
 800967c:	20c5      	movs	r0, #197	@ 0xc5
 800967e:	f000 fd9b 	bl	800a1b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009682:	4b02      	ldr	r3, [pc, #8]	@ (800968c <SUBGRF_SetCad+0x18>)
 8009684:	2207      	movs	r2, #7
 8009686:	701a      	strb	r2, [r3, #0]
}
 8009688:	bf00      	nop
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000314 	.word	0x20000314

08009690 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009694:	2200      	movs	r2, #0
 8009696:	2100      	movs	r1, #0
 8009698:	20d1      	movs	r0, #209	@ 0xd1
 800969a:	f000 fd8d 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 800969e:	bf00      	nop
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80096a6:	2200      	movs	r2, #0
 80096a8:	2100      	movs	r1, #0
 80096aa:	20d2      	movs	r0, #210	@ 0xd2
 80096ac:	f000 fd84 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 80096b0:	bf00      	nop
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80096be:	1dfb      	adds	r3, r7, #7
 80096c0:	2201      	movs	r2, #1
 80096c2:	4619      	mov	r1, r3
 80096c4:	209f      	movs	r0, #159	@ 0x9f
 80096c6:	f000 fd77 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	4603      	mov	r3, r0
 80096da:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80096dc:	1dfb      	adds	r3, r7, #7
 80096de:	2201      	movs	r2, #1
 80096e0:	4619      	mov	r1, r3
 80096e2:	20a0      	movs	r0, #160	@ 0xa0
 80096e4:	f000 fd68 	bl	800a1b8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80096ec:	d91c      	bls.n	8009728 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80096fc:	e005      	b.n	800970a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	089b      	lsrs	r3, r3, #2
 8009702:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	3301      	adds	r3, #1
 8009708:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	2b1f      	cmp	r3, #31
 800970e:	d8f6      	bhi.n	80096fe <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	b2da      	uxtb	r2, r3
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	4413      	add	r3, r2
 800971a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800971c:	7b7b      	ldrb	r3, [r7, #13]
 800971e:	4619      	mov	r1, r3
 8009720:	f240 7006 	movw	r0, #1798	@ 0x706
 8009724:	f000 fc7e 	bl	800a024 <SUBGRF_WriteRegister>
    }
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8009736:	f001 fb19 	bl	800ad6c <RBI_IsDCDC>
 800973a:	4603      	mov	r3, r0
 800973c:	2b01      	cmp	r3, #1
 800973e:	d102      	bne.n	8009746 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8009740:	2301      	movs	r3, #1
 8009742:	71fb      	strb	r3, [r7, #7]
 8009744:	e001      	b.n	800974a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8009746:	2300      	movs	r3, #0
 8009748:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800974a:	1dfb      	adds	r3, r7, #7
 800974c:	2201      	movs	r2, #1
 800974e:	4619      	mov	r1, r3
 8009750:	2096      	movs	r0, #150	@ 0x96
 8009752:	f000 fd31 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009766:	793b      	ldrb	r3, [r7, #4]
 8009768:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800976c:	b2db      	uxtb	r3, r3
 800976e:	b25b      	sxtb	r3, r3
 8009770:	019b      	lsls	r3, r3, #6
 8009772:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009774:	793b      	ldrb	r3, [r7, #4]
 8009776:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800977a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800977c:	b25b      	sxtb	r3, r3
 800977e:	015b      	lsls	r3, r3, #5
 8009780:	b25b      	sxtb	r3, r3
 8009782:	4313      	orrs	r3, r2
 8009784:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009786:	793b      	ldrb	r3, [r7, #4]
 8009788:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800978c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800978e:	b25b      	sxtb	r3, r3
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	b25b      	sxtb	r3, r3
 8009794:	4313      	orrs	r3, r2
 8009796:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009798:	793b      	ldrb	r3, [r7, #4]
 800979a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800979e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80097a0:	b25b      	sxtb	r3, r3
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	b25b      	sxtb	r3, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80097aa:	793b      	ldrb	r3, [r7, #4]
 80097ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80097b0:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80097b2:	b25b      	sxtb	r3, r3
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	b25b      	sxtb	r3, r3
 80097b8:	4313      	orrs	r3, r2
 80097ba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80097bc:	793b      	ldrb	r3, [r7, #4]
 80097be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80097c2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80097c4:	b25b      	sxtb	r3, r3
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	b25b      	sxtb	r3, r3
 80097ca:	4313      	orrs	r3, r2
 80097cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80097ce:	793b      	ldrb	r3, [r7, #4]
 80097d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80097d8:	4313      	orrs	r3, r2
 80097da:	b25b      	sxtb	r3, r3
 80097dc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80097de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80097e0:	f107 030f 	add.w	r3, r7, #15
 80097e4:	2201      	movs	r2, #1
 80097e6:	4619      	mov	r1, r3
 80097e8:	2089      	movs	r0, #137	@ 0x89
 80097ea:	f000 fce5 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 80097ee:	bf00      	nop
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a1d      	ldr	r2, [pc, #116]	@ (8009878 <SUBGRF_CalibrateImage+0x80>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d904      	bls.n	8009812 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009808:	23e1      	movs	r3, #225	@ 0xe1
 800980a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800980c:	23e9      	movs	r3, #233	@ 0xe9
 800980e:	737b      	strb	r3, [r7, #13]
 8009810:	e027      	b.n	8009862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a19      	ldr	r2, [pc, #100]	@ (800987c <SUBGRF_CalibrateImage+0x84>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d904      	bls.n	8009824 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800981a:	23d7      	movs	r3, #215	@ 0xd7
 800981c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800981e:	23db      	movs	r3, #219	@ 0xdb
 8009820:	737b      	strb	r3, [r7, #13]
 8009822:	e01e      	b.n	8009862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a16      	ldr	r2, [pc, #88]	@ (8009880 <SUBGRF_CalibrateImage+0x88>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d904      	bls.n	8009836 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800982c:	23c1      	movs	r3, #193	@ 0xc1
 800982e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009830:	23c5      	movs	r3, #197	@ 0xc5
 8009832:	737b      	strb	r3, [r7, #13]
 8009834:	e015      	b.n	8009862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a12      	ldr	r2, [pc, #72]	@ (8009884 <SUBGRF_CalibrateImage+0x8c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d904      	bls.n	8009848 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800983e:	2375      	movs	r3, #117	@ 0x75
 8009840:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8009842:	2381      	movs	r3, #129	@ 0x81
 8009844:	737b      	strb	r3, [r7, #13]
 8009846:	e00c      	b.n	8009862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a0f      	ldr	r2, [pc, #60]	@ (8009888 <SUBGRF_CalibrateImage+0x90>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d904      	bls.n	800985a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8009850:	236b      	movs	r3, #107	@ 0x6b
 8009852:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8009854:	236f      	movs	r3, #111	@ 0x6f
 8009856:	737b      	strb	r3, [r7, #13]
 8009858:	e003      	b.n	8009862 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800985a:	2329      	movs	r3, #41	@ 0x29
 800985c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800985e:	232b      	movs	r3, #43	@ 0x2b
 8009860:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009862:	f107 030c 	add.w	r3, r7, #12
 8009866:	2202      	movs	r2, #2
 8009868:	4619      	mov	r1, r3
 800986a:	2098      	movs	r0, #152	@ 0x98
 800986c:	f000 fca4 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	35a4e900 	.word	0x35a4e900
 800987c:	32a9f880 	.word	0x32a9f880
 8009880:	2de54480 	.word	0x2de54480
 8009884:	1b6b0b00 	.word	0x1b6b0b00
 8009888:	1954fc40 	.word	0x1954fc40

0800988c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800988c:	b590      	push	{r4, r7, lr}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	4604      	mov	r4, r0
 8009894:	4608      	mov	r0, r1
 8009896:	4611      	mov	r1, r2
 8009898:	461a      	mov	r2, r3
 800989a:	4623      	mov	r3, r4
 800989c:	71fb      	strb	r3, [r7, #7]
 800989e:	4603      	mov	r3, r0
 80098a0:	71bb      	strb	r3, [r7, #6]
 80098a2:	460b      	mov	r3, r1
 80098a4:	717b      	strb	r3, [r7, #5]
 80098a6:	4613      	mov	r3, r2
 80098a8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80098ae:	79bb      	ldrb	r3, [r7, #6]
 80098b0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80098b2:	797b      	ldrb	r3, [r7, #5]
 80098b4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80098b6:	793b      	ldrb	r3, [r7, #4]
 80098b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80098ba:	f107 030c 	add.w	r3, r7, #12
 80098be:	2204      	movs	r2, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	2095      	movs	r0, #149	@ 0x95
 80098c4:	f000 fc78 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 80098c8:	bf00      	nop
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd90      	pop	{r4, r7, pc}

080098d0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80098d0:	b590      	push	{r4, r7, lr}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4604      	mov	r4, r0
 80098d8:	4608      	mov	r0, r1
 80098da:	4611      	mov	r1, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	4623      	mov	r3, r4
 80098e0:	80fb      	strh	r3, [r7, #6]
 80098e2:	4603      	mov	r3, r0
 80098e4:	80bb      	strh	r3, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	807b      	strh	r3, [r7, #2]
 80098ea:	4613      	mov	r3, r2
 80098ec:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80098ee:	88fb      	ldrh	r3, [r7, #6]
 80098f0:	0a1b      	lsrs	r3, r3, #8
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80098fe:	88bb      	ldrh	r3, [r7, #4]
 8009900:	0a1b      	lsrs	r3, r3, #8
 8009902:	b29b      	uxth	r3, r3
 8009904:	b2db      	uxtb	r3, r3
 8009906:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009908:	88bb      	ldrh	r3, [r7, #4]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800990e:	887b      	ldrh	r3, [r7, #2]
 8009910:	0a1b      	lsrs	r3, r3, #8
 8009912:	b29b      	uxth	r3, r3
 8009914:	b2db      	uxtb	r3, r3
 8009916:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009918:	887b      	ldrh	r3, [r7, #2]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800991e:	883b      	ldrh	r3, [r7, #0]
 8009920:	0a1b      	lsrs	r3, r3, #8
 8009922:	b29b      	uxth	r3, r3
 8009924:	b2db      	uxtb	r3, r3
 8009926:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009928:	883b      	ldrh	r3, [r7, #0]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800992e:	f107 0308 	add.w	r3, r7, #8
 8009932:	2208      	movs	r2, #8
 8009934:	4619      	mov	r1, r3
 8009936:	2008      	movs	r0, #8
 8009938:	f000 fc3e 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 800993c:	bf00      	nop
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	bd90      	pop	{r4, r7, pc}

08009944 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	b2db      	uxtb	r3, r3
 8009958:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	0c1b      	lsrs	r3, r3, #16
 800995e:	b2db      	uxtb	r3, r3
 8009960:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	0a1b      	lsrs	r3, r3, #8
 8009966:	b2db      	uxtb	r3, r3
 8009968:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	2204      	movs	r2, #4
 8009976:	4619      	mov	r1, r3
 8009978:	2097      	movs	r0, #151	@ 0x97
 800997a:	f000 fc1d 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009996:	4b1d      	ldr	r3, [pc, #116]	@ (8009a0c <SUBGRF_SetRfFrequency+0x84>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	f083 0301 	eor.w	r3, r3, #1
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ff27 	bl	80097f8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80099aa:	4b18      	ldr	r3, [pc, #96]	@ (8009a0c <SUBGRF_SetRfFrequency+0x84>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	461c      	mov	r4, r3
 80099b6:	4615      	mov	r5, r2
 80099b8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80099bc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80099c0:	4a13      	ldr	r2, [pc, #76]	@ (8009a10 <SUBGRF_SetRfFrequency+0x88>)
 80099c2:	f04f 0300 	mov.w	r3, #0
 80099c6:	4640      	mov	r0, r8
 80099c8:	4649      	mov	r1, r9
 80099ca:	f7f6 fbdd 	bl	8000188 <__aeabi_uldivmod>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4613      	mov	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	0e1b      	lsrs	r3, r3, #24
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	0a1b      	lsrs	r3, r3, #8
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	2204      	movs	r2, #4
 80099fa:	4619      	mov	r1, r3
 80099fc:	2086      	movs	r0, #134	@ 0x86
 80099fe:	f000 fbdb 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009a02:	bf00      	nop
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a0c:	2000031c 	.word	0x2000031c
 8009a10:	01e84800 	.word	0x01e84800

08009a14 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009a1e:	79fa      	ldrb	r2, [r7, #7]
 8009a20:	4b09      	ldr	r3, [pc, #36]	@ (8009a48 <SUBGRF_SetPacketType+0x34>)
 8009a22:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009a30:	f000 faf8 	bl	800a024 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009a34:	1dfb      	adds	r3, r7, #7
 8009a36:	2201      	movs	r2, #1
 8009a38:	4619      	mov	r1, r3
 8009a3a:	208a      	movs	r0, #138	@ 0x8a
 8009a3c:	f000 fbbc 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000315 	.word	0x20000315

08009a4c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	af00      	add	r7, sp, #0
    return PacketType;
 8009a50:	4b02      	ldr	r3, [pc, #8]	@ (8009a5c <SUBGRF_GetPacketType+0x10>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr
 8009a5c:	20000315 	.word	0x20000315

08009a60 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	71bb      	strb	r3, [r7, #6]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d149      	bne.n	8009b0c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009a78:	2000      	movs	r0, #0
 8009a7a:	f001 f982 	bl	800ad82 <RBI_GetRFOMaxPowerConfig>
 8009a7e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009a80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	da01      	bge.n	8009a8e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b0e      	cmp	r3, #14
 8009a92:	d10e      	bne.n	8009ab2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009a94:	2301      	movs	r3, #1
 8009a96:	2201      	movs	r2, #1
 8009a98:	2100      	movs	r1, #0
 8009a9a:	2004      	movs	r0, #4
 8009a9c:	f7ff fef6 	bl	800988c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009aa0:	79ba      	ldrb	r2, [r7, #6]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	330e      	adds	r3, #14
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	71bb      	strb	r3, [r7, #6]
 8009ab0:	e01f      	b.n	8009af2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b0a      	cmp	r3, #10
 8009ab6:	d10e      	bne.n	8009ad6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009ab8:	2301      	movs	r3, #1
 8009aba:	2201      	movs	r2, #1
 8009abc:	2100      	movs	r1, #0
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f7ff fee4 	bl	800988c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009ac4:	79ba      	ldrb	r2, [r7, #6]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	330d      	adds	r3, #13
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	71bb      	strb	r3, [r7, #6]
 8009ad4:	e00d      	b.n	8009af2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	2201      	movs	r2, #1
 8009ada:	2100      	movs	r1, #0
 8009adc:	2007      	movs	r0, #7
 8009ade:	f7ff fed5 	bl	800988c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009ae2:	79ba      	ldrb	r2, [r7, #6]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	330e      	adds	r3, #14
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009af2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009af6:	f113 0f11 	cmn.w	r3, #17
 8009afa:	da01      	bge.n	8009b00 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009afc:	23ef      	movs	r3, #239	@ 0xef
 8009afe:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009b00:	2118      	movs	r1, #24
 8009b02:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009b06:	f000 fa8d 	bl	800a024 <SUBGRF_WriteRegister>
 8009b0a:	e067      	b.n	8009bdc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009b0c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009b10:	f000 faaa 	bl	800a068 <SUBGRF_ReadRegister>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f043 031e 	orr.w	r3, r3, #30
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009b22:	f000 fa7f 	bl	800a024 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009b26:	2001      	movs	r0, #1
 8009b28:	f001 f92b 	bl	800ad82 <RBI_GetRFOMaxPowerConfig>
 8009b2c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009b2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	da01      	bge.n	8009b3c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b14      	cmp	r3, #20
 8009b40:	d10e      	bne.n	8009b60 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009b42:	2301      	movs	r3, #1
 8009b44:	2200      	movs	r2, #0
 8009b46:	2105      	movs	r1, #5
 8009b48:	2003      	movs	r0, #3
 8009b4a:	f7ff fe9f 	bl	800988c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009b4e:	79ba      	ldrb	r2, [r7, #6]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	3316      	adds	r3, #22
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	71bb      	strb	r3, [r7, #6]
 8009b5e:	e031      	b.n	8009bc4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b11      	cmp	r3, #17
 8009b64:	d10e      	bne.n	8009b84 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009b66:	2301      	movs	r3, #1
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2103      	movs	r1, #3
 8009b6c:	2002      	movs	r0, #2
 8009b6e:	f7ff fe8d 	bl	800988c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009b72:	79ba      	ldrb	r2, [r7, #6]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	3316      	adds	r3, #22
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	71bb      	strb	r3, [r7, #6]
 8009b82:	e01f      	b.n	8009bc4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b0e      	cmp	r3, #14
 8009b88:	d10e      	bne.n	8009ba8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2102      	movs	r1, #2
 8009b90:	2002      	movs	r0, #2
 8009b92:	f7ff fe7b 	bl	800988c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009b96:	79ba      	ldrb	r2, [r7, #6]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	330e      	adds	r3, #14
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	71bb      	strb	r3, [r7, #6]
 8009ba6:	e00d      	b.n	8009bc4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009ba8:	2301      	movs	r3, #1
 8009baa:	2200      	movs	r2, #0
 8009bac:	2107      	movs	r1, #7
 8009bae:	2004      	movs	r0, #4
 8009bb0:	f7ff fe6c 	bl	800988c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009bb4:	79ba      	ldrb	r2, [r7, #6]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	3316      	adds	r3, #22
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009bc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009bc8:	f113 0f09 	cmn.w	r3, #9
 8009bcc:	da01      	bge.n	8009bd2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009bce:	23f7      	movs	r3, #247	@ 0xf7
 8009bd0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009bd2:	2138      	movs	r1, #56	@ 0x38
 8009bd4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009bd8:	f000 fa24 	bl	800a024 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009bdc:	79bb      	ldrb	r3, [r7, #6]
 8009bde:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009be0:	797b      	ldrb	r3, [r7, #5]
 8009be2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009be4:	f107 0308 	add.w	r3, r7, #8
 8009be8:	2202      	movs	r2, #2
 8009bea:	4619      	mov	r1, r3
 8009bec:	208e      	movs	r0, #142	@ 0x8e
 8009bee:	f000 fae3 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009bfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c00:	b086      	sub	sp, #24
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	781a      	ldrb	r2, [r3, #0]
 8009c18:	4b5c      	ldr	r3, [pc, #368]	@ (8009d8c <SUBGRF_SetModulationParams+0x190>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d004      	beq.n	8009c2a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff fef5 	bl	8009a14 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	f200 80a5 	bhi.w	8009d7e <SUBGRF_SetModulationParams+0x182>
 8009c34:	a201      	add	r2, pc, #4	@ (adr r2, 8009c3c <SUBGRF_SetModulationParams+0x40>)
 8009c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3a:	bf00      	nop
 8009c3c:	08009c4d 	.word	0x08009c4d
 8009c40:	08009d0d 	.word	0x08009d0d
 8009c44:	08009ccf 	.word	0x08009ccf
 8009c48:	08009d3b 	.word	0x08009d3b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	4a4e      	ldr	r2, [pc, #312]	@ (8009d90 <SUBGRF_SetModulationParams+0x194>)
 8009c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c5a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	0c1b      	lsrs	r3, r3, #16
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7b1b      	ldrb	r3, [r3, #12]
 8009c76:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7b5b      	ldrb	r3, [r3, #13]
 8009c7c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	461c      	mov	r4, r3
 8009c86:	4615      	mov	r5, r2
 8009c88:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009c8c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009c90:	4a40      	ldr	r2, [pc, #256]	@ (8009d94 <SUBGRF_SetModulationParams+0x198>)
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	4640      	mov	r0, r8
 8009c98:	4649      	mov	r1, r9
 8009c9a:	f7f6 fa75 	bl	8000188 <__aeabi_uldivmod>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	0c1b      	lsrs	r3, r3, #16
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	0a1b      	lsrs	r3, r3, #8
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009cbc:	7cfb      	ldrb	r3, [r7, #19]
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	f107 0308 	add.w	r3, r7, #8
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	208b      	movs	r0, #139	@ 0x8b
 8009cc8:	f000 fa76 	bl	800a1b8 <SUBGRF_WriteCommand>
        break;
 8009ccc:	e058      	b.n	8009d80 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009cce:	2304      	movs	r3, #4
 8009cd0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	4a2e      	ldr	r2, [pc, #184]	@ (8009d90 <SUBGRF_SetModulationParams+0x194>)
 8009cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cdc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	0a1b      	lsrs	r3, r3, #8
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7d1b      	ldrb	r3, [r3, #20]
 8009cf8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009cfa:	7cfb      	ldrb	r3, [r7, #19]
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	f107 0308 	add.w	r3, r7, #8
 8009d02:	4619      	mov	r1, r3
 8009d04:	208b      	movs	r0, #139	@ 0x8b
 8009d06:	f000 fa57 	bl	800a1b8 <SUBGRF_WriteCommand>
        break;
 8009d0a:	e039      	b.n	8009d80 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8009d0c:	2304      	movs	r3, #4
 8009d0e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7e1b      	ldrb	r3, [r3, #24]
 8009d14:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	7e5b      	ldrb	r3, [r3, #25]
 8009d1a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7e9b      	ldrb	r3, [r3, #26]
 8009d20:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	7edb      	ldrb	r3, [r3, #27]
 8009d26:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d28:	7cfb      	ldrb	r3, [r7, #19]
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f107 0308 	add.w	r3, r7, #8
 8009d30:	4619      	mov	r1, r3
 8009d32:	208b      	movs	r0, #139	@ 0x8b
 8009d34:	f000 fa40 	bl	800a1b8 <SUBGRF_WriteCommand>

        break;
 8009d38:	e022      	b.n	8009d80 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009d3a:	2305      	movs	r3, #5
 8009d3c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4a13      	ldr	r2, [pc, #76]	@ (8009d90 <SUBGRF_SetModulationParams+0x194>)
 8009d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d48:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	0c1b      	lsrs	r3, r3, #16
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	0a1b      	lsrs	r3, r3, #8
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	7b1b      	ldrb	r3, [r3, #12]
 8009d64:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7b5b      	ldrb	r3, [r3, #13]
 8009d6a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d6c:	7cfb      	ldrb	r3, [r7, #19]
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f107 0308 	add.w	r3, r7, #8
 8009d74:	4619      	mov	r1, r3
 8009d76:	208b      	movs	r0, #139	@ 0x8b
 8009d78:	f000 fa1e 	bl	800a1b8 <SUBGRF_WriteCommand>
        break;
 8009d7c:	e000      	b.n	8009d80 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009d7e:	bf00      	nop
    }
}
 8009d80:	bf00      	nop
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000315 	.word	0x20000315
 8009d90:	3d090000 	.word	0x3d090000
 8009d94:	01e84800 	.word	0x01e84800

08009d98 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009da4:	f107 030c 	add.w	r3, r7, #12
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	605a      	str	r2, [r3, #4]
 8009dae:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	781a      	ldrb	r2, [r3, #0]
 8009db4:	4b44      	ldr	r3, [pc, #272]	@ (8009ec8 <SUBGRF_SetPacketParams+0x130>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d004      	beq.n	8009dc6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fe27 	bl	8009a14 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d878      	bhi.n	8009ec0 <SUBGRF_SetPacketParams+0x128>
 8009dce:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <SUBGRF_SetPacketParams+0x3c>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009de5 	.word	0x08009de5
 8009dd8:	08009e75 	.word	0x08009e75
 8009ddc:	08009e69 	.word	0x08009e69
 8009de0:	08009de5 	.word	0x08009de5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	7a5b      	ldrb	r3, [r3, #9]
 8009de8:	2bf1      	cmp	r3, #241	@ 0xf1
 8009dea:	d10a      	bne.n	8009e02 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009dec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009df0:	f7ff faa6 	bl	8009340 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009df4:	f248 0005 	movw	r0, #32773	@ 0x8005
 8009df8:	f7ff fac2 	bl	8009380 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	75bb      	strb	r3, [r7, #22]
 8009e00:	e011      	b.n	8009e26 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7a5b      	ldrb	r3, [r3, #9]
 8009e06:	2bf2      	cmp	r3, #242	@ 0xf2
 8009e08:	d10a      	bne.n	8009e20 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009e0a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8009e0e:	f7ff fa97 	bl	8009340 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009e12:	f241 0021 	movw	r0, #4129	@ 0x1021
 8009e16:	f7ff fab3 	bl	8009380 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009e1a:	2306      	movs	r3, #6
 8009e1c:	75bb      	strb	r3, [r7, #22]
 8009e1e:	e002      	b.n	8009e26 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7a5b      	ldrb	r3, [r3, #9]
 8009e24:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009e26:	2309      	movs	r3, #9
 8009e28:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	0a1b      	lsrs	r3, r3, #8
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	885b      	ldrh	r3, [r3, #2]
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	791b      	ldrb	r3, [r3, #4]
 8009e42:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	795b      	ldrb	r3, [r3, #5]
 8009e48:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	799b      	ldrb	r3, [r3, #6]
 8009e4e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	79db      	ldrb	r3, [r3, #7]
 8009e54:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	7a1b      	ldrb	r3, [r3, #8]
 8009e5a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009e5c:	7dbb      	ldrb	r3, [r7, #22]
 8009e5e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7a9b      	ldrb	r3, [r3, #10]
 8009e64:	753b      	strb	r3, [r7, #20]
        break;
 8009e66:	e022      	b.n	8009eae <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7b1b      	ldrb	r3, [r3, #12]
 8009e70:	733b      	strb	r3, [r7, #12]
        break;
 8009e72:	e01c      	b.n	8009eae <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009e74:	2306      	movs	r3, #6
 8009e76:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	89db      	ldrh	r3, [r3, #14]
 8009e7c:	0a1b      	lsrs	r3, r3, #8
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	89db      	ldrh	r3, [r3, #14]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7c1a      	ldrb	r2, [r3, #16]
 8009e90:	4b0e      	ldr	r3, [pc, #56]	@ (8009ecc <SUBGRF_SetPacketParams+0x134>)
 8009e92:	4611      	mov	r1, r2
 8009e94:	7019      	strb	r1, [r3, #0]
 8009e96:	4613      	mov	r3, r2
 8009e98:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	7c5b      	ldrb	r3, [r3, #17]
 8009e9e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7c9b      	ldrb	r3, [r3, #18]
 8009ea4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	7cdb      	ldrb	r3, [r3, #19]
 8009eaa:	747b      	strb	r3, [r7, #17]
        break;
 8009eac:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	f107 030c 	add.w	r3, r7, #12
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	208c      	movs	r0, #140	@ 0x8c
 8009eba:	f000 f97d 	bl	800a1b8 <SUBGRF_WriteCommand>
 8009ebe:	e000      	b.n	8009ec2 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009ec0:	bf00      	nop
}
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20000315 	.word	0x20000315
 8009ecc:	20000316 	.word	0x20000316

08009ed0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	460a      	mov	r2, r1
 8009eda:	71fb      	strb	r3, [r7, #7]
 8009edc:	4613      	mov	r3, r2
 8009ede:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009ee4:	79bb      	ldrb	r3, [r7, #6]
 8009ee6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009ee8:	f107 030c 	add.w	r3, r7, #12
 8009eec:	2202      	movs	r2, #2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	208f      	movs	r0, #143	@ 0x8f
 8009ef2:	f000 f961 	bl	800a1b8 <SUBGRF_WriteCommand>
}
 8009ef6:	bf00      	nop
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009f08:	1d3b      	adds	r3, r7, #4
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	2015      	movs	r0, #21
 8009f10:	f000 f974 	bl	800a1fc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009f14:	793b      	ldrb	r3, [r7, #4]
 8009f16:	425b      	negs	r3, r3
 8009f18:	105b      	asrs	r3, r3, #1
 8009f1a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009f32:	f107 030c 	add.w	r3, r7, #12
 8009f36:	2202      	movs	r2, #2
 8009f38:	4619      	mov	r1, r3
 8009f3a:	2013      	movs	r0, #19
 8009f3c:	f000 f95e 	bl	800a1fc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009f40:	f7ff fd84 	bl	8009a4c <SUBGRF_GetPacketType>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d10d      	bne.n	8009f66 <SUBGRF_GetRxBufferStatus+0x3e>
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <SUBGRF_GetRxBufferStatus+0x54>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d108      	bne.n	8009f66 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009f54:	f240 7002 	movw	r0, #1794	@ 0x702
 8009f58:	f000 f886 	bl	800a068 <SUBGRF_ReadRegister>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	461a      	mov	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e002      	b.n	8009f6c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009f66:	7b3a      	ldrb	r2, [r7, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009f6c:	7b7a      	ldrb	r2, [r7, #13]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	701a      	strb	r2, [r3, #0]
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000316 	.word	0x20000316

08009f80 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009f88:	f107 030c 	add.w	r3, r7, #12
 8009f8c:	2203      	movs	r2, #3
 8009f8e:	4619      	mov	r1, r3
 8009f90:	2014      	movs	r0, #20
 8009f92:	f000 f933 	bl	800a1fc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009f96:	f7ff fd59 	bl	8009a4c <SUBGRF_GetPacketType>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <SUBGRF_GetPacketStatus+0x30>
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d013      	beq.n	8009fd6 <SUBGRF_GetPacketStatus+0x56>
 8009fae:	e02a      	b.n	800a006 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009fb0:	7b3a      	ldrb	r2, [r7, #12]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009fb6:	7b7b      	ldrb	r3, [r7, #13]
 8009fb8:	425b      	negs	r3, r3
 8009fba:	105b      	asrs	r3, r3, #1
 8009fbc:	b25a      	sxtb	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	425b      	negs	r3, r3
 8009fc6:	105b      	asrs	r3, r3, #1
 8009fc8:	b25a      	sxtb	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	609a      	str	r2, [r3, #8]
            break;
 8009fd4:	e020      	b.n	800a018 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009fd6:	7b3b      	ldrb	r3, [r7, #12]
 8009fd8:	425b      	negs	r3, r3
 8009fda:	105b      	asrs	r3, r3, #1
 8009fdc:	b25a      	sxtb	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009fe2:	7b7b      	ldrb	r3, [r7, #13]
 8009fe4:	b25b      	sxtb	r3, r3
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	109b      	asrs	r3, r3, #2
 8009fea:	b25a      	sxtb	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	425b      	negs	r3, r3
 8009ff4:	105b      	asrs	r3, r3, #1
 8009ff6:	b25a      	sxtb	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009ffc:	4b08      	ldr	r3, [pc, #32]	@ (800a020 <SUBGRF_GetPacketStatus+0xa0>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	611a      	str	r2, [r3, #16]
            break;
 800a004:	e008      	b.n	800a018 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a006:	2214      	movs	r2, #20
 800a008:	2100      	movs	r1, #0
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 ff93 	bl	800af36 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	220f      	movs	r2, #15
 800a014:	701a      	strb	r2, [r3, #0]
            break;
 800a016:	bf00      	nop
    }
}
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20000318 	.word	0x20000318

0800a024 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	460a      	mov	r2, r1
 800a02e:	80fb      	strh	r3, [r7, #6]
 800a030:	4613      	mov	r3, r2
 800a032:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a034:	f3ef 8310 	mrs	r3, PRIMASK
 800a038:	60fb      	str	r3, [r7, #12]
  return(result);
 800a03a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a03c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a03e:	b672      	cpsid	i
}
 800a040:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a042:	1d7a      	adds	r2, r7, #5
 800a044:	88f9      	ldrh	r1, [r7, #6]
 800a046:	2301      	movs	r3, #1
 800a048:	4806      	ldr	r0, [pc, #24]	@ (800a064 <SUBGRF_WriteRegister+0x40>)
 800a04a:	f7fa faed 	bl	8004628 <HAL_SUBGHZ_WriteRegisters>
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f383 8810 	msr	PRIMASK, r3
}
 800a058:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a05a:	bf00      	nop
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000070 	.word	0x20000070

0800a068 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a072:	f3ef 8310 	mrs	r3, PRIMASK
 800a076:	60fb      	str	r3, [r7, #12]
  return(result);
 800a078:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 800a07a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a07c:	b672      	cpsid	i
}
 800a07e:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a080:	f107 020b 	add.w	r2, r7, #11
 800a084:	88f9      	ldrh	r1, [r7, #6]
 800a086:	2301      	movs	r3, #1
 800a088:	4806      	ldr	r0, [pc, #24]	@ (800a0a4 <SUBGRF_ReadRegister+0x3c>)
 800a08a:	f7fa fb2c 	bl	80046e6 <HAL_SUBGHZ_ReadRegisters>
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f383 8810 	msr	PRIMASK, r3
}
 800a098:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 800a09a:	7afb      	ldrb	r3, [r7, #11]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20000070 	.word	0x20000070

0800a0a8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	80fb      	strh	r3, [r7, #6]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a0c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0c2:	b672      	cpsid	i
}
 800a0c4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a0c6:	88bb      	ldrh	r3, [r7, #4]
 800a0c8:	88f9      	ldrh	r1, [r7, #6]
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	4806      	ldr	r0, [pc, #24]	@ (800a0e8 <SUBGRF_WriteRegisters+0x40>)
 800a0ce:	f7fa faab 	bl	8004628 <HAL_SUBGHZ_WriteRegisters>
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f383 8810 	msr	PRIMASK, r3
}
 800a0dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000070 	.word	0x20000070

0800a0ec <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	80fb      	strh	r3, [r7, #6]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a100:	60fb      	str	r3, [r7, #12]
  return(result);
 800a102:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a106:	b672      	cpsid	i
}
 800a108:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a10a:	88bb      	ldrh	r3, [r7, #4]
 800a10c:	88f9      	ldrh	r1, [r7, #6]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	4806      	ldr	r0, [pc, #24]	@ (800a12c <SUBGRF_ReadRegisters+0x40>)
 800a112:	f7fa fae8 	bl	80046e6 <HAL_SUBGHZ_ReadRegisters>
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f383 8810 	msr	PRIMASK, r3
}
 800a120:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a122:	bf00      	nop
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000070 	.word	0x20000070

0800a130 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	71fb      	strb	r3, [r7, #7]
 800a13c:	4613      	mov	r3, r2
 800a13e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a140:	f3ef 8310 	mrs	r3, PRIMASK
 800a144:	60fb      	str	r3, [r7, #12]
  return(result);
 800a146:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a148:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a14a:	b672      	cpsid	i
}
 800a14c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a14e:	79bb      	ldrb	r3, [r7, #6]
 800a150:	b29b      	uxth	r3, r3
 800a152:	79f9      	ldrb	r1, [r7, #7]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	4806      	ldr	r0, [pc, #24]	@ (800a170 <SUBGRF_WriteBuffer+0x40>)
 800a158:	f7fa fbd9 	bl	800490e <HAL_SUBGHZ_WriteBuffer>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f383 8810 	msr	PRIMASK, r3
}
 800a166:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a168:	bf00      	nop
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20000070 	.word	0x20000070

0800a174 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	71fb      	strb	r3, [r7, #7]
 800a180:	4613      	mov	r3, r2
 800a182:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a184:	f3ef 8310 	mrs	r3, PRIMASK
 800a188:	60fb      	str	r3, [r7, #12]
  return(result);
 800a18a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a18c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a18e:	b672      	cpsid	i
}
 800a190:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a192:	79bb      	ldrb	r3, [r7, #6]
 800a194:	b29b      	uxth	r3, r3
 800a196:	79f9      	ldrb	r1, [r7, #7]
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	4806      	ldr	r0, [pc, #24]	@ (800a1b4 <SUBGRF_ReadBuffer+0x40>)
 800a19c:	f7fa fc0a 	bl	80049b4 <HAL_SUBGHZ_ReadBuffer>
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f383 8810 	msr	PRIMASK, r3
}
 800a1aa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a1ac:	bf00      	nop
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20000070 	.word	0x20000070

0800a1b8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	6039      	str	r1, [r7, #0]
 800a1c2:	71fb      	strb	r3, [r7, #7]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1d2:	b672      	cpsid	i
}
 800a1d4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a1d6:	88bb      	ldrh	r3, [r7, #4]
 800a1d8:	79f9      	ldrb	r1, [r7, #7]
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	4806      	ldr	r0, [pc, #24]	@ (800a1f8 <SUBGRF_WriteCommand+0x40>)
 800a1de:	f7fa fae3 	bl	80047a8 <HAL_SUBGHZ_ExecSetCmd>
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f383 8810 	msr	PRIMASK, r3
}
 800a1ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a1ee:	bf00      	nop
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000070 	.word	0x20000070

0800a1fc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	71fb      	strb	r3, [r7, #7]
 800a208:	4613      	mov	r3, r2
 800a20a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a20c:	f3ef 8310 	mrs	r3, PRIMASK
 800a210:	60fb      	str	r3, [r7, #12]
  return(result);
 800a212:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a216:	b672      	cpsid	i
}
 800a218:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a21a:	88bb      	ldrh	r3, [r7, #4]
 800a21c:	79f9      	ldrb	r1, [r7, #7]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	4806      	ldr	r0, [pc, #24]	@ (800a23c <SUBGRF_ReadCommand+0x40>)
 800a222:	f7fa fb20 	bl	8004866 <HAL_SUBGHZ_ExecGetCmd>
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f383 8810 	msr	PRIMASK, r3
}
 800a230:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a232:	bf00      	nop
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000070 	.word	0x20000070

0800a240 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	460a      	mov	r2, r1
 800a24a:	71fb      	strb	r3, [r7, #7]
 800a24c:	4613      	mov	r3, r2
 800a24e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a250:	2301      	movs	r3, #1
 800a252:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a254:	79bb      	ldrb	r3, [r7, #6]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d10d      	bne.n	800a276 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d104      	bne.n	800a26a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a260:	2302      	movs	r3, #2
 800a262:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a264:	2004      	movs	r0, #4
 800a266:	f000 f8ef 	bl	800a448 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d107      	bne.n	800a280 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a270:	2303      	movs	r3, #3
 800a272:	73fb      	strb	r3, [r7, #15]
 800a274:	e004      	b.n	800a280 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a276:	79bb      	ldrb	r3, [r7, #6]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a27c:	2301      	movs	r3, #1
 800a27e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fd4f 	bl	800ad26 <RBI_ConfigRFSwitch>
}
 800a288:	bf00      	nop
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a29a:	2301      	movs	r3, #1
 800a29c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a29e:	f000 fd4f 	bl	800ad40 <RBI_GetTxConfig>
 800a2a2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d016      	beq.n	800a2d8 <SUBGRF_SetRfTxPower+0x48>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	dc16      	bgt.n	800a2de <SUBGRF_SetRfTxPower+0x4e>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <SUBGRF_SetRfTxPower+0x2e>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d00a      	beq.n	800a2d2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a2bc:	e00f      	b.n	800a2de <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2c2:	2b0f      	cmp	r3, #15
 800a2c4:	dd02      	ble.n	800a2cc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	73fb      	strb	r3, [r7, #15]
            break;
 800a2ca:	e009      	b.n	800a2e0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
            break;
 800a2d0:	e006      	b.n	800a2e0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	73fb      	strb	r3, [r7, #15]
            break;
 800a2d6:	e003      	b.n	800a2e0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a2d8:	2302      	movs	r3, #2
 800a2da:	73fb      	strb	r3, [r7, #15]
            break;
 800a2dc:	e000      	b.n	800a2e0 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a2de:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a2e0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff fbb9 	bl	8009a60 <SUBGRF_SetTxParams>

    return paSelect;
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a2fc:	2301      	movs	r3, #1
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	46bd      	mov	sp, r7
 800a302:	bc80      	pop	{r7}
 800a304:	4770      	bx	lr
	...

0800a308 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a310:	4b03      	ldr	r3, [pc, #12]	@ (800a320 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2001      	movs	r0, #1
 800a316:	4798      	blx	r3
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000320 	.word	0x20000320

0800a324 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a32c:	4b03      	ldr	r3, [pc, #12]	@ (800a33c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2002      	movs	r0, #2
 800a332:	4798      	blx	r3
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20000320 	.word	0x20000320

0800a340 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a348:	4b03      	ldr	r3, [pc, #12]	@ (800a358 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2040      	movs	r0, #64	@ 0x40
 800a34e:	4798      	blx	r3
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000320 	.word	0x20000320

0800a35c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d005      	beq.n	800a37e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a372:	e00a      	b.n	800a38a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a374:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2080      	movs	r0, #128	@ 0x80
 800a37a:	4798      	blx	r3
            break;
 800a37c:	e005      	b.n	800a38a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a37e:	4b05      	ldr	r3, [pc, #20]	@ (800a394 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a386:	4798      	blx	r3
            break;
 800a388:	bf00      	nop
    }
}
 800a38a:	bf00      	nop
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000320 	.word	0x20000320

0800a398 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a3a0:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a3a8:	4798      	blx	r3
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000320 	.word	0x20000320

0800a3b8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a3c0:	4b03      	ldr	r3, [pc, #12]	@ (800a3d0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2020      	movs	r0, #32
 800a3c6:	4798      	blx	r3
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20000320 	.word	0x20000320

0800a3d4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a3dc:	4b03      	ldr	r3, [pc, #12]	@ (800a3ec <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2004      	movs	r0, #4
 800a3e2:	4798      	blx	r3
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000320 	.word	0x20000320

0800a3f0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a3f8:	4b03      	ldr	r3, [pc, #12]	@ (800a408 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2008      	movs	r0, #8
 800a3fe:	4798      	blx	r3
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20000320 	.word	0x20000320

0800a40c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a414:	4b03      	ldr	r3, [pc, #12]	@ (800a424 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2010      	movs	r0, #16
 800a41a:	4798      	blx	r3
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	20000320 	.word	0x20000320

0800a428 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a430:	4b04      	ldr	r3, [pc, #16]	@ (800a444 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a438:	4798      	blx	r3
}
 800a43a:	bf00      	nop
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20000320 	.word	0x20000320

0800a448 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a452:	f000 fc8b 	bl	800ad6c <RBI_IsDCDC>
 800a456:	4603      	mov	r3, r0
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d112      	bne.n	800a482 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a45c:	f640 1023 	movw	r0, #2339	@ 0x923
 800a460:	f7ff fe02 	bl	800a068 <SUBGRF_ReadRegister>
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	f023 0306 	bic.w	r3, r3, #6
 800a46e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a470:	7bfa      	ldrb	r2, [r7, #15]
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	4313      	orrs	r3, r2
 800a476:	b2db      	uxtb	r3, r3
 800a478:	4619      	mov	r1, r3
 800a47a:	f640 1023 	movw	r0, #2339	@ 0x923
 800a47e:	f7ff fdd1 	bl	800a024 <SUBGRF_WriteRegister>
  }
}
 800a482:	bf00      	nop
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a49a:	231f      	movs	r3, #31
 800a49c:	e017      	b.n	800a4ce <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]
 800a4a2:	e00f      	b.n	800a4c4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a4a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d205      	bcs.n	800a4be <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
 800a4b4:	4a08      	ldr	r2, [pc, #32]	@ (800a4d8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	4413      	add	r3, r2
 800a4ba:	791b      	ldrb	r3, [r3, #4]
 800a4bc:	e007      	b.n	800a4ce <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	73fb      	strb	r3, [r7, #15]
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	2b15      	cmp	r3, #21
 800a4c8:	d9ec      	bls.n	800a4a4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a4ca:	bf00      	nop
 800a4cc:	e7fd      	b.n	800a4ca <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bc80      	pop	{r7}
 800a4d6:	4770      	bx	lr
 800a4d8:	0800c7a8 	.word	0x0800c7a8

0800a4dc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08a      	sub	sp, #40	@ 0x28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a4e6:	4b35      	ldr	r3, [pc, #212]	@ (800a5bc <SUBGRF_GetCFO+0xe0>)
 800a4e8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a4ea:	f640 0007 	movw	r0, #2055	@ 0x807
 800a4ee:	f7ff fdbb 	bl	800a068 <SUBGRF_ReadRegister>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a4f6:	7ffb      	ldrb	r3, [r7, #31]
 800a4f8:	08db      	lsrs	r3, r3, #3
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	f003 0303 	and.w	r3, r3, #3
 800a500:	3328      	adds	r3, #40	@ 0x28
 800a502:	443b      	add	r3, r7
 800a504:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a508:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a50a:	7ffb      	ldrb	r3, [r7, #31]
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a512:	7fba      	ldrb	r2, [r7, #30]
 800a514:	7f7b      	ldrb	r3, [r7, #29]
 800a516:	3301      	adds	r3, #1
 800a518:	fa02 f303 	lsl.w	r3, r2, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	4b28      	ldr	r3, [pc, #160]	@ (800a5c0 <SUBGRF_GetCFO+0xe4>)
 800a520:	fbb3 f3f2 	udiv	r3, r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a526:	69ba      	ldr	r2, [r7, #24]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a52e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	2b07      	cmp	r3, #7
 800a542:	d802      	bhi.n	800a54a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a544:	2302      	movs	r3, #2
 800a546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800a54a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	fb02 f303 	mul.w	r3, r2, r3
 800a554:	2b03      	cmp	r3, #3
 800a556:	d802      	bhi.n	800a55e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a558:	2304      	movs	r3, #4
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a55e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	fb02 f303 	mul.w	r3, r2, r3
 800a568:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a56a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800a56e:	f7ff fd7b 	bl	800a068 <SUBGRF_ReadRegister>
 800a572:	4603      	mov	r3, r0
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a57a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a57c:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800a580:	f7ff fd72 	bl	800a068 <SUBGRF_ReadRegister>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a59e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a5a2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	6a3a      	ldr	r2, [r7, #32]
 800a5aa:	fb02 f303 	mul.w	r3, r2, r3
 800a5ae:	11da      	asrs	r2, r3, #7
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	3728      	adds	r7, #40	@ 0x28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	0c0a0804 	.word	0x0c0a0804
 800a5c0:	01e84800 	.word	0x01e84800

0800a5c4 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5da:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a5dc:	697b      	ldr	r3, [r7, #20]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr

0800a5e8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a5fe:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a600:	697b      	ldr	r3, [r7, #20]
}
 800a602:	4618      	mov	r0, r3
 800a604:	371c      	adds	r7, #28
 800a606:	46bd      	mov	sp, r7
 800a608:	bc80      	pop	{r7}
 800a60a:	4770      	bx	lr

0800a60c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a618:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	bc80      	pop	{r7}
 800a624:	4770      	bx	lr

0800a626 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a626:	b480      	push	{r7}
 800a628:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a62a:	bf00      	nop
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr

0800a632 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a632:	b480      	push	{r7}
 800a634:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a636:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a638:	4618      	mov	r0, r3
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bc80      	pop	{r7}
 800a63e:	4770      	bx	lr

0800a640 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a644:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a646:	4618      	mov	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	bc80      	pop	{r7}
 800a64c:	4770      	bx	lr

0800a64e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	4603      	mov	r3, r0
 800a656:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bc80      	pop	{r7}
 800a660:	4770      	bx	lr

0800a662 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a662:	b480      	push	{r7}
 800a664:	b087      	sub	sp, #28
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	460b      	mov	r3, r1
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a670:	f04f 33ff 	mov.w	r3, #4294967295
 800a674:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a676:	697b      	ldr	r3, [r7, #20]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	371c      	adds	r7, #28
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr

0800a682 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a682:	b480      	push	{r7}
 800a684:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a686:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bc80      	pop	{r7}
 800a690:	4770      	bx	lr

0800a692 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a692:	b480      	push	{r7}
 800a694:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a696:	bf00      	nop
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr

0800a69e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a69e:	b480      	push	{r7}
 800a6a0:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a6a2:	bf00      	nop
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bc80      	pop	{r7}
 800a6a8:	4770      	bx	lr

0800a6aa <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bc80      	pop	{r7}
 800a6bc:	4770      	bx	lr

0800a6be <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a6c2:	f7f6 f9c1 	bl	8000a48 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a6c6:	f000 f80b 	bl	800a6e0 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a6ca:	bf00      	nop
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	f000 ff21 	bl	800b51c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a6da:	bf00      	nop
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a6e0:	b590      	push	{r4, r7, lr}
 800a6e2:	b08b      	sub	sp, #44	@ 0x2c
 800a6e4:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800a6e6:	4b5e      	ldr	r3, [pc, #376]	@ (800a860 <SubghzApp_Init+0x180>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	2002      	movs	r0, #2
 800a6ee:	f001 fb4f 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /* Get SubGHY_Phy APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	9302      	str	r3, [sp, #8]
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4b59      	ldr	r3, [pc, #356]	@ (800a864 <SubghzApp_Init+0x184>)
 800a700:	2200      	movs	r2, #0
 800a702:	2100      	movs	r1, #0
 800a704:	2002      	movs	r0, #2
 800a706:	f001 fb43 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a70a:	2301      	movs	r3, #1
 800a70c:	9302      	str	r3, [sp, #8]
 800a70e:	2303      	movs	r3, #3
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	2301      	movs	r3, #1
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	4b54      	ldr	r3, [pc, #336]	@ (800a868 <SubghzApp_Init+0x188>)
 800a718:	2200      	movs	r2, #0
 800a71a:	2100      	movs	r1, #0
 800a71c:	2002      	movs	r0, #2
 800a71e:	f001 fb37 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Led Timers*/
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800a722:	2300      	movs	r3, #0
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4b51      	ldr	r3, [pc, #324]	@ (800a86c <SubghzApp_Init+0x18c>)
 800a728:	2200      	movs	r2, #0
 800a72a:	21c8      	movs	r1, #200	@ 0xc8
 800a72c:	4850      	ldr	r0, [pc, #320]	@ (800a870 <SubghzApp_Init+0x190>)
 800a72e:	f001 f893 	bl	800b858 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 800a732:	484f      	ldr	r0, [pc, #316]	@ (800a870 <SubghzApp_Init+0x190>)
 800a734:	f001 f8c6 	bl	800b8c4 <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a738:	4b4e      	ldr	r3, [pc, #312]	@ (800a874 <SubghzApp_Init+0x194>)
 800a73a:	4a4f      	ldr	r2, [pc, #316]	@ (800a878 <SubghzApp_Init+0x198>)
 800a73c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a73e:	4b4d      	ldr	r3, [pc, #308]	@ (800a874 <SubghzApp_Init+0x194>)
 800a740:	4a4e      	ldr	r2, [pc, #312]	@ (800a87c <SubghzApp_Init+0x19c>)
 800a742:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a744:	4b4b      	ldr	r3, [pc, #300]	@ (800a874 <SubghzApp_Init+0x194>)
 800a746:	4a4e      	ldr	r2, [pc, #312]	@ (800a880 <SubghzApp_Init+0x1a0>)
 800a748:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a74a:	4b4a      	ldr	r3, [pc, #296]	@ (800a874 <SubghzApp_Init+0x194>)
 800a74c:	4a4d      	ldr	r2, [pc, #308]	@ (800a884 <SubghzApp_Init+0x1a4>)
 800a74e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a750:	4b48      	ldr	r3, [pc, #288]	@ (800a874 <SubghzApp_Init+0x194>)
 800a752:	4a4d      	ldr	r2, [pc, #308]	@ (800a888 <SubghzApp_Init+0x1a8>)
 800a754:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a756:	4b4d      	ldr	r3, [pc, #308]	@ (800a88c <SubghzApp_Init+0x1ac>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4846      	ldr	r0, [pc, #280]	@ (800a874 <SubghzApp_Init+0x194>)
 800a75c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800a75e:	4b4b      	ldr	r3, [pc, #300]	@ (800a88c <SubghzApp_Init+0x1ac>)
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	4798      	blx	r3
 800a764:	4603      	mov	r3, r0
 800a766:	0d9b      	lsrs	r3, r3, #22
 800a768:	461a      	mov	r2, r3
 800a76a:	4b49      	ldr	r3, [pc, #292]	@ (800a890 <SubghzApp_Init+0x1b0>)
 800a76c:	601a      	str	r2, [r3, #0]

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800a76e:	4b47      	ldr	r3, [pc, #284]	@ (800a88c <SubghzApp_Init+0x1ac>)
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	4848      	ldr	r0, [pc, #288]	@ (800a894 <SubghzApp_Init+0x1b4>)
 800a774:	4798      	blx	r3

  /* Radio configuration */
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800a776:	4b48      	ldr	r3, [pc, #288]	@ (800a898 <SubghzApp_Init+0x1b8>)
 800a778:	2200      	movs	r2, #0
 800a77a:	2100      	movs	r1, #0
 800a77c:	2002      	movs	r0, #2
 800a77e:	f001 fb07 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800a782:	4b46      	ldr	r3, [pc, #280]	@ (800a89c <SubghzApp_Init+0x1bc>)
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	2002      	movs	r0, #2
 800a78a:	f001 fb01 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800a78e:	237d      	movs	r3, #125	@ 0x7d
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	4b43      	ldr	r3, [pc, #268]	@ (800a8a0 <SubghzApp_Init+0x1c0>)
 800a794:	2200      	movs	r2, #0
 800a796:	2100      	movs	r1, #0
 800a798:	2002      	movs	r0, #2
 800a79a:	f001 faf9 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800a79e:	2307      	movs	r3, #7
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	4b40      	ldr	r3, [pc, #256]	@ (800a8a4 <SubghzApp_Init+0x1c4>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	2002      	movs	r0, #2
 800a7aa:	f001 faf1 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a7ae:	4b37      	ldr	r3, [pc, #220]	@ (800a88c <SubghzApp_Init+0x1ac>)
 800a7b0:	69dc      	ldr	r4, [r3, #28]
 800a7b2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a7b6:	9308      	str	r3, [sp, #32]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9307      	str	r3, [sp, #28]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	9306      	str	r3, [sp, #24]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9303      	str	r3, [sp, #12]
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	9302      	str	r3, [sp, #8]
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	2307      	movs	r3, #7
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2200      	movs	r2, #0
 800a7dc:	210e      	movs	r1, #14
 800a7de:	2001      	movs	r0, #1
 800a7e0:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800a7e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a88c <SubghzApp_Init+0x1ac>)
 800a7e4:	699c      	ldr	r4, [r3, #24]
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9308      	str	r3, [sp, #32]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	9307      	str	r3, [sp, #28]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9306      	str	r3, [sp, #24]
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	9305      	str	r3, [sp, #20]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	2300      	movs	r3, #0
 800a800:	9303      	str	r3, [sp, #12]
 800a802:	2305      	movs	r3, #5
 800a804:	9302      	str	r3, [sp, #8]
 800a806:	2308      	movs	r3, #8
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	2300      	movs	r3, #0
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	2301      	movs	r3, #1
 800a810:	2207      	movs	r2, #7
 800a812:	2100      	movs	r1, #0
 800a814:	2001      	movs	r0, #1
 800a816:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800a818:	4b1c      	ldr	r3, [pc, #112]	@ (800a88c <SubghzApp_Init+0x1ac>)
 800a81a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a81c:	21ff      	movs	r1, #255	@ 0xff
 800a81e:	2001      	movs	r0, #1
 800a820:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800a822:	22ff      	movs	r2, #255	@ 0xff
 800a824:	2100      	movs	r1, #0
 800a826:	4820      	ldr	r0, [pc, #128]	@ (800a8a8 <SubghzApp_Init+0x1c8>)
 800a828:	f001 fd2a 	bl	800c280 <memset>

  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800a82c:	4b18      	ldr	r3, [pc, #96]	@ (800a890 <SubghzApp_Init+0x1b0>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	4b1e      	ldr	r3, [pc, #120]	@ (800a8ac <SubghzApp_Init+0x1cc>)
 800a834:	2201      	movs	r2, #1
 800a836:	2100      	movs	r1, #0
 800a838:	2001      	movs	r0, #1
 800a83a:	f001 faa9 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800a83e:	4b13      	ldr	r3, [pc, #76]	@ (800a88c <SubghzApp_Init+0x1ac>)
 800a840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a842:	4a13      	ldr	r2, [pc, #76]	@ (800a890 <SubghzApp_Init+0x1b0>)
 800a844:	6812      	ldr	r2, [r2, #0]
 800a846:	f602 32b8 	addw	r2, r2, #3000	@ 0xbb8
 800a84a:	4610      	mov	r0, r2
 800a84c:	4798      	blx	r3

  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800a84e:	4a18      	ldr	r2, [pc, #96]	@ (800a8b0 <SubghzApp_Init+0x1d0>)
 800a850:	2100      	movs	r1, #0
 800a852:	2001      	movs	r0, #1
 800a854:	f000 ff5e 	bl	800b714 <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 800a858:	bf00      	nop
 800a85a:	3704      	adds	r7, #4
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd90      	pop	{r4, r7, pc}
 800a860:	0800c3d4 	.word	0x0800c3d4
 800a864:	0800c3e4 	.word	0x0800c3e4
 800a868:	0800c408 	.word	0x0800c408
 800a86c:	0800acdd 	.word	0x0800acdd
 800a870:	20000548 	.word	0x20000548
 800a874:	20000324 	.word	0x20000324
 800a878:	0800a8b5 	.word	0x0800a8b5
 800a87c:	0800a8e1 	.word	0x0800a8e1
 800a880:	0800a9f5 	.word	0x0800a9f5
 800a884:	0800aa21 	.word	0x0800aa21
 800a888:	0800aa4d 	.word	0x0800aa4d
 800a88c:	0800c718 	.word	0x0800c718
 800a890:	20000560 	.word	0x20000560
 800a894:	33bca100 	.word	0x33bca100
 800a898:	0800c42c 	.word	0x0800c42c
 800a89c:	0800c440 	.word	0x0800c440
 800a8a0:	0800c454 	.word	0x0800c454
 800a8a4:	0800c468 	.word	0x0800c468
 800a8a8:	20000444 	.word	0x20000444
 800a8ac:	0800c478 	.word	0x0800c478
 800a8b0:	0800aa79 	.word	0x0800aa79

0800a8b4 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800a8b8:	4b07      	ldr	r3, [pc, #28]	@ (800a8d8 <OnTxDone+0x24>)
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	2100      	movs	r1, #0
 800a8be:	2001      	movs	r0, #1
 800a8c0:	f001 fa66 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX;
 800a8c4:	4b05      	ldr	r3, [pc, #20]	@ (800a8dc <OnTxDone+0x28>)
 800a8c6:	2203      	movs	r2, #3
 800a8c8:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	2001      	movs	r0, #1
 800a8ce:	f000 ff43 	bl	800b758 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800a8d2:	bf00      	nop
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	0800c484 	.word	0x0800c484
 800a8dc:	20000340 	.word	0x20000340

0800a8e0 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	817b      	strh	r3, [r7, #10]
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	813b      	strh	r3, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800a8fa:	4b34      	ldr	r3, [pc, #208]	@ (800a9cc <OnRxDone+0xec>)
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	2100      	movs	r1, #0
 800a900:	2001      	movs	r0, #1
 800a902:	f001 fa45 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800a906:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a90a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a90e:	9201      	str	r2, [sp, #4]
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	4b2f      	ldr	r3, [pc, #188]	@ (800a9d0 <OnRxDone+0xf0>)
 800a914:	2201      	movs	r2, #1
 800a916:	2100      	movs	r1, #0
 800a918:	2001      	movs	r0, #1
 800a91a:	f001 fa39 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800a91e:	4a2d      	ldr	r2, [pc, #180]	@ (800a9d4 <OnRxDone+0xf4>)
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800a924:	4b2c      	ldr	r3, [pc, #176]	@ (800a9d8 <OnRxDone+0xf8>)
 800a926:	2200      	movs	r2, #0
 800a928:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800a92a:	22ff      	movs	r2, #255	@ 0xff
 800a92c:	2100      	movs	r1, #0
 800a92e:	482b      	ldr	r0, [pc, #172]	@ (800a9dc <OnRxDone+0xfc>)
 800a930:	f001 fca6 	bl	800c280 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800a934:	4a2a      	ldr	r2, [pc, #168]	@ (800a9e0 <OnRxDone+0x100>)
 800a936:	897b      	ldrh	r3, [r7, #10]
 800a938:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800a93a:	4b29      	ldr	r3, [pc, #164]	@ (800a9e0 <OnRxDone+0x100>)
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	2bff      	cmp	r3, #255	@ 0xff
 800a940:	d806      	bhi.n	800a950 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800a942:	4b27      	ldr	r3, [pc, #156]	@ (800a9e0 <OnRxDone+0x100>)
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	68f9      	ldr	r1, [r7, #12]
 800a94a:	4824      	ldr	r0, [pc, #144]	@ (800a9dc <OnRxDone+0xfc>)
 800a94c:	f001 fcd6 	bl	800c2fc <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800a950:	893b      	ldrh	r3, [r7, #8]
 800a952:	b25a      	sxtb	r2, r3
 800a954:	4b23      	ldr	r3, [pc, #140]	@ (800a9e4 <OnRxDone+0x104>)
 800a956:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800a958:	897b      	ldrh	r3, [r7, #10]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4b22      	ldr	r3, [pc, #136]	@ (800a9e8 <OnRxDone+0x108>)
 800a95e:	2201      	movs	r2, #1
 800a960:	2100      	movs	r1, #0
 800a962:	2003      	movs	r0, #3
 800a964:	f001 fa14 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	e01d      	b.n	800a9aa <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800a96e:	4a1b      	ldr	r2, [pc, #108]	@ (800a9dc <OnRxDone+0xfc>)
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	4413      	add	r3, r2
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	4b1c      	ldr	r3, [pc, #112]	@ (800a9ec <OnRxDone+0x10c>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	2100      	movs	r1, #0
 800a97e:	2003      	movs	r0, #3
 800a980:	f001 fa06 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	425a      	negs	r2, r3
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	f002 020f 	and.w	r2, r2, #15
 800a990:	bf58      	it	pl
 800a992:	4253      	negpl	r3, r2
 800a994:	2b0f      	cmp	r3, #15
 800a996:	d105      	bne.n	800a9a4 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a998:	4b15      	ldr	r3, [pc, #84]	@ (800a9f0 <OnRxDone+0x110>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	2003      	movs	r0, #3
 800a9a0:	f001 f9f6 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9ae:	ddde      	ble.n	800a96e <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a9b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f0 <OnRxDone+0x110>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	2003      	movs	r0, #3
 800a9b8:	f001 f9ea 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a9bc:	2100      	movs	r1, #0
 800a9be:	2001      	movs	r0, #1
 800a9c0:	f000 feca 	bl	800b758 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800a9c4:	bf00      	nop
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	0800c490 	.word	0x0800c490
 800a9d0:	0800c49c 	.word	0x0800c49c
 800a9d4:	20000547 	.word	0x20000547
 800a9d8:	20000340 	.word	0x20000340
 800a9dc:	20000344 	.word	0x20000344
 800a9e0:	20000544 	.word	0x20000544
 800a9e4:	20000546 	.word	0x20000546
 800a9e8:	0800c4c0 	.word	0x0800c4c0
 800a9ec:	0800c4d4 	.word	0x0800c4d4
 800a9f0:	0800c4dc 	.word	0x0800c4dc

0800a9f4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800a9f8:	4b07      	ldr	r3, [pc, #28]	@ (800aa18 <OnTxTimeout+0x24>)
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f001 f9c6 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800aa04:	4b05      	ldr	r3, [pc, #20]	@ (800aa1c <OnTxTimeout+0x28>)
 800aa06:	2204      	movs	r2, #4
 800aa08:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	f000 fea3 	bl	800b758 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800aa12:	bf00      	nop
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	0800c4e0 	.word	0x0800c4e0
 800aa1c:	20000340 	.word	0x20000340

0800aa20 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800aa24:	4b07      	ldr	r3, [pc, #28]	@ (800aa44 <OnRxTimeout+0x24>)
 800aa26:	2201      	movs	r2, #1
 800aa28:	2100      	movs	r1, #0
 800aa2a:	2001      	movs	r0, #1
 800aa2c:	f001 f9b0 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800aa30:	4b05      	ldr	r3, [pc, #20]	@ (800aa48 <OnRxTimeout+0x28>)
 800aa32:	2201      	movs	r2, #1
 800aa34:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa36:	2100      	movs	r1, #0
 800aa38:	2001      	movs	r0, #1
 800aa3a:	f000 fe8d 	bl	800b758 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800aa3e:	bf00      	nop
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	0800c4f0 	.word	0x0800c4f0
 800aa48:	20000340 	.word	0x20000340

0800aa4c <OnRxError>:

static void OnRxError(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800aa50:	4b07      	ldr	r3, [pc, #28]	@ (800aa70 <OnRxError+0x24>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	2100      	movs	r1, #0
 800aa56:	2001      	movs	r0, #1
 800aa58:	f001 f99a 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800aa5c:	4b05      	ldr	r3, [pc, #20]	@ (800aa74 <OnRxError+0x28>)
 800aa5e:	2202      	movs	r2, #2
 800aa60:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa62:	2100      	movs	r1, #0
 800aa64:	2001      	movs	r0, #1
 800aa66:	f000 fe77 	bl	800b758 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800aa6a:	bf00      	nop
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800c500 	.word	0x0800c500
 800aa74:	20000340 	.word	0x20000340

0800aa78 <PingPong_Process>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800aa7c:	4b85      	ldr	r3, [pc, #532]	@ (800ac94 <PingPong_Process+0x21c>)
 800aa7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa80:	4798      	blx	r3

  switch (State)
 800aa82:	4b85      	ldr	r3, [pc, #532]	@ (800ac98 <PingPong_Process+0x220>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	f200 80ff 	bhi.w	800ac8a <PingPong_Process+0x212>
 800aa8c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <PingPong_Process+0x1c>)
 800aa8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa92:	bf00      	nop
 800aa94:	0800aaa9 	.word	0x0800aaa9
 800aa98:	0800ac1b 	.word	0x0800ac1b
 800aa9c:	0800ac1b 	.word	0x0800ac1b
 800aaa0:	0800ac03 	.word	0x0800ac03
 800aaa4:	0800ac73 	.word	0x0800ac73
  {
    case RX:

      if (isMaster == true)
 800aaa8:	4b7c      	ldr	r3, [pc, #496]	@ (800ac9c <PingPong_Process+0x224>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d05f      	beq.n	800ab70 <PingPong_Process+0xf8>
      {
        if (RxBufferSize > 0)
 800aab0:	4b7b      	ldr	r3, [pc, #492]	@ (800aca0 <PingPong_Process+0x228>)
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80ea 	beq.w	800ac8e <PingPong_Process+0x216>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800aaba:	2204      	movs	r2, #4
 800aabc:	4979      	ldr	r1, [pc, #484]	@ (800aca4 <PingPong_Process+0x22c>)
 800aabe:	487a      	ldr	r0, [pc, #488]	@ (800aca8 <PingPong_Process+0x230>)
 800aac0:	f001 fbe6 	bl	800c290 <strncmp>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d12c      	bne.n	800ab24 <PingPong_Process+0xac>
          {
            UTIL_TIMER_Stop(&timerLed);
 800aaca:	4878      	ldr	r0, [pc, #480]	@ (800acac <PingPong_Process+0x234>)
 800aacc:	f000 ff68 	bl	800b9a0 <UTIL_TIMER_Stop>
            /* switch off green led */
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800aad0:	2200      	movs	r2, #0
 800aad2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aad6:	4876      	ldr	r0, [pc, #472]	@ (800acb0 <PingPong_Process+0x238>)
 800aad8:	f7f7 fd1c 	bl	8002514 <HAL_GPIO_WritePin>
            /* master toggles red led */
            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800aadc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800aae0:	4873      	ldr	r0, [pc, #460]	@ (800acb0 <PingPong_Process+0x238>)
 800aae2:	f7f7 fd2e 	bl	8002542 <HAL_GPIO_TogglePin>
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800aae6:	4b6b      	ldr	r3, [pc, #428]	@ (800ac94 <PingPong_Process+0x21c>)
 800aae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaea:	4798      	blx	r3
 800aaec:	4603      	mov	r3, r0
 800aaee:	33c8      	adds	r3, #200	@ 0xc8
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7f6 f833 	bl	8000b5c <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800aaf6:	4b6f      	ldr	r3, [pc, #444]	@ (800acb4 <PingPong_Process+0x23c>)
 800aaf8:	2201      	movs	r2, #1
 800aafa:	2100      	movs	r1, #0
 800aafc:	2001      	movs	r0, #1
 800aafe:	f001 f947 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800ab02:	4b6d      	ldr	r3, [pc, #436]	@ (800acb8 <PingPong_Process+0x240>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	2100      	movs	r1, #0
 800ab08:	2001      	movs	r0, #1
 800ab0a:	f001 f941 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800ab0e:	2204      	movs	r2, #4
 800ab10:	496a      	ldr	r1, [pc, #424]	@ (800acbc <PingPong_Process+0x244>)
 800ab12:	486b      	ldr	r0, [pc, #428]	@ (800acc0 <PingPong_Process+0x248>)
 800ab14:	f001 fbf2 	bl	800c2fc <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800ab18:	4b5e      	ldr	r3, [pc, #376]	@ (800ac94 <PingPong_Process+0x21c>)
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1c:	2140      	movs	r1, #64	@ 0x40
 800ab1e:	4868      	ldr	r0, [pc, #416]	@ (800acc0 <PingPong_Process+0x248>)
 800ab20:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800ab22:	e0b4      	b.n	800ac8e <PingPong_Process+0x216>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800ab24:	2204      	movs	r2, #4
 800ab26:	4965      	ldr	r1, [pc, #404]	@ (800acbc <PingPong_Process+0x244>)
 800ab28:	485f      	ldr	r0, [pc, #380]	@ (800aca8 <PingPong_Process+0x230>)
 800ab2a:	f001 fbb1 	bl	800c290 <strncmp>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10e      	bne.n	800ab52 <PingPong_Process+0xda>
            isMaster = false;
 800ab34:	4b59      	ldr	r3, [pc, #356]	@ (800ac9c <PingPong_Process+0x224>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800ab3a:	4b62      	ldr	r3, [pc, #392]	@ (800acc4 <PingPong_Process+0x24c>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	2100      	movs	r1, #0
 800ab40:	2001      	movs	r0, #1
 800ab42:	f001 f925 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800ab46:	4b53      	ldr	r3, [pc, #332]	@ (800ac94 <PingPong_Process+0x21c>)
 800ab48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800ab4e:	4798      	blx	r3
      break;
 800ab50:	e09d      	b.n	800ac8e <PingPong_Process+0x216>
            isMaster = true;
 800ab52:	4b52      	ldr	r3, [pc, #328]	@ (800ac9c <PingPong_Process+0x224>)
 800ab54:	2201      	movs	r2, #1
 800ab56:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800ab58:	4b5b      	ldr	r3, [pc, #364]	@ (800acc8 <PingPong_Process+0x250>)
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	2001      	movs	r0, #1
 800ab60:	f001 f916 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800ab64:	4b4b      	ldr	r3, [pc, #300]	@ (800ac94 <PingPong_Process+0x21c>)
 800ab66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab68:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800ab6c:	4798      	blx	r3
      break;
 800ab6e:	e08e      	b.n	800ac8e <PingPong_Process+0x216>
        if (RxBufferSize > 0)
 800ab70:	4b4b      	ldr	r3, [pc, #300]	@ (800aca0 <PingPong_Process+0x228>)
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 808a 	beq.w	800ac8e <PingPong_Process+0x216>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	494f      	ldr	r1, [pc, #316]	@ (800acbc <PingPong_Process+0x244>)
 800ab7e:	484a      	ldr	r0, [pc, #296]	@ (800aca8 <PingPong_Process+0x230>)
 800ab80:	f001 fb86 	bl	800c290 <strncmp>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d12c      	bne.n	800abe4 <PingPong_Process+0x16c>
            UTIL_TIMER_Stop(&timerLed);
 800ab8a:	4848      	ldr	r0, [pc, #288]	@ (800acac <PingPong_Process+0x234>)
 800ab8c:	f000 ff08 	bl	800b9a0 <UTIL_TIMER_Stop>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800ab90:	2200      	movs	r2, #0
 800ab92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ab96:	4846      	ldr	r0, [pc, #280]	@ (800acb0 <PingPong_Process+0x238>)
 800ab98:	f7f7 fcbc 	bl	8002514 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800ab9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aba0:	4843      	ldr	r0, [pc, #268]	@ (800acb0 <PingPong_Process+0x238>)
 800aba2:	f7f7 fcce 	bl	8002542 <HAL_GPIO_TogglePin>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800aba6:	4b3b      	ldr	r3, [pc, #236]	@ (800ac94 <PingPong_Process+0x21c>)
 800aba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abaa:	4798      	blx	r3
 800abac:	4603      	mov	r3, r0
 800abae:	33c8      	adds	r3, #200	@ 0xc8
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7f5 ffd3 	bl	8000b5c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800abb6:	4b45      	ldr	r3, [pc, #276]	@ (800accc <PingPong_Process+0x254>)
 800abb8:	2201      	movs	r2, #1
 800abba:	2100      	movs	r1, #0
 800abbc:	2001      	movs	r0, #1
 800abbe:	f001 f8e7 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800abc2:	4b43      	ldr	r3, [pc, #268]	@ (800acd0 <PingPong_Process+0x258>)
 800abc4:	2201      	movs	r2, #1
 800abc6:	2100      	movs	r1, #0
 800abc8:	2001      	movs	r0, #1
 800abca:	f001 f8e1 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800abce:	2204      	movs	r2, #4
 800abd0:	4934      	ldr	r1, [pc, #208]	@ (800aca4 <PingPong_Process+0x22c>)
 800abd2:	483b      	ldr	r0, [pc, #236]	@ (800acc0 <PingPong_Process+0x248>)
 800abd4:	f001 fb92 	bl	800c2fc <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800abd8:	4b2e      	ldr	r3, [pc, #184]	@ (800ac94 <PingPong_Process+0x21c>)
 800abda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abdc:	2140      	movs	r1, #64	@ 0x40
 800abde:	4838      	ldr	r0, [pc, #224]	@ (800acc0 <PingPong_Process+0x248>)
 800abe0:	4798      	blx	r3
      break;
 800abe2:	e054      	b.n	800ac8e <PingPong_Process+0x216>
            isMaster = true;
 800abe4:	4b2d      	ldr	r3, [pc, #180]	@ (800ac9c <PingPong_Process+0x224>)
 800abe6:	2201      	movs	r2, #1
 800abe8:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800abea:	4b37      	ldr	r3, [pc, #220]	@ (800acc8 <PingPong_Process+0x250>)
 800abec:	2201      	movs	r2, #1
 800abee:	2100      	movs	r1, #0
 800abf0:	2001      	movs	r0, #1
 800abf2:	f001 f8cd 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800abf6:	4b27      	ldr	r3, [pc, #156]	@ (800ac94 <PingPong_Process+0x21c>)
 800abf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800abfe:	4798      	blx	r3
      break;
 800ac00:	e045      	b.n	800ac8e <PingPong_Process+0x216>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800ac02:	4b34      	ldr	r3, [pc, #208]	@ (800acd4 <PingPong_Process+0x25c>)
 800ac04:	2201      	movs	r2, #1
 800ac06:	2100      	movs	r1, #0
 800ac08:	2001      	movs	r0, #1
 800ac0a:	f001 f8c1 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800ac0e:	4b21      	ldr	r3, [pc, #132]	@ (800ac94 <PingPong_Process+0x21c>)
 800ac10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac12:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800ac16:	4798      	blx	r3
      break;
 800ac18:	e03a      	b.n	800ac90 <PingPong_Process+0x218>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800ac1a:	4b20      	ldr	r3, [pc, #128]	@ (800ac9c <PingPong_Process+0x224>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01b      	beq.n	800ac5a <PingPong_Process+0x1e2>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800ac22:	4b1c      	ldr	r3, [pc, #112]	@ (800ac94 <PingPong_Process+0x21c>)
 800ac24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac26:	4798      	blx	r3
 800ac28:	4603      	mov	r3, r0
 800ac2a:	4a2b      	ldr	r2, [pc, #172]	@ (800acd8 <PingPong_Process+0x260>)
 800ac2c:	6812      	ldr	r2, [r2, #0]
 800ac2e:	4413      	add	r3, r2
 800ac30:	33c8      	adds	r3, #200	@ 0xc8
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f5 ff92 	bl	8000b5c <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800ac38:	4b1f      	ldr	r3, [pc, #124]	@ (800acb8 <PingPong_Process+0x240>)
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	2001      	movs	r0, #1
 800ac40:	f001 f8a6 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800ac44:	2204      	movs	r2, #4
 800ac46:	491d      	ldr	r1, [pc, #116]	@ (800acbc <PingPong_Process+0x244>)
 800ac48:	481d      	ldr	r0, [pc, #116]	@ (800acc0 <PingPong_Process+0x248>)
 800ac4a:	f001 fb57 	bl	800c2fc <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800ac4e:	4b11      	ldr	r3, [pc, #68]	@ (800ac94 <PingPong_Process+0x21c>)
 800ac50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac52:	2140      	movs	r1, #64	@ 0x40
 800ac54:	481a      	ldr	r0, [pc, #104]	@ (800acc0 <PingPong_Process+0x248>)
 800ac56:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800ac58:	e01a      	b.n	800ac90 <PingPong_Process+0x218>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800ac5a:	4b1a      	ldr	r3, [pc, #104]	@ (800acc4 <PingPong_Process+0x24c>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	2100      	movs	r1, #0
 800ac60:	2001      	movs	r0, #1
 800ac62:	f001 f895 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800ac66:	4b0b      	ldr	r3, [pc, #44]	@ (800ac94 <PingPong_Process+0x21c>)
 800ac68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800ac6e:	4798      	blx	r3
      break;
 800ac70:	e00e      	b.n	800ac90 <PingPong_Process+0x218>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800ac72:	4b14      	ldr	r3, [pc, #80]	@ (800acc4 <PingPong_Process+0x24c>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	2100      	movs	r1, #0
 800ac78:	2001      	movs	r0, #1
 800ac7a:	f001 f889 	bl	800bd90 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800ac7e:	4b05      	ldr	r3, [pc, #20]	@ (800ac94 <PingPong_Process+0x21c>)
 800ac80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac82:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800ac86:	4798      	blx	r3
      break;
 800ac88:	e002      	b.n	800ac90 <PingPong_Process+0x218>
    default:
      break;
 800ac8a:	bf00      	nop
 800ac8c:	e000      	b.n	800ac90 <PingPong_Process+0x218>
      break;
 800ac8e:	bf00      	nop
  }
}
 800ac90:	bf00      	nop
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	0800c718 	.word	0x0800c718
 800ac98:	20000340 	.word	0x20000340
 800ac9c:	20000009 	.word	0x20000009
 800aca0:	20000544 	.word	0x20000544
 800aca4:	0800c50c 	.word	0x0800c50c
 800aca8:	20000344 	.word	0x20000344
 800acac:	20000548 	.word	0x20000548
 800acb0:	48000400 	.word	0x48000400
 800acb4:	0800c514 	.word	0x0800c514
 800acb8:	0800c520 	.word	0x0800c520
 800acbc:	0800c534 	.word	0x0800c534
 800acc0:	20000444 	.word	0x20000444
 800acc4:	0800c53c 	.word	0x0800c53c
 800acc8:	0800c550 	.word	0x0800c550
 800accc:	0800c564 	.word	0x0800c564
 800acd0:	0800c570 	.word	0x0800c570
 800acd4:	0800c584 	.word	0x0800c584
 800acd8:	20000560 	.word	0x20000560

0800acdc <OnledEvent>:

static void OnledEvent(void *context)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800ace4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ace8:	4807      	ldr	r0, [pc, #28]	@ (800ad08 <OnledEvent+0x2c>)
 800acea:	f7f7 fc2a 	bl	8002542 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800acee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800acf2:	4805      	ldr	r0, [pc, #20]	@ (800ad08 <OnledEvent+0x2c>)
 800acf4:	f7f7 fc25 	bl	8002542 <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLed);
 800acf8:	4804      	ldr	r0, [pc, #16]	@ (800ad0c <OnledEvent+0x30>)
 800acfa:	f000 fde3 	bl	800b8c4 <UTIL_TIMER_Start>
}
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	48000400 	.word	0x48000400
 800ad0c:	20000548 	.word	0x20000548

0800ad10 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800ad1a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bc80      	pop	{r7}
 800ad24:	4770      	bx	lr

0800ad26 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800ad34:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bc80      	pop	{r7}
 800ad3e:	4770      	bx	lr

0800ad40 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800ad46:	2302      	movs	r3, #2
 800ad48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800ad4a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr

0800ad56 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ad56:	b480      	push	{r7}
 800ad58:	b083      	sub	sp, #12
 800ad5a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800ad60:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bc80      	pop	{r7}
 800ad6a:	4770      	bx	lr

0800ad6c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800ad72:	2300      	movs	r3, #0
 800ad74:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800ad76:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bc80      	pop	{r7}
 800ad80:	4770      	bx	lr

0800ad82 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b085      	sub	sp, #20
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	4603      	mov	r3, r0
 800ad8a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d102      	bne.n	800ad9c <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800ad96:	230f      	movs	r3, #15
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	e001      	b.n	800ada0 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800ad9c:	2316      	movs	r3, #22
 800ad9e:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800ada0:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr

0800adac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800adb0:	4b04      	ldr	r3, [pc, #16]	@ (800adc4 <UTIL_LPM_Init+0x18>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800adb6:	4b04      	ldr	r3, [pc, #16]	@ (800adc8 <UTIL_LPM_Init+0x1c>)
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800adbc:	bf00      	nop
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bc80      	pop	{r7}
 800adc2:	4770      	bx	lr
 800adc4:	20000564 	.word	0x20000564
 800adc8:	20000568 	.word	0x20000568

0800adcc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800adcc:	b480      	push	{r7}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800add8:	f3ef 8310 	mrs	r3, PRIMASK
 800addc:	613b      	str	r3, [r7, #16]
  return(result);
 800adde:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ade0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ade2:	b672      	cpsid	i
}
 800ade4:	bf00      	nop
  
  switch( state )
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d008      	beq.n	800adfe <UTIL_LPM_SetStopMode+0x32>
 800adec:	2b01      	cmp	r3, #1
 800adee:	d10e      	bne.n	800ae0e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800adf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <UTIL_LPM_SetStopMode+0x5c>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	4a0b      	ldr	r2, [pc, #44]	@ (800ae28 <UTIL_LPM_SetStopMode+0x5c>)
 800adfa:	6013      	str	r3, [r2, #0]
      break;
 800adfc:	e008      	b.n	800ae10 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	43da      	mvns	r2, r3
 800ae02:	4b09      	ldr	r3, [pc, #36]	@ (800ae28 <UTIL_LPM_SetStopMode+0x5c>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4013      	ands	r3, r2
 800ae08:	4a07      	ldr	r2, [pc, #28]	@ (800ae28 <UTIL_LPM_SetStopMode+0x5c>)
 800ae0a:	6013      	str	r3, [r2, #0]
      break;
 800ae0c:	e000      	b.n	800ae10 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ae0e:	bf00      	nop
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f383 8810 	msr	PRIMASK, r3
}
 800ae1a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ae1c:	bf00      	nop
 800ae1e:	371c      	adds	r7, #28
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bc80      	pop	{r7}
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	20000564 	.word	0x20000564

0800ae2c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae38:	f3ef 8310 	mrs	r3, PRIMASK
 800ae3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ae3e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ae40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae42:	b672      	cpsid	i
}
 800ae44:	bf00      	nop
  
  switch(state)
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d008      	beq.n	800ae5e <UTIL_LPM_SetOffMode+0x32>
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d10e      	bne.n	800ae6e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ae50:	4b0d      	ldr	r3, [pc, #52]	@ (800ae88 <UTIL_LPM_SetOffMode+0x5c>)
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	4a0b      	ldr	r2, [pc, #44]	@ (800ae88 <UTIL_LPM_SetOffMode+0x5c>)
 800ae5a:	6013      	str	r3, [r2, #0]
      break;
 800ae5c:	e008      	b.n	800ae70 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	43da      	mvns	r2, r3
 800ae62:	4b09      	ldr	r3, [pc, #36]	@ (800ae88 <UTIL_LPM_SetOffMode+0x5c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4013      	ands	r3, r2
 800ae68:	4a07      	ldr	r2, [pc, #28]	@ (800ae88 <UTIL_LPM_SetOffMode+0x5c>)
 800ae6a:	6013      	str	r3, [r2, #0]
      break;
 800ae6c:	e000      	b.n	800ae70 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ae6e:	bf00      	nop
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f383 8810 	msr	PRIMASK, r3
}
 800ae7a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ae7c:	bf00      	nop
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bc80      	pop	{r7}
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	20000568 	.word	0x20000568

0800ae8c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae92:	f3ef 8310 	mrs	r3, PRIMASK
 800ae96:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae98:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800ae9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae9c:	b672      	cpsid	i
}
 800ae9e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800aea0:	4b12      	ldr	r3, [pc, #72]	@ (800aeec <UTIL_LPM_EnterLowPower+0x60>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d006      	beq.n	800aeb6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800aea8:	4b11      	ldr	r3, [pc, #68]	@ (800aef0 <UTIL_LPM_EnterLowPower+0x64>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800aeae:	4b10      	ldr	r3, [pc, #64]	@ (800aef0 <UTIL_LPM_EnterLowPower+0x64>)
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	4798      	blx	r3
 800aeb4:	e010      	b.n	800aed8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	@ (800aef4 <UTIL_LPM_EnterLowPower+0x68>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d006      	beq.n	800aecc <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800aebe:	4b0c      	ldr	r3, [pc, #48]	@ (800aef0 <UTIL_LPM_EnterLowPower+0x64>)
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <UTIL_LPM_EnterLowPower+0x64>)
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	4798      	blx	r3
 800aeca:	e005      	b.n	800aed8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800aecc:	4b08      	ldr	r3, [pc, #32]	@ (800aef0 <UTIL_LPM_EnterLowPower+0x64>)
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800aed2:	4b07      	ldr	r3, [pc, #28]	@ (800aef0 <UTIL_LPM_EnterLowPower+0x64>)
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	4798      	blx	r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f383 8810 	msr	PRIMASK, r3
}
 800aee2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000564 	.word	0x20000564
 800aef0:	0800c5e8 	.word	0x0800c5e8
 800aef4:	20000568 	.word	0x20000568

0800aef8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	613b      	str	r3, [r7, #16]

  while( size-- )
 800af0e:	e007      	b.n	800af20 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	1c53      	adds	r3, r2, #1
 800af14:	613b      	str	r3, [r7, #16]
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	1c59      	adds	r1, r3, #1
 800af1a:	6179      	str	r1, [r7, #20]
 800af1c:	7812      	ldrb	r2, [r2, #0]
 800af1e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	1e5a      	subs	r2, r3, #1
 800af24:	80fa      	strh	r2, [r7, #6]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1f2      	bne.n	800af10 <UTIL_MEM_cpy_8+0x18>
    }
}
 800af2a:	bf00      	nop
 800af2c:	bf00      	nop
 800af2e:	371c      	adds	r7, #28
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr

0800af36 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800af36:	b480      	push	{r7}
 800af38:	b085      	sub	sp, #20
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	70fb      	strb	r3, [r7, #3]
 800af42:	4613      	mov	r3, r2
 800af44:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800af4a:	e004      	b.n	800af56 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	60fa      	str	r2, [r7, #12]
 800af52:	78fa      	ldrb	r2, [r7, #3]
 800af54:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800af56:	883b      	ldrh	r3, [r7, #0]
 800af58:	1e5a      	subs	r2, r3, #1
 800af5a:	803a      	strh	r2, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f5      	bne.n	800af4c <UTIL_MEM_set_8+0x16>
  }
}
 800af60:	bf00      	nop
 800af62:	bf00      	nop
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	bc80      	pop	{r7}
 800af6a:	4770      	bx	lr

0800af6c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800af6c:	b082      	sub	sp, #8
 800af6e:	b480      	push	{r7}
 800af70:	b087      	sub	sp, #28
 800af72:	af00      	add	r7, sp, #0
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	1d38      	adds	r0, r7, #4
 800af78:	e880 0006 	stmia.w	r0, {r1, r2}
 800af7c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800af7e:	2300      	movs	r3, #0
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	2300      	movs	r3, #0
 800af84:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	4413      	add	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800af8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800af92:	b29a      	uxth	r2, r3
 800af94:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4413      	add	r3, r2
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	b21b      	sxth	r3, r3
 800afa0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800afa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800afa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800afaa:	db0a      	blt.n	800afc2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	3301      	adds	r3, #1
 800afb0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800afb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	b21b      	sxth	r3, r3
 800afc0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	461a      	mov	r2, r3
 800afc6:	f107 0310 	add.w	r3, r7, #16
 800afca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800afce:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bc80      	pop	{r7}
 800afda:	b002      	add	sp, #8
 800afdc:	4770      	bx	lr
	...

0800afe0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08a      	sub	sp, #40	@ 0x28
 800afe4:	af02      	add	r7, sp, #8
 800afe6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800afe8:	2300      	movs	r3, #0
 800afea:	61bb      	str	r3, [r7, #24]
 800afec:	2300      	movs	r3, #0
 800afee:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800aff0:	2300      	movs	r3, #0
 800aff2:	613b      	str	r3, [r7, #16]
 800aff4:	2300      	movs	r3, #0
 800aff6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800aff8:	4b14      	ldr	r3, [pc, #80]	@ (800b04c <SysTimeGet+0x6c>)
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	f107 0218 	add.w	r2, r7, #24
 800b000:	3204      	adds	r2, #4
 800b002:	4610      	mov	r0, r2
 800b004:	4798      	blx	r3
 800b006:	4603      	mov	r3, r0
 800b008:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b00a:	4b10      	ldr	r3, [pc, #64]	@ (800b04c <SysTimeGet+0x6c>)
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	4798      	blx	r3
 800b010:	4603      	mov	r3, r0
 800b012:	b21b      	sxth	r3, r3
 800b014:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b016:	4b0d      	ldr	r3, [pc, #52]	@ (800b04c <SysTimeGet+0x6c>)
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4798      	blx	r3
 800b01c:	4603      	mov	r3, r0
 800b01e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b020:	f107 0010 	add.w	r0, r7, #16
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	f107 0208 	add.w	r2, r7, #8
 800b02e:	ca06      	ldmia	r2, {r1, r2}
 800b030:	f7ff ff9c 	bl	800af6c <SysTimeAdd>

  return sysTime;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	461a      	mov	r2, r3
 800b038:	f107 0310 	add.w	r3, r7, #16
 800b03c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b040:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	3720      	adds	r7, #32
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	0800c6cc 	.word	0x0800c6cc

0800b050 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b05c:	e00e      	b.n	800b07c <ee_skip_atoi+0x2c>
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	4618      	mov	r0, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	1c59      	adds	r1, r3, #1
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6011      	str	r1, [r2, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	4403      	add	r3, r0
 800b078:	3b30      	subs	r3, #48	@ 0x30
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b2f      	cmp	r3, #47	@ 0x2f
 800b084:	d904      	bls.n	800b090 <ee_skip_atoi+0x40>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	2b39      	cmp	r3, #57	@ 0x39
 800b08e:	d9e6      	bls.n	800b05e <ee_skip_atoi+0xe>
  return i;
 800b090:	68fb      	ldr	r3, [r7, #12]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	bc80      	pop	{r7}
 800b09a:	4770      	bx	lr

0800b09c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b099      	sub	sp, #100	@ 0x64
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b0aa:	4b71      	ldr	r3, [pc, #452]	@ (800b270 <ee_number+0x1d4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b0b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <ee_number+0x24>
 800b0ba:	4b6e      	ldr	r3, [pc, #440]	@ (800b274 <ee_number+0x1d8>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	dd02      	ble.n	800b0cc <ee_number+0x30>
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b24      	cmp	r3, #36	@ 0x24
 800b0ca:	dd01      	ble.n	800b0d0 <ee_number+0x34>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e0ca      	b.n	800b266 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b0d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <ee_number+0x42>
 800b0da:	2330      	movs	r3, #48	@ 0x30
 800b0dc:	e000      	b.n	800b0e0 <ee_number+0x44>
 800b0de:	2320      	movs	r3, #32
 800b0e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800b0ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0ec:	f003 0302 	and.w	r3, r3, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <ee_number+0x70>
  {
    if (num < 0)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da08      	bge.n	800b10c <ee_number+0x70>
    {
      sign = '-';
 800b0fa:	232d      	movs	r3, #45	@ 0x2d
 800b0fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	425b      	negs	r3, r3
 800b104:	607b      	str	r3, [r7, #4]
      size--;
 800b106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b108:	3b01      	subs	r3, #1
 800b10a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d11e      	bne.n	800b154 <ee_number+0xb8>
    tmp[i++] = '0';
 800b116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	657a      	str	r2, [r7, #84]	@ 0x54
 800b11c:	3360      	adds	r3, #96	@ 0x60
 800b11e:	443b      	add	r3, r7
 800b120:	2230      	movs	r2, #48	@ 0x30
 800b122:	f803 2c50 	strb.w	r2, [r3, #-80]
 800b126:	e018      	b.n	800b15a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b130:	fb01 f202 	mul.w	r2, r1, r2
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b138:	441a      	add	r2, r3
 800b13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b13c:	1c59      	adds	r1, r3, #1
 800b13e:	6579      	str	r1, [r7, #84]	@ 0x54
 800b140:	7812      	ldrb	r2, [r2, #0]
 800b142:	3360      	adds	r3, #96	@ 0x60
 800b144:	443b      	add	r3, r7
 800b146:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b152:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e6      	bne.n	800b128 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800b15a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b15c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b15e:	429a      	cmp	r2, r3
 800b160:	dd01      	ble.n	800b166 <ee_number+0xca>
 800b162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b164:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800b166:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b16e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d112      	bne.n	800b19e <ee_number+0x102>
 800b178:	e00c      	b.n	800b194 <ee_number+0xf8>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	1c5a      	adds	r2, r3, #1
 800b17e:	60fa      	str	r2, [r7, #12]
 800b180:	2220      	movs	r2, #32
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3b01      	subs	r3, #1
 800b188:	60bb      	str	r3, [r7, #8]
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <ee_number+0xf8>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	e068      	b.n	800b266 <ee_number+0x1ca>
 800b194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b196:	1e5a      	subs	r2, r3, #1
 800b198:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dced      	bgt.n	800b17a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800b19e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01b      	beq.n	800b1de <ee_number+0x142>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	60fa      	str	r2, [r7, #12]
 800b1ac:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800b1b0:	701a      	strb	r2, [r3, #0]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	60bb      	str	r3, [r7, #8]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10f      	bne.n	800b1de <ee_number+0x142>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	e051      	b.n	800b266 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	60fa      	str	r2, [r7, #12]
 800b1c8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800b1cc:	701a      	strb	r2, [r3, #0]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	60bb      	str	r3, [r7, #8]
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <ee_number+0x142>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	e043      	b.n	800b266 <ee_number+0x1ca>
 800b1de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1e0:	1e5a      	subs	r2, r3, #1
 800b1e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dcec      	bgt.n	800b1c2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800b1e8:	e00c      	b.n	800b204 <ee_number+0x168>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	60fa      	str	r2, [r7, #12]
 800b1f0:	2230      	movs	r2, #48	@ 0x30
 800b1f2:	701a      	strb	r2, [r3, #0]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	60bb      	str	r3, [r7, #8]
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <ee_number+0x168>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	e030      	b.n	800b266 <ee_number+0x1ca>
 800b204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b206:	1e5a      	subs	r2, r3, #1
 800b208:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b20a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b20c:	429a      	cmp	r2, r3
 800b20e:	dbec      	blt.n	800b1ea <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800b210:	e010      	b.n	800b234 <ee_number+0x198>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	60fa      	str	r2, [r7, #12]
 800b218:	f107 0110 	add.w	r1, r7, #16
 800b21c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b21e:	440a      	add	r2, r1
 800b220:	7812      	ldrb	r2, [r2, #0]
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	3b01      	subs	r3, #1
 800b228:	60bb      	str	r3, [r7, #8]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <ee_number+0x198>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	e018      	b.n	800b266 <ee_number+0x1ca>
 800b234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b236:	1e5a      	subs	r2, r3, #1
 800b238:	657a      	str	r2, [r7, #84]	@ 0x54
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	dce9      	bgt.n	800b212 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800b23e:	e00c      	b.n	800b25a <ee_number+0x1be>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	60fa      	str	r2, [r7, #12]
 800b246:	2220      	movs	r2, #32
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	60bb      	str	r3, [r7, #8]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <ee_number+0x1be>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	e005      	b.n	800b266 <ee_number+0x1ca>
 800b25a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b25c:	1e5a      	subs	r2, r3, #1
 800b25e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b260:	2b00      	cmp	r3, #0
 800b262:	dced      	bgt.n	800b240 <ee_number+0x1a4>

  return str;
 800b264:	68fb      	ldr	r3, [r7, #12]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3764      	adds	r7, #100	@ 0x64
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr
 800b270:	2000000c 	.word	0x2000000c
 800b274:	20000010 	.word	0x20000010

0800b278 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b092      	sub	sp, #72	@ 0x48
 800b27c:	af04      	add	r7, sp, #16
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	dc01      	bgt.n	800b290 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	e13e      	b.n	800b50e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b294:	e128      	b.n	800b4e8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	1ad2      	subs	r2, r2, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	f280 812e 	bge.w	800b502 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b25      	cmp	r3, #37	@ 0x25
 800b2ac:	d006      	beq.n	800b2bc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	1c59      	adds	r1, r3, #1
 800b2b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b2b6:	7812      	ldrb	r2, [r2, #0]
 800b2b8:	701a      	strb	r2, [r3, #0]
      continue;
 800b2ba:	e112      	b.n	800b4e2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b30      	cmp	r3, #48	@ 0x30
 800b2cc:	d103      	bne.n	800b2d6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	f043 0301 	orr.w	r3, r3, #1
 800b2d4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2da:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b2e2:	d908      	bls.n	800b2f6 <tiny_vsnprintf_like+0x7e>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2b39      	cmp	r3, #57	@ 0x39
 800b2ea:	d804      	bhi.n	800b2f6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b2ec:	1d3b      	adds	r3, r7, #4
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff feae 	bl	800b050 <ee_skip_atoi>
 800b2f4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fa:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b300:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b302:	230a      	movs	r3, #10
 800b304:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	3b58      	subs	r3, #88	@ 0x58
 800b30c:	2b20      	cmp	r3, #32
 800b30e:	f200 8094 	bhi.w	800b43a <tiny_vsnprintf_like+0x1c2>
 800b312:	a201      	add	r2, pc, #4	@ (adr r2, 800b318 <tiny_vsnprintf_like+0xa0>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b423 	.word	0x0800b423
 800b31c:	0800b43b 	.word	0x0800b43b
 800b320:	0800b43b 	.word	0x0800b43b
 800b324:	0800b43b 	.word	0x0800b43b
 800b328:	0800b43b 	.word	0x0800b43b
 800b32c:	0800b43b 	.word	0x0800b43b
 800b330:	0800b43b 	.word	0x0800b43b
 800b334:	0800b43b 	.word	0x0800b43b
 800b338:	0800b43b 	.word	0x0800b43b
 800b33c:	0800b43b 	.word	0x0800b43b
 800b340:	0800b43b 	.word	0x0800b43b
 800b344:	0800b3a7 	.word	0x0800b3a7
 800b348:	0800b431 	.word	0x0800b431
 800b34c:	0800b43b 	.word	0x0800b43b
 800b350:	0800b43b 	.word	0x0800b43b
 800b354:	0800b43b 	.word	0x0800b43b
 800b358:	0800b43b 	.word	0x0800b43b
 800b35c:	0800b431 	.word	0x0800b431
 800b360:	0800b43b 	.word	0x0800b43b
 800b364:	0800b43b 	.word	0x0800b43b
 800b368:	0800b43b 	.word	0x0800b43b
 800b36c:	0800b43b 	.word	0x0800b43b
 800b370:	0800b43b 	.word	0x0800b43b
 800b374:	0800b43b 	.word	0x0800b43b
 800b378:	0800b43b 	.word	0x0800b43b
 800b37c:	0800b43b 	.word	0x0800b43b
 800b380:	0800b43b 	.word	0x0800b43b
 800b384:	0800b3c7 	.word	0x0800b3c7
 800b388:	0800b43b 	.word	0x0800b43b
 800b38c:	0800b487 	.word	0x0800b487
 800b390:	0800b43b 	.word	0x0800b43b
 800b394:	0800b43b 	.word	0x0800b43b
 800b398:	0800b42b 	.word	0x0800b42b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39e:	1c5a      	adds	r2, r3, #1
 800b3a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3a2:	2220      	movs	r2, #32
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	61fb      	str	r3, [r7, #28]
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	dcf4      	bgt.n	800b39c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	1d1a      	adds	r2, r3, #4
 800b3b6:	603a      	str	r2, [r7, #0]
 800b3b8:	6819      	ldr	r1, [r3, #0]
 800b3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3bc:	1c5a      	adds	r2, r3, #1
 800b3be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3c0:	b2ca      	uxtb	r2, r1
 800b3c2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b3c4:	e08d      	b.n	800b4e2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	1d1a      	adds	r2, r3, #4
 800b3ca:	603a      	str	r2, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <tiny_vsnprintf_like+0x162>
 800b3d6:	4b50      	ldr	r3, [pc, #320]	@ (800b518 <tiny_vsnprintf_like+0x2a0>)
 800b3d8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b3da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b3dc:	f7f4 fecc 	bl	8000178 <strlen>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b3e4:	e004      	b.n	800b3f0 <tiny_vsnprintf_like+0x178>
 800b3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	701a      	strb	r2, [r3, #0]
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	1e5a      	subs	r2, r3, #1
 800b3f4:	61fa      	str	r2, [r7, #28]
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	dbf4      	blt.n	800b3e6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b400:	e00a      	b.n	800b418 <tiny_vsnprintf_like+0x1a0>
 800b402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b404:	1c53      	adds	r3, r2, #1
 800b406:	627b      	str	r3, [r7, #36]	@ 0x24
 800b408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40a:	1c59      	adds	r1, r3, #1
 800b40c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b40e:	7812      	ldrb	r2, [r2, #0]
 800b410:	701a      	strb	r2, [r3, #0]
 800b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b414:	3301      	adds	r3, #1
 800b416:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	dbf0      	blt.n	800b402 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b420:	e05f      	b.n	800b4e2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b428:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b42a:	2310      	movs	r3, #16
 800b42c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800b42e:	e02b      	b.n	800b488 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	f043 0302 	orr.w	r3, r3, #2
 800b436:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b438:	e025      	b.n	800b486 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b25      	cmp	r3, #37	@ 0x25
 800b440:	d004      	beq.n	800b44c <tiny_vsnprintf_like+0x1d4>
 800b442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b444:	1c5a      	adds	r2, r3, #1
 800b446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b448:	2225      	movs	r2, #37	@ 0x25
 800b44a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1ad2      	subs	r2, r2, r3
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	3b01      	subs	r3, #1
 800b456:	429a      	cmp	r2, r3
 800b458:	da16      	bge.n	800b488 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d006      	beq.n	800b470 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	1c59      	adds	r1, r3, #1
 800b468:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e002      	b.n	800b476 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	3b01      	subs	r3, #1
 800b474:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	1ad2      	subs	r2, r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	3b01      	subs	r3, #1
 800b480:	429a      	cmp	r2, r3
 800b482:	db2d      	blt.n	800b4e0 <tiny_vsnprintf_like+0x268>
 800b484:	e000      	b.n	800b488 <tiny_vsnprintf_like+0x210>
        break;
 800b486:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	2b6c      	cmp	r3, #108	@ 0x6c
 800b48c:	d105      	bne.n	800b49a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	1d1a      	adds	r2, r3, #4
 800b492:	603a      	str	r2, [r7, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	637b      	str	r3, [r7, #52]	@ 0x34
 800b498:	e00f      	b.n	800b4ba <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	f003 0302 	and.w	r3, r3, #2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	1d1a      	adds	r2, r3, #4
 800b4a8:	603a      	str	r2, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ae:	e004      	b.n	800b4ba <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	1d1a      	adds	r2, r3, #4
 800b4b4:	603a      	str	r2, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	1e5a      	subs	r2, r3, #1
 800b4be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	1acb      	subs	r3, r1, r3
 800b4c4:	1ad1      	subs	r1, r2, r3
 800b4c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	9302      	str	r3, [sp, #8]
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4d8:	f7ff fde0 	bl	800b09c <ee_number>
 800b4dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b4de:	e000      	b.n	800b4e2 <tiny_vsnprintf_like+0x26a>
        continue;
 800b4e0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	607b      	str	r3, [r7, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f47f aed2 	bne.w	800b296 <tiny_vsnprintf_like+0x1e>
 800b4f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	1ad2      	subs	r2, r2, r3
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	f6bf aeca 	bge.w	800b296 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	2200      	movs	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	1ad3      	subs	r3, r2, r3
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3738      	adds	r7, #56	@ 0x38
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	0800c5e0 	.word	0x0800c5e0

0800b51c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b090      	sub	sp, #64	@ 0x40
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b524:	4b73      	ldr	r3, [pc, #460]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800b52a:	4b72      	ldr	r3, [pc, #456]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4013      	ands	r3, r2
 800b532:	4a70      	ldr	r2, [pc, #448]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b534:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b536:	4b70      	ldr	r3, [pc, #448]	@ (800b6f8 <UTIL_SEQ_Run+0x1dc>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b53c:	4b6f      	ldr	r3, [pc, #444]	@ (800b6fc <UTIL_SEQ_Run+0x1e0>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b542:	4b6f      	ldr	r3, [pc, #444]	@ (800b700 <UTIL_SEQ_Run+0x1e4>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800b548:	4b6e      	ldr	r3, [pc, #440]	@ (800b704 <UTIL_SEQ_Run+0x1e8>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b54e:	e08d      	b.n	800b66c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b554:	e002      	b.n	800b55c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b558:	3301      	adds	r3, #1
 800b55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b55c:	4a6a      	ldr	r2, [pc, #424]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b560:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b566:	401a      	ands	r2, r3
 800b568:	4b62      	ldr	r3, [pc, #392]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4013      	ands	r3, r2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0f1      	beq.n	800b556 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b572:	4a65      	ldr	r2, [pc, #404]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b576:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57c:	401a      	ands	r2, r3
 800b57e:	4b5d      	ldr	r3, [pc, #372]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4013      	ands	r3, r2
 800b584:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b586:	4a60      	ldr	r2, [pc, #384]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4413      	add	r3, r2
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	4013      	ands	r3, r2
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b598:	4a5b      	ldr	r2, [pc, #364]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	4413      	add	r3, r2
 800b5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b5a6:	4a58      	ldr	r2, [pc, #352]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5aa:	00db      	lsls	r3, r3, #3
 800b5ac:	4413      	add	r3, r2
 800b5ae:	685a      	ldr	r2, [r3, #4]
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 f907 	bl	800b7c8 <SEQ_BitPosition>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4b53      	ldr	r3, [pc, #332]	@ (800b70c <UTIL_SEQ_Run+0x1f0>)
 800b5c0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b5c2:	4a51      	ldr	r2, [pc, #324]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5c6:	00db      	lsls	r3, r3, #3
 800b5c8:	4413      	add	r3, r2
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	4b4f      	ldr	r3, [pc, #316]	@ (800b70c <UTIL_SEQ_Run+0x1f0>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d6:	43db      	mvns	r3, r3
 800b5d8:	401a      	ands	r2, r3
 800b5da:	494b      	ldr	r1, [pc, #300]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	440b      	add	r3, r1
 800b5e2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5ea:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b5ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5ee:	b672      	cpsid	i
}
 800b5f0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b5f2:	4b46      	ldr	r3, [pc, #280]	@ (800b70c <UTIL_SEQ_Run+0x1f0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	43da      	mvns	r2, r3
 800b5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800b6f8 <UTIL_SEQ_Run+0x1dc>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4013      	ands	r3, r2
 800b604:	4a3c      	ldr	r2, [pc, #240]	@ (800b6f8 <UTIL_SEQ_Run+0x1dc>)
 800b606:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b608:	2301      	movs	r3, #1
 800b60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b60c:	e013      	b.n	800b636 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b610:	3b01      	subs	r3, #1
 800b612:	4a3d      	ldr	r2, [pc, #244]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b614:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b618:	4b3c      	ldr	r3, [pc, #240]	@ (800b70c <UTIL_SEQ_Run+0x1f0>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2201      	movs	r2, #1
 800b61e:	fa02 f303 	lsl.w	r3, r2, r3
 800b622:	43da      	mvns	r2, r3
 800b624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b626:	3b01      	subs	r3, #1
 800b628:	400a      	ands	r2, r1
 800b62a:	4937      	ldr	r1, [pc, #220]	@ (800b708 <UTIL_SEQ_Run+0x1ec>)
 800b62c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b632:	3b01      	subs	r3, #1
 800b634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e8      	bne.n	800b60e <UTIL_SEQ_Run+0xf2>
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f383 8810 	msr	PRIMASK, r3
}
 800b646:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b648:	4b30      	ldr	r3, [pc, #192]	@ (800b70c <UTIL_SEQ_Run+0x1f0>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a30      	ldr	r2, [pc, #192]	@ (800b710 <UTIL_SEQ_Run+0x1f4>)
 800b64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b652:	4798      	blx	r3

    local_taskset = TaskSet;
 800b654:	4b28      	ldr	r3, [pc, #160]	@ (800b6f8 <UTIL_SEQ_Run+0x1dc>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800b65a:	4b28      	ldr	r3, [pc, #160]	@ (800b6fc <UTIL_SEQ_Run+0x1e0>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800b660:	4b27      	ldr	r3, [pc, #156]	@ (800b700 <UTIL_SEQ_Run+0x1e4>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800b666:	4b27      	ldr	r3, [pc, #156]	@ (800b704 <UTIL_SEQ_Run+0x1e8>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b66c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	401a      	ands	r2, r3
 800b672:	4b20      	ldr	r3, [pc, #128]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4013      	ands	r3, r2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <UTIL_SEQ_Run+0x16c>
 800b67c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b680:	4013      	ands	r3, r2
 800b682:	2b00      	cmp	r3, #0
 800b684:	f43f af64 	beq.w	800b550 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b688:	4b20      	ldr	r3, [pc, #128]	@ (800b70c <UTIL_SEQ_Run+0x1f0>)
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b690:	f000 f88e 	bl	800b7b0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b694:	f3ef 8310 	mrs	r3, PRIMASK
 800b698:	613b      	str	r3, [r7, #16]
  return(result);
 800b69a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b69c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b69e:	b672      	cpsid	i
}
 800b6a0:	bf00      	nop
  local_taskset = TaskSet;
 800b6a2:	4b15      	ldr	r3, [pc, #84]	@ (800b6f8 <UTIL_SEQ_Run+0x1dc>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b6a8:	4b14      	ldr	r3, [pc, #80]	@ (800b6fc <UTIL_SEQ_Run+0x1e0>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b6ae:	4b14      	ldr	r3, [pc, #80]	@ (800b700 <UTIL_SEQ_Run+0x1e4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b6b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	401a      	ands	r2, r3
 800b6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4013      	ands	r3, r2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d107      	bne.n	800b6d4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <UTIL_SEQ_Run+0x1e8>)
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b6d0:	f7f5 f9da 	bl	8000a88 <UTIL_SEQ_Idle>
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f383 8810 	msr	PRIMASK, r3
}
 800b6de:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b6e0:	f000 f86c 	bl	800b7bc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b6e4:	4a03      	ldr	r2, [pc, #12]	@ (800b6f4 <UTIL_SEQ_Run+0x1d8>)
 800b6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e8:	6013      	str	r3, [r2, #0]

  return;
 800b6ea:	bf00      	nop
}
 800b6ec:	3740      	adds	r7, #64	@ 0x40
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20000018 	.word	0x20000018
 800b6f8:	2000056c 	.word	0x2000056c
 800b6fc:	20000570 	.word	0x20000570
 800b700:	20000014 	.word	0x20000014
 800b704:	20000574 	.word	0x20000574
 800b708:	20000580 	.word	0x20000580
 800b70c:	20000578 	.word	0x20000578
 800b710:	2000057c 	.word	0x2000057c

0800b714 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b720:	f3ef 8310 	mrs	r3, PRIMASK
 800b724:	617b      	str	r3, [r7, #20]
  return(result);
 800b726:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b72a:	b672      	cpsid	i
}
 800b72c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f000 f84a 	bl	800b7c8 <SEQ_BitPosition>
 800b734:	4603      	mov	r3, r0
 800b736:	4619      	mov	r1, r3
 800b738:	4a06      	ldr	r2, [pc, #24]	@ (800b754 <UTIL_SEQ_RegTask+0x40>)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	f383 8810 	msr	PRIMASK, r3
}
 800b74a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b74c:	bf00      	nop
}
 800b74e:	3720      	adds	r7, #32
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	2000057c 	.word	0x2000057c

0800b758 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b762:	f3ef 8310 	mrs	r3, PRIMASK
 800b766:	60fb      	str	r3, [r7, #12]
  return(result);
 800b768:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b76a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b76c:	b672      	cpsid	i
}
 800b76e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b770:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a8 <UTIL_SEQ_SetTask+0x50>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4313      	orrs	r3, r2
 800b778:	4a0b      	ldr	r2, [pc, #44]	@ (800b7a8 <UTIL_SEQ_SetTask+0x50>)
 800b77a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b77c:	4a0b      	ldr	r2, [pc, #44]	@ (800b7ac <UTIL_SEQ_SetTask+0x54>)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	431a      	orrs	r2, r3
 800b788:	4908      	ldr	r1, [pc, #32]	@ (800b7ac <UTIL_SEQ_SetTask+0x54>)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f383 8810 	msr	PRIMASK, r3
}
 800b79a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b79c:	bf00      	nop
}
 800b79e:	371c      	adds	r7, #28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bc80      	pop	{r7}
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	2000056c 	.word	0x2000056c
 800b7ac:	20000580 	.word	0x20000580

0800b7b0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b7b4:	bf00      	nop
}
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bc80      	pop	{r7}
 800b7ba:	4770      	bx	lr

0800b7bc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b7c0:	bf00      	nop
}
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bc80      	pop	{r7}
 800b7c6:	4770      	bx	lr

0800b7c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7de:	d204      	bcs.n	800b7ea <SEQ_BitPosition+0x22>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	73fb      	strb	r3, [r7, #15]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	041b      	lsls	r3, r3, #16
 800b7e8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7f0:	d205      	bcs.n	800b7fe <SEQ_BitPosition+0x36>
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	73fb      	strb	r3, [r7, #15]
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b804:	d205      	bcs.n	800b812 <SEQ_BitPosition+0x4a>
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	3304      	adds	r3, #4
 800b80a:	73fb      	strb	r3, [r7, #15]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	0f1b      	lsrs	r3, r3, #28
 800b816:	4a07      	ldr	r2, [pc, #28]	@ (800b834 <SEQ_BitPosition+0x6c>)
 800b818:	5cd2      	ldrb	r2, [r2, r3]
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	4413      	add	r3, r2
 800b81e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	f1c3 031f 	rsb	r3, r3, #31
 800b826:	b2db      	uxtb	r3, r3
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bc80      	pop	{r7}
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	0800c858 	.word	0x0800c858

0800b838 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b83c:	4b04      	ldr	r3, [pc, #16]	@ (800b850 <UTIL_TIMER_Init+0x18>)
 800b83e:	2200      	movs	r2, #0
 800b840:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b842:	4b04      	ldr	r3, [pc, #16]	@ (800b854 <UTIL_TIMER_Init+0x1c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4798      	blx	r3
 800b848:	4603      	mov	r3, r0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20000588 	.word	0x20000588
 800b854:	0800c6a0 	.word	0x0800c6a0

0800b858 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	603b      	str	r3, [r7, #0]
 800b864:	4613      	mov	r3, r2
 800b866:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d023      	beq.n	800b8b6 <UTIL_TIMER_Create+0x5e>
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d020      	beq.n	800b8b6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b87a:	4b11      	ldr	r3, [pc, #68]	@ (800b8c0 <UTIL_TIMER_Create+0x68>)
 800b87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87e:	68b8      	ldr	r0, [r7, #8]
 800b880:	4798      	blx	r3
 800b882:	4602      	mov	r2, r0
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	69ba      	ldr	r2, [r7, #24]
 800b8a4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	79fa      	ldrb	r2, [r7, #7]
 800b8aa:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e000      	b.n	800b8b8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b8b6:	2301      	movs	r3, #1
  }
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	0800c6a0 	.word	0x0800c6a0

0800b8c4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08a      	sub	sp, #40	@ 0x28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d056      	beq.n	800b986 <UTIL_TIMER_Start+0xc2>
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f9a9 	bl	800bc30 <TimerExists>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f083 0301 	eor.w	r3, r3, #1
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d04d      	beq.n	800b986 <UTIL_TIMER_Start+0xc2>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7a5b      	ldrb	r3, [r3, #9]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d149      	bne.n	800b986 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8f6:	613b      	str	r3, [r7, #16]
  return(result);
 800b8f8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8fc:	b672      	cpsid	i
}
 800b8fe:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b906:	4b24      	ldr	r3, [pc, #144]	@ (800b998 <UTIL_TIMER_Start+0xd4>)
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	4798      	blx	r3
 800b90c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b90e:	6a3a      	ldr	r2, [r7, #32]
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	429a      	cmp	r2, r3
 800b914:	d201      	bcs.n	800b91a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a3a      	ldr	r2, [r7, #32]
 800b91e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b932:	4b1a      	ldr	r3, [pc, #104]	@ (800b99c <UTIL_TIMER_Start+0xd8>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b93a:	4b17      	ldr	r3, [pc, #92]	@ (800b998 <UTIL_TIMER_Start+0xd4>)
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f9eb 	bl	800bd1c <TimerInsertNewHeadTimer>
 800b946:	e017      	b.n	800b978 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b948:	4b13      	ldr	r3, [pc, #76]	@ (800b998 <UTIL_TIMER_Start+0xd4>)
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	4798      	blx	r3
 800b94e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	441a      	add	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	4b0e      	ldr	r3, [pc, #56]	@ (800b99c <UTIL_TIMER_Start+0xd8>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d203      	bcs.n	800b972 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f9d6 	bl	800bd1c <TimerInsertNewHeadTimer>
 800b970:	e002      	b.n	800b978 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f9a2 	bl	800bcbc <TimerInsertTimer>
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f383 8810 	msr	PRIMASK, r3
}
 800b982:	bf00      	nop
  {
 800b984:	e002      	b.n	800b98c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b986:	2301      	movs	r3, #1
 800b988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800b98c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b990:	4618      	mov	r0, r3
 800b992:	3728      	adds	r7, #40	@ 0x28
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	0800c6a0 	.word	0x0800c6a0
 800b99c:	20000588 	.word	0x20000588

0800b9a0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d05b      	beq.n	800ba6a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b9ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9bc:	b672      	cpsid	i
}
 800b9be:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b9c0:	4b2d      	ldr	r3, [pc, #180]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b9c6:	4b2c      	ldr	r3, [pc, #176]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b9d2:	4b29      	ldr	r3, [pc, #164]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d041      	beq.n	800ba5e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b9e0:	4b25      	ldr	r3, [pc, #148]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d134      	bne.n	800ba54 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b9ea:	4b23      	ldr	r3, [pc, #140]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b9f2:	4b21      	ldr	r3, [pc, #132]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b9fc:	4b1e      	ldr	r3, [pc, #120]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	4a1d      	ldr	r2, [pc, #116]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800ba04:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800ba06:	4b1c      	ldr	r3, [pc, #112]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 f92c 	bl	800bc68 <TimerSetTimeout>
 800ba10:	e023      	b.n	800ba5a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800ba12:	4b1a      	ldr	r3, [pc, #104]	@ (800ba7c <UTIL_TIMER_Stop+0xdc>)
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	4798      	blx	r3
            TimerListHead = NULL;
 800ba18:	4b17      	ldr	r3, [pc, #92]	@ (800ba78 <UTIL_TIMER_Stop+0xd8>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	e01c      	b.n	800ba5a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d110      	bne.n	800ba4a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	695b      	ldr	r3, [r3, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800ba3c:	e00d      	b.n	800ba5a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	615a      	str	r2, [r3, #20]
            break;
 800ba48:	e007      	b.n	800ba5a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e2      	bne.n	800ba20 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	77fb      	strb	r3, [r7, #31]
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	f383 8810 	msr	PRIMASK, r3
}
 800ba68:	e001      	b.n	800ba6e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800ba6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20000588 	.word	0x20000588
 800ba7c:	0800c6a0 	.word	0x0800c6a0

0800ba80 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800ba94:	2301      	movs	r3, #1
 800ba96:	73fb      	strb	r3, [r7, #15]
 800ba98:	e014      	b.n	800bac4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bad0 <UTIL_TIMER_SetPeriod+0x50>)
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba9e:	6838      	ldr	r0, [r7, #0]
 800baa0:	4798      	blx	r3
 800baa2:	4602      	mov	r2, r0
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f8c1 	bl	800bc30 <TimerExists>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff ff73 	bl	800b9a0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7ff ff02 	bl	800b8c4 <UTIL_TIMER_Start>
 800bac0:	4603      	mov	r3, r0
 800bac2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	0800c6a0 	.word	0x0800c6a0

0800bad4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b089      	sub	sp, #36	@ 0x24
 800bad8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bada:	f3ef 8310 	mrs	r3, PRIMASK
 800bade:	60bb      	str	r3, [r7, #8]
  return(result);
 800bae0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bae2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bae4:	b672      	cpsid	i
}
 800bae6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800bae8:	4b38      	ldr	r3, [pc, #224]	@ (800bbcc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	4798      	blx	r3
 800baee:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800baf0:	4b36      	ldr	r3, [pc, #216]	@ (800bbcc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	4798      	blx	r3
 800baf6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800bb00:	4b33      	ldr	r3, [pc, #204]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d037      	beq.n	800bb78 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800bb08:	4b31      	ldr	r3, [pc, #196]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d206      	bcs.n	800bb26 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	1ad2      	subs	r2, r2, r3
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	e002      	b.n	800bb2c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1ea      	bne.n	800bb0e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bb38:	e01e      	b.n	800bb78 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800bb3a:	4b25      	ldr	r3, [pc, #148]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800bb40:	4b23      	ldr	r3, [pc, #140]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	4a22      	ldr	r2, [pc, #136]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb48:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	2200      	movs	r2, #0
 800bb54:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	69fa      	ldr	r2, [r7, #28]
 800bb5c:	6912      	ldr	r2, [r2, #16]
 800bb5e:	4610      	mov	r0, r2
 800bb60:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	7adb      	ldrb	r3, [r3, #11]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d106      	bne.n	800bb78 <UTIL_TIMER_IRQ_Handler+0xa4>
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	7a9b      	ldrb	r3, [r3, #10]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d102      	bne.n	800bb78 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800bb72:	69f8      	ldr	r0, [r7, #28]
 800bb74:	f7ff fea6 	bl	800b8c4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bb78:	4b15      	ldr	r3, [pc, #84]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00d      	beq.n	800bb9c <UTIL_TIMER_IRQ_Handler+0xc8>
 800bb80:	4b13      	ldr	r3, [pc, #76]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0d7      	beq.n	800bb3a <UTIL_TIMER_IRQ_Handler+0x66>
 800bb8a:	4b11      	ldr	r3, [pc, #68]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681c      	ldr	r4, [r3, #0]
 800bb90:	4b0e      	ldr	r3, [pc, #56]	@ (800bbcc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	4798      	blx	r3
 800bb96:	4603      	mov	r3, r0
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	d3ce      	bcc.n	800bb3a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800bb9c:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d009      	beq.n	800bbb8 <UTIL_TIMER_IRQ_Handler+0xe4>
 800bba4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	7a1b      	ldrb	r3, [r3, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d104      	bne.n	800bbb8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800bbae:	4b08      	ldr	r3, [pc, #32]	@ (800bbd0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 f858 	bl	800bc68 <TimerSetTimeout>
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f383 8810 	msr	PRIMASK, r3
}
 800bbc2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800bbc4:	bf00      	nop
 800bbc6:	3724      	adds	r7, #36	@ 0x24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd90      	pop	{r4, r7, pc}
 800bbcc:	0800c6a0 	.word	0x0800c6a0
 800bbd0:	20000588 	.word	0x20000588

0800bbd4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800bbda:	4b06      	ldr	r3, [pc, #24]	@ (800bbf4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	4798      	blx	r3
 800bbe0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800bbe2:	4b04      	ldr	r3, [pc, #16]	@ (800bbf4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	4798      	blx	r3
 800bbea:	4603      	mov	r3, r0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	0800c6a0 	.word	0x0800c6a0

0800bbf8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800bc00:	4b0a      	ldr	r3, [pc, #40]	@ (800bc2c <UTIL_TIMER_GetElapsedTime+0x34>)
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	4798      	blx	r3
 800bc06:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800bc08:	4b08      	ldr	r3, [pc, #32]	@ (800bc2c <UTIL_TIMER_GetElapsedTime+0x34>)
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	4798      	blx	r3
 800bc10:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800bc12:	4b06      	ldr	r3, [pc, #24]	@ (800bc2c <UTIL_TIMER_GetElapsedTime+0x34>)
 800bc14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc16:	68f9      	ldr	r1, [r7, #12]
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	1a8a      	subs	r2, r1, r2
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4798      	blx	r3
 800bc20:	4603      	mov	r3, r0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	0800c6a0 	.word	0x0800c6a0

0800bc30 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bc38:	4b0a      	ldr	r3, [pc, #40]	@ (800bc64 <TimerExists+0x34>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800bc3e:	e008      	b.n	800bc52 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d101      	bne.n	800bc4c <TimerExists+0x1c>
    {
      return true;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e006      	b.n	800bc5a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1f3      	bne.n	800bc40 <TimerExists+0x10>
  }
  return false;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bc80      	pop	{r7}
 800bc62:	4770      	bx	lr
 800bc64:	20000588 	.word	0x20000588

0800bc68 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800bc68:	b590      	push	{r4, r7, lr}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800bc70:	4b11      	ldr	r3, [pc, #68]	@ (800bcb8 <TimerSetTimeout+0x50>)
 800bc72:	6a1b      	ldr	r3, [r3, #32]
 800bc74:	4798      	blx	r3
 800bc76:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681c      	ldr	r4, [r3, #0]
 800bc82:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb8 <TimerSetTimeout+0x50>)
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	4798      	blx	r3
 800bc88:	4602      	mov	r2, r0
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	429c      	cmp	r4, r3
 800bc90:	d207      	bcs.n	800bca2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800bc92:	4b09      	ldr	r3, [pc, #36]	@ (800bcb8 <TimerSetTimeout+0x50>)
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	4798      	blx	r3
 800bc98:	4602      	mov	r2, r0
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	441a      	add	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800bca2:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <TimerSetTimeout+0x50>)
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	6812      	ldr	r2, [r2, #0]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd90      	pop	{r4, r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0800c6a0 	.word	0x0800c6a0

0800bcbc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bcc4:	4b14      	ldr	r3, [pc, #80]	@ (800bd18 <TimerInsertTimer+0x5c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800bcca:	4b13      	ldr	r3, [pc, #76]	@ (800bd18 <TimerInsertTimer+0x5c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bcd2:	e012      	b.n	800bcfa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d905      	bls.n	800bcec <TimerInsertTimer+0x30>
    {
        cur = next;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	60bb      	str	r3, [r7, #8]
 800bcea:	e006      	b.n	800bcfa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	615a      	str	r2, [r3, #20]
        return;
 800bcf8:	e009      	b.n	800bd0e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1e8      	bne.n	800bcd4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	615a      	str	r2, [r3, #20]
}
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bc80      	pop	{r7}
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	20000588 	.word	0x20000588

0800bd1c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bd24:	4b0b      	ldr	r3, [pc, #44]	@ (800bd54 <TimerInsertNewHeadTimer+0x38>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bd3c:	4a05      	ldr	r2, [pc, #20]	@ (800bd54 <TimerInsertNewHeadTimer+0x38>)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bd42:	4b04      	ldr	r3, [pc, #16]	@ (800bd54 <TimerInsertNewHeadTimer+0x38>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff ff8e 	bl	800bc68 <TimerSetTimeout>
}
 800bd4c:	bf00      	nop
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	20000588 	.word	0x20000588

0800bd58 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800bd5c:	2218      	movs	r2, #24
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4807      	ldr	r0, [pc, #28]	@ (800bd80 <UTIL_ADV_TRACE_Init+0x28>)
 800bd62:	f7ff f8e8 	bl	800af36 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bd66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4805      	ldr	r0, [pc, #20]	@ (800bd84 <UTIL_ADV_TRACE_Init+0x2c>)
 800bd6e:	f7ff f8e2 	bl	800af36 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800bd72:	4b05      	ldr	r3, [pc, #20]	@ (800bd88 <UTIL_ADV_TRACE_Init+0x30>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4805      	ldr	r0, [pc, #20]	@ (800bd8c <UTIL_ADV_TRACE_Init+0x34>)
 800bd78:	4798      	blx	r3
 800bd7a:	4603      	mov	r3, r0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	2000058c 	.word	0x2000058c
 800bd84:	200005a4 	.word	0x200005a4
 800bd88:	0800c6e0 	.word	0x0800c6e0
 800bd8c:	0800bfd5 	.word	0x0800bfd5

0800bd90 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800bd90:	b408      	push	{r3}
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b08d      	sub	sp, #52	@ 0x34
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800bda2:	2300      	movs	r3, #0
 800bda4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bda6:	4b37      	ldr	r3, [pc, #220]	@ (800be84 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bda8:	7a1b      	ldrb	r3, [r3, #8]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d902      	bls.n	800bdb8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800bdb2:	f06f 0304 	mvn.w	r3, #4
 800bdb6:	e05e      	b.n	800be76 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800bdb8:	4b32      	ldr	r3, [pc, #200]	@ (800be84 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d002      	beq.n	800bdcc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800bdc6:	f06f 0305 	mvn.w	r3, #5
 800bdca:	e054      	b.n	800be76 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800bdcc:	4b2d      	ldr	r3, [pc, #180]	@ (800be84 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00a      	beq.n	800bdea <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d007      	beq.n	800bdea <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800bdda:	4b2a      	ldr	r3, [pc, #168]	@ (800be84 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f107 0116 	add.w	r1, r7, #22
 800bde2:	f107 0218 	add.w	r2, r7, #24
 800bde6:	4610      	mov	r0, r2
 800bde8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800bdea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bdee:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bdf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bdf8:	4823      	ldr	r0, [pc, #140]	@ (800be88 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800bdfa:	f7ff fa3d 	bl	800b278 <tiny_vsnprintf_like>
 800bdfe:	4603      	mov	r3, r0
 800be00:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800be02:	f000 f9f1 	bl	800c1e8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800be06:	8afa      	ldrh	r2, [r7, #22]
 800be08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800be0a:	4413      	add	r3, r2
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	f107 0214 	add.w	r2, r7, #20
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f000 f969 	bl	800c0ec <TRACE_AllocateBufer>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be20:	d025      	beq.n	800be6e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800be22:	2300      	movs	r3, #0
 800be24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800be26:	e00e      	b.n	800be46 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800be28:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be2a:	8aba      	ldrh	r2, [r7, #20]
 800be2c:	3330      	adds	r3, #48	@ 0x30
 800be2e:	443b      	add	r3, r7
 800be30:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800be34:	4b15      	ldr	r3, [pc, #84]	@ (800be8c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800be36:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800be38:	8abb      	ldrh	r3, [r7, #20]
 800be3a:	3301      	adds	r3, #1
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800be40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be42:	3301      	adds	r3, #1
 800be44:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800be46:	8afb      	ldrh	r3, [r7, #22]
 800be48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d3ec      	bcc.n	800be28 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800be4e:	8abb      	ldrh	r3, [r7, #20]
 800be50:	461a      	mov	r2, r3
 800be52:	4b0e      	ldr	r3, [pc, #56]	@ (800be8c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800be54:	18d0      	adds	r0, r2, r3
 800be56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be5e:	f7ff fa0b 	bl	800b278 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800be62:	f000 f9df 	bl	800c224 <TRACE_UnLock>

    return TRACE_Send();
 800be66:	f000 f831 	bl	800becc <TRACE_Send>
 800be6a:	4603      	mov	r3, r0
 800be6c:	e003      	b.n	800be76 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800be6e:	f000 f9d9 	bl	800c224 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800be72:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800be76:	4618      	mov	r0, r3
 800be78:	3734      	adds	r7, #52	@ 0x34
 800be7a:	46bd      	mov	sp, r7
 800be7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be80:	b001      	add	sp, #4
 800be82:	4770      	bx	lr
 800be84:	2000058c 	.word	0x2000058c
 800be88:	200007a4 	.word	0x200007a4
 800be8c:	200005a4 	.word	0x200005a4

0800be90 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800be98:	4a03      	ldr	r2, [pc, #12]	@ (800bea8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6053      	str	r3, [r2, #4]
}
 800be9e:	bf00      	nop
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bc80      	pop	{r7}
 800bea6:	4770      	bx	lr
 800bea8:	2000058c 	.word	0x2000058c

0800beac <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800beb6:	4a04      	ldr	r2, [pc, #16]	@ (800bec8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	7213      	strb	r3, [r2, #8]
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	2000058c 	.word	0x2000058c

0800becc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800bed6:	2300      	movs	r3, #0
 800bed8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beda:	f3ef 8310 	mrs	r3, PRIMASK
 800bede:	613b      	str	r3, [r7, #16]
  return(result);
 800bee0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bee4:	b672      	cpsid	i
}
 800bee6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800bee8:	f000 f9ba 	bl	800c260 <TRACE_IsLocked>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d15d      	bne.n	800bfae <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800bef2:	f000 f979 	bl	800c1e8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800bef6:	4b34      	ldr	r3, [pc, #208]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bef8:	8a1a      	ldrh	r2, [r3, #16]
 800befa:	4b33      	ldr	r3, [pc, #204]	@ (800bfc8 <TRACE_Send+0xfc>)
 800befc:	8a5b      	ldrh	r3, [r3, #18]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d04d      	beq.n	800bf9e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bf02:	4b31      	ldr	r3, [pc, #196]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf04:	789b      	ldrb	r3, [r3, #2]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d117      	bne.n	800bf3a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf0c:	881a      	ldrh	r2, [r3, #0]
 800bf0e:	4b2e      	ldr	r3, [pc, #184]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf10:	8a1b      	ldrh	r3, [r3, #16]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	4b2c      	ldr	r3, [pc, #176]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf18:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bf1a:	4b2b      	ldr	r3, [pc, #172]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bf20:	4b29      	ldr	r3, [pc, #164]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bf26:	4b28      	ldr	r3, [pc, #160]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf28:	8a9b      	ldrh	r3, [r3, #20]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d105      	bne.n	800bf3a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bf2e:	4b26      	ldr	r3, [pc, #152]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bf34:	4b24      	ldr	r3, [pc, #144]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf36:	2200      	movs	r2, #0
 800bf38:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bf3a:	4b23      	ldr	r3, [pc, #140]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf3c:	789b      	ldrb	r3, [r3, #2]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d115      	bne.n	800bf6e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bf42:	4b21      	ldr	r3, [pc, #132]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf44:	8a5a      	ldrh	r2, [r3, #18]
 800bf46:	4b20      	ldr	r3, [pc, #128]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf48:	8a1b      	ldrh	r3, [r3, #16]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d908      	bls.n	800bf60 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bf4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf50:	8a5a      	ldrh	r2, [r3, #18]
 800bf52:	4b1d      	ldr	r3, [pc, #116]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf54:	8a1b      	ldrh	r3, [r3, #16]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf5c:	829a      	strh	r2, [r3, #20]
 800bf5e:	e006      	b.n	800bf6e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bf60:	4b19      	ldr	r3, [pc, #100]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf62:	8a1b      	ldrh	r3, [r3, #16]
 800bf64:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	4b17      	ldr	r3, [pc, #92]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf6c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bf6e:	4b16      	ldr	r3, [pc, #88]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf70:	8a1b      	ldrh	r3, [r3, #16]
 800bf72:	461a      	mov	r2, r3
 800bf74:	4b15      	ldr	r3, [pc, #84]	@ (800bfcc <TRACE_Send+0x100>)
 800bf76:	4413      	add	r3, r2
 800bf78:	61bb      	str	r3, [r7, #24]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f383 8810 	msr	PRIMASK, r3
}
 800bf84:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800bf86:	f7f4 fda5 	bl	8000ad4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bf8a:	4b11      	ldr	r3, [pc, #68]	@ (800bfd0 <TRACE_Send+0x104>)
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	4a0e      	ldr	r2, [pc, #56]	@ (800bfc8 <TRACE_Send+0xfc>)
 800bf90:	8a92      	ldrh	r2, [r2, #20]
 800bf92:	4611      	mov	r1, r2
 800bf94:	69b8      	ldr	r0, [r7, #24]
 800bf96:	4798      	blx	r3
 800bf98:	4603      	mov	r3, r0
 800bf9a:	77fb      	strb	r3, [r7, #31]
 800bf9c:	e00d      	b.n	800bfba <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800bf9e:	f000 f941 	bl	800c224 <TRACE_UnLock>
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	f383 8810 	msr	PRIMASK, r3
}
 800bfac:	e005      	b.n	800bfba <TRACE_Send+0xee>
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f383 8810 	msr	PRIMASK, r3
}
 800bfb8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800bfba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3720      	adds	r7, #32
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	2000058c 	.word	0x2000058c
 800bfcc:	200005a4 	.word	0x200005a4
 800bfd0:	0800c6e0 	.word	0x0800c6e0

0800bfd4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfe0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfe4:	617b      	str	r3, [r7, #20]
  return(result);
 800bfe6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bfe8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfea:	b672      	cpsid	i
}
 800bfec:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800bfee:	4b3c      	ldr	r3, [pc, #240]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800bff0:	789b      	ldrb	r3, [r3, #2]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d106      	bne.n	800c004 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bff6:	4b3a      	ldr	r3, [pc, #232]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bffc:	4b38      	ldr	r3, [pc, #224]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800bffe:	2200      	movs	r2, #0
 800c000:	821a      	strh	r2, [r3, #16]
 800c002:	e00a      	b.n	800c01a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c004:	4b36      	ldr	r3, [pc, #216]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c006:	8a1a      	ldrh	r2, [r3, #16]
 800c008:	4b35      	ldr	r3, [pc, #212]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c00a:	8a9b      	ldrh	r3, [r3, #20]
 800c00c:	4413      	add	r3, r2
 800c00e:	b29b      	uxth	r3, r3
 800c010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c014:	b29a      	uxth	r2, r3
 800c016:	4b32      	ldr	r3, [pc, #200]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c018:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c01a:	4b31      	ldr	r3, [pc, #196]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c01c:	8a1a      	ldrh	r2, [r3, #16]
 800c01e:	4b30      	ldr	r3, [pc, #192]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c020:	8a5b      	ldrh	r3, [r3, #18]
 800c022:	429a      	cmp	r2, r3
 800c024:	d04d      	beq.n	800c0c2 <TRACE_TxCpltCallback+0xee>
 800c026:	4b2e      	ldr	r3, [pc, #184]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c028:	8adb      	ldrh	r3, [r3, #22]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d149      	bne.n	800c0c2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c02e:	4b2c      	ldr	r3, [pc, #176]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c030:	789b      	ldrb	r3, [r3, #2]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d117      	bne.n	800c066 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c036:	4b2a      	ldr	r3, [pc, #168]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c038:	881a      	ldrh	r2, [r3, #0]
 800c03a:	4b29      	ldr	r3, [pc, #164]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c03c:	8a1b      	ldrh	r3, [r3, #16]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	b29a      	uxth	r2, r3
 800c042:	4b27      	ldr	r3, [pc, #156]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c044:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c046:	4b26      	ldr	r3, [pc, #152]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c048:	2202      	movs	r2, #2
 800c04a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c04c:	4b24      	ldr	r3, [pc, #144]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c04e:	2200      	movs	r2, #0
 800c050:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c052:	4b23      	ldr	r3, [pc, #140]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c054:	8a9b      	ldrh	r3, [r3, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c05a:	4b21      	ldr	r3, [pc, #132]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c060:	4b1f      	ldr	r3, [pc, #124]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c062:	2200      	movs	r2, #0
 800c064:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c066:	4b1e      	ldr	r3, [pc, #120]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c068:	789b      	ldrb	r3, [r3, #2]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d115      	bne.n	800c09a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c06e:	4b1c      	ldr	r3, [pc, #112]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c070:	8a5a      	ldrh	r2, [r3, #18]
 800c072:	4b1b      	ldr	r3, [pc, #108]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c074:	8a1b      	ldrh	r3, [r3, #16]
 800c076:	429a      	cmp	r2, r3
 800c078:	d908      	bls.n	800c08c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c07a:	4b19      	ldr	r3, [pc, #100]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c07c:	8a5a      	ldrh	r2, [r3, #18]
 800c07e:	4b18      	ldr	r3, [pc, #96]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c080:	8a1b      	ldrh	r3, [r3, #16]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	b29a      	uxth	r2, r3
 800c086:	4b16      	ldr	r3, [pc, #88]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c088:	829a      	strh	r2, [r3, #20]
 800c08a:	e006      	b.n	800c09a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c08c:	4b14      	ldr	r3, [pc, #80]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c08e:	8a1b      	ldrh	r3, [r3, #16]
 800c090:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c094:	b29a      	uxth	r2, r3
 800c096:	4b12      	ldr	r3, [pc, #72]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c098:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c09a:	4b11      	ldr	r3, [pc, #68]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c09c:	8a1b      	ldrh	r3, [r3, #16]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	4b10      	ldr	r3, [pc, #64]	@ (800c0e4 <TRACE_TxCpltCallback+0x110>)
 800c0a2:	4413      	add	r3, r2
 800c0a4:	61fb      	str	r3, [r7, #28]
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	f383 8810 	msr	PRIMASK, r3
}
 800c0b0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e8 <TRACE_TxCpltCallback+0x114>)
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	4a0a      	ldr	r2, [pc, #40]	@ (800c0e0 <TRACE_TxCpltCallback+0x10c>)
 800c0b8:	8a92      	ldrh	r2, [r2, #20]
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	69f8      	ldr	r0, [r7, #28]
 800c0be:	4798      	blx	r3
 800c0c0:	e00a      	b.n	800c0d8 <TRACE_TxCpltCallback+0x104>
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f383 8810 	msr	PRIMASK, r3
}
 800c0cc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c0ce:	f7f4 fd09 	bl	8000ae4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c0d2:	f000 f8a7 	bl	800c224 <TRACE_UnLock>
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	3720      	adds	r7, #32
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	2000058c 	.word	0x2000058c
 800c0e4:	200005a4 	.word	0x200005a4
 800c0e8:	0800c6e0 	.word	0x0800c6e0

0800c0ec <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b087      	sub	sp, #28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	6039      	str	r1, [r7, #0]
 800c0f6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c0f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0fc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c102:	60fb      	str	r3, [r7, #12]
  return(result);
 800c104:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c108:	b672      	cpsid	i
}
 800c10a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c10c:	4b35      	ldr	r3, [pc, #212]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c10e:	8a5a      	ldrh	r2, [r3, #18]
 800c110:	4b34      	ldr	r3, [pc, #208]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c112:	8a1b      	ldrh	r3, [r3, #16]
 800c114:	429a      	cmp	r2, r3
 800c116:	d11b      	bne.n	800c150 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c118:	4b32      	ldr	r3, [pc, #200]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c11a:	8a5b      	ldrh	r3, [r3, #18]
 800c11c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c120:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c122:	88fa      	ldrh	r2, [r7, #6]
 800c124:	8afb      	ldrh	r3, [r7, #22]
 800c126:	429a      	cmp	r2, r3
 800c128:	d33a      	bcc.n	800c1a0 <TRACE_AllocateBufer+0xb4>
 800c12a:	4b2e      	ldr	r3, [pc, #184]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c12c:	8a1b      	ldrh	r3, [r3, #16]
 800c12e:	88fa      	ldrh	r2, [r7, #6]
 800c130:	429a      	cmp	r2, r3
 800c132:	d235      	bcs.n	800c1a0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c134:	4b2b      	ldr	r3, [pc, #172]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c136:	2201      	movs	r2, #1
 800c138:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c13a:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c13c:	8a5a      	ldrh	r2, [r3, #18]
 800c13e:	4b29      	ldr	r3, [pc, #164]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c140:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c142:	4b28      	ldr	r3, [pc, #160]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c144:	8a1b      	ldrh	r3, [r3, #16]
 800c146:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c148:	4b26      	ldr	r3, [pc, #152]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	825a      	strh	r2, [r3, #18]
 800c14e:	e027      	b.n	800c1a0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c150:	4b24      	ldr	r3, [pc, #144]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c152:	8a5a      	ldrh	r2, [r3, #18]
 800c154:	4b23      	ldr	r3, [pc, #140]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c156:	8a1b      	ldrh	r3, [r3, #16]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d91b      	bls.n	800c194 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c15c:	4b21      	ldr	r3, [pc, #132]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c15e:	8a5b      	ldrh	r3, [r3, #18]
 800c160:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c164:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c166:	88fa      	ldrh	r2, [r7, #6]
 800c168:	8afb      	ldrh	r3, [r7, #22]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d318      	bcc.n	800c1a0 <TRACE_AllocateBufer+0xb4>
 800c16e:	4b1d      	ldr	r3, [pc, #116]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c170:	8a1b      	ldrh	r3, [r3, #16]
 800c172:	88fa      	ldrh	r2, [r7, #6]
 800c174:	429a      	cmp	r2, r3
 800c176:	d213      	bcs.n	800c1a0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c178:	4b1a      	ldr	r3, [pc, #104]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c17a:	2201      	movs	r2, #1
 800c17c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c17e:	4b19      	ldr	r3, [pc, #100]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c180:	8a5a      	ldrh	r2, [r3, #18]
 800c182:	4b18      	ldr	r3, [pc, #96]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c184:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c186:	4b17      	ldr	r3, [pc, #92]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c188:	8a1b      	ldrh	r3, [r3, #16]
 800c18a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c18c:	4b15      	ldr	r3, [pc, #84]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c18e:	2200      	movs	r2, #0
 800c190:	825a      	strh	r2, [r3, #18]
 800c192:	e005      	b.n	800c1a0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c194:	4b13      	ldr	r3, [pc, #76]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c196:	8a1a      	ldrh	r2, [r3, #16]
 800c198:	4b12      	ldr	r3, [pc, #72]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c19a:	8a5b      	ldrh	r3, [r3, #18]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c1a0:	8afa      	ldrh	r2, [r7, #22]
 800c1a2:	88fb      	ldrh	r3, [r7, #6]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d90f      	bls.n	800c1c8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c1a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c1aa:	8a5a      	ldrh	r2, [r3, #18]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c1b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c1b2:	8a5a      	ldrh	r2, [r3, #18]
 800c1b4:	88fb      	ldrh	r3, [r7, #6]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	4b08      	ldr	r3, [pc, #32]	@ (800c1e4 <TRACE_AllocateBufer+0xf8>)
 800c1c2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	82bb      	strh	r3, [r7, #20]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f383 8810 	msr	PRIMASK, r3
}
 800c1d2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c1d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	371c      	adds	r7, #28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bc80      	pop	{r7}
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	2000058c 	.word	0x2000058c

0800c1e8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800c1f2:	607b      	str	r3, [r7, #4]
  return(result);
 800c1f4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c1f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1f8:	b672      	cpsid	i
}
 800c1fa:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c1fc:	4b08      	ldr	r3, [pc, #32]	@ (800c220 <TRACE_Lock+0x38>)
 800c1fe:	8adb      	ldrh	r3, [r3, #22]
 800c200:	3301      	adds	r3, #1
 800c202:	b29a      	uxth	r2, r3
 800c204:	4b06      	ldr	r3, [pc, #24]	@ (800c220 <TRACE_Lock+0x38>)
 800c206:	82da      	strh	r2, [r3, #22]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	f383 8810 	msr	PRIMASK, r3
}
 800c212:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c214:	bf00      	nop
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	bc80      	pop	{r7}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	2000058c 	.word	0x2000058c

0800c224 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c22a:	f3ef 8310 	mrs	r3, PRIMASK
 800c22e:	607b      	str	r3, [r7, #4]
  return(result);
 800c230:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c232:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c234:	b672      	cpsid	i
}
 800c236:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c238:	4b08      	ldr	r3, [pc, #32]	@ (800c25c <TRACE_UnLock+0x38>)
 800c23a:	8adb      	ldrh	r3, [r3, #22]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	b29a      	uxth	r2, r3
 800c240:	4b06      	ldr	r3, [pc, #24]	@ (800c25c <TRACE_UnLock+0x38>)
 800c242:	82da      	strh	r2, [r3, #22]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f383 8810 	msr	PRIMASK, r3
}
 800c24e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c250:	bf00      	nop
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	bc80      	pop	{r7}
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	2000058c 	.word	0x2000058c

0800c260 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c264:	4b05      	ldr	r3, [pc, #20]	@ (800c27c <TRACE_IsLocked+0x1c>)
 800c266:	8adb      	ldrh	r3, [r3, #22]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bf14      	ite	ne
 800c26c:	2301      	movne	r3, #1
 800c26e:	2300      	moveq	r3, #0
 800c270:	b2db      	uxtb	r3, r3
}
 800c272:	4618      	mov	r0, r3
 800c274:	46bd      	mov	sp, r7
 800c276:	bc80      	pop	{r7}
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	2000058c 	.word	0x2000058c

0800c280 <memset>:
 800c280:	4402      	add	r2, r0
 800c282:	4603      	mov	r3, r0
 800c284:	4293      	cmp	r3, r2
 800c286:	d100      	bne.n	800c28a <memset+0xa>
 800c288:	4770      	bx	lr
 800c28a:	f803 1b01 	strb.w	r1, [r3], #1
 800c28e:	e7f9      	b.n	800c284 <memset+0x4>

0800c290 <strncmp>:
 800c290:	b510      	push	{r4, lr}
 800c292:	b16a      	cbz	r2, 800c2b0 <strncmp+0x20>
 800c294:	3901      	subs	r1, #1
 800c296:	1884      	adds	r4, r0, r2
 800c298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c29c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d103      	bne.n	800c2ac <strncmp+0x1c>
 800c2a4:	42a0      	cmp	r0, r4
 800c2a6:	d001      	beq.n	800c2ac <strncmp+0x1c>
 800c2a8:	2a00      	cmp	r2, #0
 800c2aa:	d1f5      	bne.n	800c298 <strncmp+0x8>
 800c2ac:	1ad0      	subs	r0, r2, r3
 800c2ae:	bd10      	pop	{r4, pc}
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	e7fc      	b.n	800c2ae <strncmp+0x1e>

0800c2b4 <__libc_init_array>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c2ec <__libc_init_array+0x38>)
 800c2b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c2f0 <__libc_init_array+0x3c>)
 800c2ba:	1b64      	subs	r4, r4, r5
 800c2bc:	10a4      	asrs	r4, r4, #2
 800c2be:	2600      	movs	r6, #0
 800c2c0:	42a6      	cmp	r6, r4
 800c2c2:	d109      	bne.n	800c2d8 <__libc_init_array+0x24>
 800c2c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c2f4 <__libc_init_array+0x40>)
 800c2c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c2f8 <__libc_init_array+0x44>)
 800c2c8:	f000 f826 	bl	800c318 <_init>
 800c2cc:	1b64      	subs	r4, r4, r5
 800c2ce:	10a4      	asrs	r4, r4, #2
 800c2d0:	2600      	movs	r6, #0
 800c2d2:	42a6      	cmp	r6, r4
 800c2d4:	d105      	bne.n	800c2e2 <__libc_init_array+0x2e>
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2dc:	4798      	blx	r3
 800c2de:	3601      	adds	r6, #1
 800c2e0:	e7ee      	b.n	800c2c0 <__libc_init_array+0xc>
 800c2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e6:	4798      	blx	r3
 800c2e8:	3601      	adds	r6, #1
 800c2ea:	e7f2      	b.n	800c2d2 <__libc_init_array+0x1e>
 800c2ec:	0800c870 	.word	0x0800c870
 800c2f0:	0800c870 	.word	0x0800c870
 800c2f4:	0800c870 	.word	0x0800c870
 800c2f8:	0800c874 	.word	0x0800c874

0800c2fc <memcpy>:
 800c2fc:	440a      	add	r2, r1
 800c2fe:	4291      	cmp	r1, r2
 800c300:	f100 33ff 	add.w	r3, r0, #4294967295
 800c304:	d100      	bne.n	800c308 <memcpy+0xc>
 800c306:	4770      	bx	lr
 800c308:	b510      	push	{r4, lr}
 800c30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c30e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c312:	4291      	cmp	r1, r2
 800c314:	d1f9      	bne.n	800c30a <memcpy+0xe>
 800c316:	bd10      	pop	{r4, pc}

0800c318 <_init>:
 800c318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31a:	bf00      	nop
 800c31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31e:	bc08      	pop	{r3}
 800c320:	469e      	mov	lr, r3
 800c322:	4770      	bx	lr

0800c324 <_fini>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	bf00      	nop
 800c328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c32a:	bc08      	pop	{r3}
 800c32c:	469e      	mov	lr, r3
 800c32e:	4770      	bx	lr
